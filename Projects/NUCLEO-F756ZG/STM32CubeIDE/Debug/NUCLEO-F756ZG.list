
NUCLEO-F756ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  2000009c  080068c4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00018000  200009e8  080068c4  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f754  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bac  00000000  00000000  0002f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000323d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028634  00000000  00000000  00033d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d7f  00000000  00000000  0005c354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28fc  00000000  00000000  0006e0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001609cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b8c  00000000  00000000  00160a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006420 	.word	0x08006420

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08006420 	.word	0x08006420

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	23ff      	movs	r3, #255	; 0xff
 80005c0:	2201      	movs	r2, #1
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <__io_putchar+0x20>)
 80005c4:	f002 f8b0 	bl	8002728 <HAL_UART_Transmit>

  return ch;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000908 	.word	0x20000908

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  wiz_NetInfo net_info =
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <main+0x40>)
 80005e0:	463c      	mov	r4, r7
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ec:	6020      	str	r0, [r4, #0]
 80005ee:	3404      	adds	r4, #4
 80005f0:	8021      	strh	r1, [r4, #0]
 80005f2:	3402      	adds	r4, #2
 80005f4:	0c0b      	lsrs	r3, r1, #16
 80005f6:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fbb2 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f80e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f926 	bl	8000850 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f878 	bl	80006f8 <MX_USART3_UART_Init>
  MX_FMC_Init();
 8000608:	f000 f8a6 	bl	8000758 <MX_FMC_Init>
#endif /* APP_SNTP */
#ifdef APP_TCP_CLIENT_OVER_SSL
  tcp_client_over_ssl_demo(&net_info);
#endif /* APP_TCP_CLIENT_OVER_SSL */
#ifdef APP_LOOPBACK
  loopback_demo(&net_info);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fe2a 	bl	8003268 <loopback_demo>
// ----------------------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x3c>
 8000616:	bf00      	nop
 8000618:	08006438 	.word	0x08006438

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 feec 	bl	8005408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f000 fec2 	bl	80013c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <SystemClock_Config+0xd8>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800068c:	23d8      	movs	r3, #216	; 0xd8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fef3 	bl	8001488 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a8:	f000 f95e 	bl	8000968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ac:	f000 fe9c 	bl	80013e8 <HAL_PWREx_EnableOverDrive>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f957 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2107      	movs	r1, #7
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f979 	bl	80019d0 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006e4:	f000 f940 	bl	8000968 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART3_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART3_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800073c:	f001 ffa6 	bl	800268c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f90f 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000908 	.word	0x20000908
 8000754:	40004800 	.word	0x40004800

08000758 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000770:	4b35      	ldr	r3, [pc, #212]	; (8000848 <MX_FMC_Init+0xf0>)
 8000772:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000776:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_FMC_Init+0xf0>)
 800077a:	4a34      	ldr	r2, [pc, #208]	; (800084c <MX_FMC_Init+0xf4>)
 800077c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <MX_FMC_Init+0xf0>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_FMC_Init+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <MX_FMC_Init+0xf0>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_FMC_Init+0xf0>)
 8000792:	2210      	movs	r2, #16
 8000794:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_FMC_Init+0xf0>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_FMC_Init+0xf0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_FMC_Init+0xf0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_FMC_Init+0xf0>)
 80007aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_FMC_Init+0xf0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_FMC_Init+0xf0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_FMC_Init+0xf0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_FMC_Init+0xf0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_FMC_Init+0xf0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_FMC_Init+0xf0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_FMC_Init+0xf0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80007de:	230f      	movs	r3, #15
 80007e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80007e2:	23ff      	movs	r3, #255	; 0xff
 80007e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80007e6:	230f      	movs	r3, #15
 80007e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80007ee:	2311      	movs	r3, #17
 80007f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_FMC_Init+0xf0>)
 80007fe:	f001 fefd 	bl	80025fc <HAL_SRAM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000808:	f000 f8ae 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  // overwrite
  Timing.AddressSetupTime = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 7;
 8000814:	2307      	movs	r3, #7
 8000816:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_FMC_Init+0xf0>)
 8000830:	f001 fee4 	bl	80025fc <HAL_SRAM_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_FMC_Init+0xe6>
  {
    Error_Handler();
 800083a:	f000 f895 	bl	8000968 <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000990 	.word	0x20000990
 800084c:	a0000104 	.word	0xa0000104

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x10c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x10c>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x10c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_GPIO_Init+0x10c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a36      	ldr	r2, [pc, #216]	; (800095c <MX_GPIO_Init+0x10c>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_GPIO_Init+0x10c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_GPIO_Init+0x10c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_GPIO_Init+0x10c>)
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_GPIO_Init+0x10c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_GPIO_Init+0x10c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <MX_GPIO_Init+0x10c>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_GPIO_Init+0x10c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_GPIO_Init+0x10c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <MX_GPIO_Init+0x10c>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_GPIO_Init+0x10c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_GPIO_Init+0x10c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <MX_GPIO_Init+0x10c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_GPIO_Init+0x110>)
 80008fe:	f000 fd49 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 8000902:	233c      	movs	r3, #60	; 0x3c
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_GPIO_Init+0x114>)
 8000916:	f000 fb91 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_INT_Pin */
  GPIO_InitStruct.Pin = W5x00_INT_Pin;
 800091a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5x00_INT_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0x110>)
 8000930:	f000 fb84 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8000934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0x110>)
 800094e:	f000 fb75 	bl	800103c <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	; 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020800 	.word	0x40020800
 8000964:	40021000 	.word	0x40021000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0aa      	sub	sp, #168	; 0xa8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2284      	movs	r2, #132	; 0x84
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fd13 	bl	8005408 <memset>
  if(huart->Instance==USART3)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13c      	bne.n	8000a66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa0e 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f7ff ffaf 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a54:	2307      	movs	r3, #7
 8000a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0xbc>)
 8000a62:	f000 faeb 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	37a8      	adds	r7, #168	; 0xa8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020800 	.word	0x40020800

08000a7c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_FMC_MspInit+0xa4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d13f      	bne.n	8000b18 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_FMC_MspInit+0xa4>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_FMC_MspInit+0xa8>)
 8000aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <HAL_FMC_MspInit+0xa8>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6393      	str	r3, [r2, #56]	; 0x38
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_FMC_MspInit+0xa8>)
 8000aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ab6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000aba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4815      	ldr	r0, [pc, #84]	; (8000b28 <HAL_FMC_MspInit+0xac>)
 8000ad2:	f000 fab3 	bl	800103c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ad6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000ada:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	480e      	ldr	r0, [pc, #56]	; (8000b2c <HAL_FMC_MspInit+0xb0>)
 8000af2:	f000 faa3 	bl	800103c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000af6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000afa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <HAL_FMC_MspInit+0xb4>)
 8000b12:	f000 fa93 	bl	800103c <HAL_GPIO_Init>
 8000b16:	e000      	b.n	8000b1a <HAL_FMC_MspInit+0x9e>
    return;
 8000b18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000b8 	.word	0x200000b8
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b3c:	f7ff ff9e 	bl	8000a7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f922 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000b98:	f000 fa49 	bl	800102e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
  }

  return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fcdd 	bl	80005b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
  }
  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f004 fb82 	bl	80053b4 <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20050000 	.word	0x20050000
 8000cdc:	00008000 	.word	0x00008000
 8000ce0:	200000bc 	.word	0x200000bc
 8000ce4:	200009e8 	.word	0x200009e8

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d12:	f000 f813 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 fb53 	bl	80053c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc5d 	bl	80005d8 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000d2c:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 8000d30:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000d34:	200009e8 	.word	0x200009e8

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f92f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f806 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe00 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f93b 	bl	8001016 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f000 f911 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200009dc 	.word	0x200009dc

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200009dc 	.word	0x200009dc

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	05fa0000 	.word	0x05fa0000

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff47 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5c 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb0 	bl	8000f84 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001032:	f004 f977 	bl	8005324 <HAL_SYSTICK_Callback>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e175      	b.n	8001348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8164 	bne.w	8001342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x56>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80be 	beq.w	8001342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a65      	ldr	r2, [pc, #404]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011de:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_GPIO_Init+0x328>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d037      	beq.n	800127a <HAL_GPIO_Init+0x23e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d031      	beq.n	8001276 <HAL_GPIO_Init+0x23a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x236>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_GPIO_Init+0x338>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x232>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x33c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_GPIO_Init+0x340>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x344>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x348>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x34c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x350>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x21a>
 8001252:	2309      	movs	r3, #9
 8001254:	e012      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001256:	230a      	movs	r3, #10
 8001258:	e010      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125a:	2308      	movs	r3, #8
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125e:	2307      	movs	r3, #7
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x240>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x328>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_GPIO_Init+0x354>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x354>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x354>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_GPIO_Init+0x354>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae86 	bls.w	800105c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40022000 	.word	0x40022000
 800138c:	40022400 	.word	0x40022400
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001416:	f7ff fcf5 	bl	8000e04 <HAL_GetTick>
 800141a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800141c:	e009      	b.n	8001432 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800141e:	f7ff fcf1 	bl	8000e04 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142c:	d901      	bls.n	8001432 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e022      	b.n	8001478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d1ee      	bne.n	800141e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144c:	f7ff fcda 	bl	8000e04 <HAL_GetTick>
 8001450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001452:	e009      	b.n	8001468 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001454:	f7ff fcd6 	bl	8000e04 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001462:	d901      	bls.n	8001468 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e007      	b.n	8001478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001474:	d1ee      	bne.n	8001454 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e291      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8087 	beq.w	80015ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ac:	4b96      	ldr	r3, [pc, #600]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d00c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
 80014c4:	4b90      	ldr	r3, [pc, #576]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b8d      	ldr	r3, [pc, #564]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x130>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d168      	bne.n	80015b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e26b      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x7a>
 80014f4:	4b84      	ldr	r3, [pc, #528]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a83      	ldr	r2, [pc, #524]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e02e      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x9c>
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b7c      	ldr	r3, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7b      	ldr	r2, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0xc0>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001548:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6b      	ldr	r2, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc4c 	bl	8000e04 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fc48 	bl	8000e04 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e21f      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc38 	bl	8000e04 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc34 	bl	8000e04 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e20b      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x110>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d069      	beq.n	800169a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x190>
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x17a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1df      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	493d      	ldr	r1, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e040      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a38      	ldr	r2, [pc, #224]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fbea 	bl	8000e04 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fbe6 	bl	8000e04 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1bd      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4929      	ldr	r1, [pc, #164]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
 8001666:	e018      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fbc6 	bl	8000e04 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbc2 	bl	8000e04 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e199      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d038      	beq.n	8001718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d019      	beq.n	80016e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fba3 	bl	8000e04 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb9f 	bl	8000e04 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e176      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x23a>
 80016e0:	e01a      	b.n	8001718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_RCC_OscConfig+0x280>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb89 	bl	8000e04 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb85 	bl	8000e04 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d903      	bls.n	800170c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e15c      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
 8001708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b91      	ldr	r3, [pc, #580]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a4 	beq.w	800186e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x4d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb4d 	bl	8000e04 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fb49 	bl	8000e04 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e120      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x31a>
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x33c>
 80017aa:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x35e>
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fafd 	bl	8000e04 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff faf9 	bl	8000e04 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0ce      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x386>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fae7 	bl	8000e04 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fae3 	bl	8000e04 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a4 	beq.w	80019c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d06b      	beq.n	800195c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d149      	bne.n	8001920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a30      	ldr	r2, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fab4 	bl	8000e04 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fab0 	bl	8000e04 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e087      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa84 	bl	8000e04 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fa80 	bl	8000e04 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e057      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x478>
 800191e:	e04f      	b.n	80019c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fa6a 	bl	8000e04 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fa66 	bl	8000e04 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e03d      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x4ac>
 8001952:	e035      	b.n	80019c0 <HAL_RCC_OscConfig+0x538>
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x544>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d028      	beq.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d121      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	4965      	ldr	r1, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f99e 	bl	8000e04 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f99a 	bl	8000e04 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1cc>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f8fa 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08006768 	.word	0x08006768
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b094      	sub	sp, #80	; 0x50
 8001bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb8:	2300      	movs	r3, #0
 8001bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d00d      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f200 80e1 	bhi.w	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bda:	e0db      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be0:	e0db      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be2:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be6:	e0d8      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
 8001c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0159      	lsls	r1, r3, #5
 8001c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2c:	0150      	lsls	r0, r2, #5
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4621      	mov	r1, r4
 8001c34:	1a51      	subs	r1, r2, r1
 8001c36:	6139      	str	r1, [r7, #16]
 8001c38:	4629      	mov	r1, r5
 8001c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	4651      	mov	r1, sl
 8001c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c56:	4651      	mov	r1, sl
 8001c58:	018a      	lsls	r2, r1, #6
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c60:	4659      	mov	r1, fp
 8001c62:	eb63 0901 	sbc.w	r9, r3, r1
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	eb18 0303 	adds.w	r3, r8, r3
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	462b      	mov	r3, r5
 8001c88:	eb49 0303 	adc.w	r3, r9, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	024b      	lsls	r3, r1, #9
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	024a      	lsls	r2, r1, #9
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cb8:	f7fe fafa 	bl	80002b0 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc4:	e058      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce0:	4642      	mov	r2, r8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0159      	lsls	r1, r3, #5
 8001cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf2:	0150      	lsls	r0, r2, #5
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d18:	ebb2 040a 	subs.w	r4, r2, sl
 8001d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	00eb      	lsls	r3, r5, #3
 8001d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2e:	00e2      	lsls	r2, r4, #3
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	2200      	movs	r2, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	61fa      	str	r2, [r7, #28]
 8001d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6c:	f7fe faa0 	bl	80002b0 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3750      	adds	r7, #80	; 0x50
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200

08001db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000

08001dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd0:	f7ff fff0 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08006778 	.word	0x08006778

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df8:	f7ff ffdc 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0b5b      	lsrs	r3, r3, #13
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08006778 	.word	0x08006778

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e44:	4b69      	ldr	r3, [pc, #420]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a68      	ldr	r2, [pc, #416]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e4e:	6093      	str	r3, [r2, #8]
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	4964      	ldr	r1, [pc, #400]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d017      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	4959      	ldr	r1, [pc, #356]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	494a      	ldr	r1, [pc, #296]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 808b 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff6e 	bl	8000e04 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe ff6a 	bl	8000e04 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e357      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d035      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d02e      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d114      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff32 	bl	8000e04 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ff2e 	bl	8000e04 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e319      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	4901      	ldr	r1, [pc, #4]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
 8001fea:	e00b      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	0ffffcff 	.word	0x0ffffcff
 8001ff8:	4baa      	ldr	r3, [pc, #680]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4aa9      	ldr	r2, [pc, #676]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	4ba7      	ldr	r3, [pc, #668]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	49a4      	ldr	r1, [pc, #656]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002012:	4313      	orrs	r3, r2
 8002014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002022:	4ba0      	ldr	r3, [pc, #640]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	4a9e      	ldr	r2, [pc, #632]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002032:	4b9c      	ldr	r3, [pc, #624]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	4999      	ldr	r1, [pc, #612]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002050:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205e:	4991      	ldr	r1, [pc, #580]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002072:	4b8c      	ldr	r3, [pc, #560]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002080:	4988      	ldr	r1, [pc, #544]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002094:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a2:	4980      	ldr	r1, [pc, #512]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020b6:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4977      	ldr	r1, [pc, #476]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d8:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	496f      	ldr	r1, [pc, #444]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fa:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f023 020c 	bic.w	r2, r3, #12
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	4966      	ldr	r1, [pc, #408]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211c:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	495e      	ldr	r1, [pc, #376]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213e:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	4955      	ldr	r1, [pc, #340]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	494d      	ldr	r1, [pc, #308]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002182:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4944      	ldr	r1, [pc, #272]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	493c      	ldr	r1, [pc, #240]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	4933      	ldr	r1, [pc, #204]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f6:	492b      	ldr	r1, [pc, #172]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d011      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002218:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	4912      	ldr	r1, [pc, #72]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d006      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80d9 	beq.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a01      	ldr	r2, [pc, #4]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022aa:	f7fe fdab 	bl	8000e04 <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022b2:	f7fe fda7 	bl	8000e04 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e194      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022c4:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11d      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f8:	0e1b      	lsrs	r3, r3, #24
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	019a      	lsls	r2, r3, #6
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	071b      	lsls	r3, r3, #28
 8002318:	4957      	ldr	r1, [pc, #348]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d02e      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d129      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	0f1b      	lsrs	r3, r3, #28
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	019a      	lsls	r2, r3, #6
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	071b      	lsls	r3, r3, #28
 8002380:	493d      	ldr	r1, [pc, #244]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238e:	f023 021f 	bic.w	r2, r3, #31
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	3b01      	subs	r3, #1
 8002398:	4937      	ldr	r1, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0f1b      	lsrs	r3, r3, #28
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	019a      	lsls	r2, r3, #6
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	4925      	ldr	r1, [pc, #148]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	019a      	lsls	r2, r3, #6
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	071b      	lsls	r3, r3, #28
 8002410:	4919      	ldr	r1, [pc, #100]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fcee 	bl	8000e04 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800242c:	f7fe fcea 	bl	8000e04 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0d7      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 80cd 	bne.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245e:	f7fe fcd1 	bl	8000e04 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002466:	f7fe fccd 	bl	8000e04 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d903      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0ba      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800247c:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002488:	d0ed      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02e      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	0f1b      	lsrs	r3, r3, #28
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4944      	ldr	r1, [pc, #272]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	493d      	ldr	r1, [pc, #244]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251c:	d11d      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	0f1b      	lsrs	r3, r3, #28
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	019a      	lsls	r2, r3, #6
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	4929      	ldr	r1, [pc, #164]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	0e1b      	lsrs	r3, r3, #24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002574:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	019a      	lsls	r2, r3, #6
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	4917      	ldr	r1, [pc, #92]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4911      	ldr	r1, [pc, #68]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fc1e 	bl	8000e04 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025cc:	f7fe fc1a 	bl	8000e04 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e007      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ea:	d1ef      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e038      	b.n	8002684 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7fe fa84 	bl	8000b34 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3308      	adds	r3, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 fcfe 	bl	8003038 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	461a      	mov	r2, r3
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	f000 fd86 	bl	8003158 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6858      	ldr	r0, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	f000 fdcd 	bl	80031f8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	f041 0101 	orr.w	r1, r1, #1
 8002676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e040      	b.n	8002720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe f984 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8b0 	bl	8002830 <UART_SetConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fb08 	bl	8002cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fb8f 	bl	8002e3c <UART_CheckIdleState>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273c:	2b20      	cmp	r3, #32
 800273e:	d171      	bne.n	8002824 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_Transmit+0x24>
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e06a      	b.n	8002826 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275e:	f7fe fb51 	bl	8000e04 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Transmit+0x68>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002798:	e02c      	b.n	80027f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fb80 	bl	8002eaa <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e038      	b.n	8002826 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10b      	bne.n	80027d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	3302      	adds	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	e007      	b.n	80027e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1cc      	bne.n	800279a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb4d 	bl	8002eaa <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e005      	b.n	8002826 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4ba6      	ldr	r3, [pc, #664]	; (8002af4 <UART_SetConfig+0x2c4>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	6979      	ldr	r1, [r7, #20]
 8002864:	430b      	orrs	r3, r1
 8002866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a94      	ldr	r2, [pc, #592]	; (8002af8 <UART_SetConfig+0x2c8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d120      	bne.n	80028ee <UART_SetConfig+0xbe>
 80028ac:	4b93      	ldr	r3, [pc, #588]	; (8002afc <UART_SetConfig+0x2cc>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d816      	bhi.n	80028e8 <UART_SetConfig+0xb8>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <UART_SetConfig+0x90>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028dd 	.word	0x080028dd
 80028c8:	080028d7 	.word	0x080028d7
 80028cc:	080028e3 	.word	0x080028e3
 80028d0:	2301      	movs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
 80028d4:	e150      	b.n	8002b78 <UART_SetConfig+0x348>
 80028d6:	2302      	movs	r3, #2
 80028d8:	77fb      	strb	r3, [r7, #31]
 80028da:	e14d      	b.n	8002b78 <UART_SetConfig+0x348>
 80028dc:	2304      	movs	r3, #4
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e14a      	b.n	8002b78 <UART_SetConfig+0x348>
 80028e2:	2308      	movs	r3, #8
 80028e4:	77fb      	strb	r3, [r7, #31]
 80028e6:	e147      	b.n	8002b78 <UART_SetConfig+0x348>
 80028e8:	2310      	movs	r3, #16
 80028ea:	77fb      	strb	r3, [r7, #31]
 80028ec:	e144      	b.n	8002b78 <UART_SetConfig+0x348>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <UART_SetConfig+0x2d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d132      	bne.n	800295e <UART_SetConfig+0x12e>
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <UART_SetConfig+0x2cc>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d828      	bhi.n	8002958 <UART_SetConfig+0x128>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <UART_SetConfig+0xdc>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002941 	.word	0x08002941
 8002910:	08002959 	.word	0x08002959
 8002914:	08002959 	.word	0x08002959
 8002918:	08002959 	.word	0x08002959
 800291c:	0800294d 	.word	0x0800294d
 8002920:	08002959 	.word	0x08002959
 8002924:	08002959 	.word	0x08002959
 8002928:	08002959 	.word	0x08002959
 800292c:	08002947 	.word	0x08002947
 8002930:	08002959 	.word	0x08002959
 8002934:	08002959 	.word	0x08002959
 8002938:	08002959 	.word	0x08002959
 800293c:	08002953 	.word	0x08002953
 8002940:	2300      	movs	r3, #0
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e118      	b.n	8002b78 <UART_SetConfig+0x348>
 8002946:	2302      	movs	r3, #2
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e115      	b.n	8002b78 <UART_SetConfig+0x348>
 800294c:	2304      	movs	r3, #4
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e112      	b.n	8002b78 <UART_SetConfig+0x348>
 8002952:	2308      	movs	r3, #8
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e10f      	b.n	8002b78 <UART_SetConfig+0x348>
 8002958:	2310      	movs	r3, #16
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e10c      	b.n	8002b78 <UART_SetConfig+0x348>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a68      	ldr	r2, [pc, #416]	; (8002b04 <UART_SetConfig+0x2d4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d120      	bne.n	80029aa <UART_SetConfig+0x17a>
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <UART_SetConfig+0x2cc>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002972:	2b30      	cmp	r3, #48	; 0x30
 8002974:	d013      	beq.n	800299e <UART_SetConfig+0x16e>
 8002976:	2b30      	cmp	r3, #48	; 0x30
 8002978:	d814      	bhi.n	80029a4 <UART_SetConfig+0x174>
 800297a:	2b20      	cmp	r3, #32
 800297c:	d009      	beq.n	8002992 <UART_SetConfig+0x162>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d810      	bhi.n	80029a4 <UART_SetConfig+0x174>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <UART_SetConfig+0x15c>
 8002986:	2b10      	cmp	r3, #16
 8002988:	d006      	beq.n	8002998 <UART_SetConfig+0x168>
 800298a:	e00b      	b.n	80029a4 <UART_SetConfig+0x174>
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	e0f2      	b.n	8002b78 <UART_SetConfig+0x348>
 8002992:	2302      	movs	r3, #2
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	e0ef      	b.n	8002b78 <UART_SetConfig+0x348>
 8002998:	2304      	movs	r3, #4
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e0ec      	b.n	8002b78 <UART_SetConfig+0x348>
 800299e:	2308      	movs	r3, #8
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e0e9      	b.n	8002b78 <UART_SetConfig+0x348>
 80029a4:	2310      	movs	r3, #16
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e0e6      	b.n	8002b78 <UART_SetConfig+0x348>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <UART_SetConfig+0x2d8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d120      	bne.n	80029f6 <UART_SetConfig+0x1c6>
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <UART_SetConfig+0x2cc>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029be:	2bc0      	cmp	r3, #192	; 0xc0
 80029c0:	d013      	beq.n	80029ea <UART_SetConfig+0x1ba>
 80029c2:	2bc0      	cmp	r3, #192	; 0xc0
 80029c4:	d814      	bhi.n	80029f0 <UART_SetConfig+0x1c0>
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d009      	beq.n	80029de <UART_SetConfig+0x1ae>
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d810      	bhi.n	80029f0 <UART_SetConfig+0x1c0>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <UART_SetConfig+0x1a8>
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d006      	beq.n	80029e4 <UART_SetConfig+0x1b4>
 80029d6:	e00b      	b.n	80029f0 <UART_SetConfig+0x1c0>
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e0cc      	b.n	8002b78 <UART_SetConfig+0x348>
 80029de:	2302      	movs	r3, #2
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e0c9      	b.n	8002b78 <UART_SetConfig+0x348>
 80029e4:	2304      	movs	r3, #4
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e0c6      	b.n	8002b78 <UART_SetConfig+0x348>
 80029ea:	2308      	movs	r3, #8
 80029ec:	77fb      	strb	r3, [r7, #31]
 80029ee:	e0c3      	b.n	8002b78 <UART_SetConfig+0x348>
 80029f0:	2310      	movs	r3, #16
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e0c0      	b.n	8002b78 <UART_SetConfig+0x348>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <UART_SetConfig+0x2dc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d125      	bne.n	8002a4c <UART_SetConfig+0x21c>
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <UART_SetConfig+0x2cc>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0e:	d017      	beq.n	8002a40 <UART_SetConfig+0x210>
 8002a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a14:	d817      	bhi.n	8002a46 <UART_SetConfig+0x216>
 8002a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1a:	d00b      	beq.n	8002a34 <UART_SetConfig+0x204>
 8002a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a20:	d811      	bhi.n	8002a46 <UART_SetConfig+0x216>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <UART_SetConfig+0x1fe>
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2a:	d006      	beq.n	8002a3a <UART_SetConfig+0x20a>
 8002a2c:	e00b      	b.n	8002a46 <UART_SetConfig+0x216>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e0a1      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a34:	2302      	movs	r3, #2
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e09e      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e09b      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a40:	2308      	movs	r3, #8
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e098      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a46:	2310      	movs	r3, #16
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e095      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <UART_SetConfig+0x2e0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d125      	bne.n	8002aa2 <UART_SetConfig+0x272>
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <UART_SetConfig+0x2cc>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a64:	d017      	beq.n	8002a96 <UART_SetConfig+0x266>
 8002a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a6a:	d817      	bhi.n	8002a9c <UART_SetConfig+0x26c>
 8002a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a70:	d00b      	beq.n	8002a8a <UART_SetConfig+0x25a>
 8002a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a76:	d811      	bhi.n	8002a9c <UART_SetConfig+0x26c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <UART_SetConfig+0x254>
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d006      	beq.n	8002a90 <UART_SetConfig+0x260>
 8002a82:	e00b      	b.n	8002a9c <UART_SetConfig+0x26c>
 8002a84:	2301      	movs	r3, #1
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e076      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e073      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a90:	2304      	movs	r3, #4
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e070      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a96:	2308      	movs	r3, #8
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e06d      	b.n	8002b78 <UART_SetConfig+0x348>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e06a      	b.n	8002b78 <UART_SetConfig+0x348>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <UART_SetConfig+0x2e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d138      	bne.n	8002b1e <UART_SetConfig+0x2ee>
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <UART_SetConfig+0x2cc>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002aba:	d017      	beq.n	8002aec <UART_SetConfig+0x2bc>
 8002abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ac0:	d82a      	bhi.n	8002b18 <UART_SetConfig+0x2e8>
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	d00b      	beq.n	8002ae0 <UART_SetConfig+0x2b0>
 8002ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002acc:	d824      	bhi.n	8002b18 <UART_SetConfig+0x2e8>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <UART_SetConfig+0x2aa>
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	d006      	beq.n	8002ae6 <UART_SetConfig+0x2b6>
 8002ad8:	e01e      	b.n	8002b18 <UART_SetConfig+0x2e8>
 8002ada:	2300      	movs	r3, #0
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e04b      	b.n	8002b78 <UART_SetConfig+0x348>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e048      	b.n	8002b78 <UART_SetConfig+0x348>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e045      	b.n	8002b78 <UART_SetConfig+0x348>
 8002aec:	2308      	movs	r3, #8
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e042      	b.n	8002b78 <UART_SetConfig+0x348>
 8002af2:	bf00      	nop
 8002af4:	efff69f3 	.word	0xefff69f3
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40004400 	.word	0x40004400
 8002b04:	40004800 	.word	0x40004800
 8002b08:	40004c00 	.word	0x40004c00
 8002b0c:	40005000 	.word	0x40005000
 8002b10:	40011400 	.word	0x40011400
 8002b14:	40007800 	.word	0x40007800
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e02c      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a72      	ldr	r2, [pc, #456]	; (8002cec <UART_SetConfig+0x4bc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d125      	bne.n	8002b74 <UART_SetConfig+0x344>
 8002b28:	4b71      	ldr	r3, [pc, #452]	; (8002cf0 <UART_SetConfig+0x4c0>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b36:	d017      	beq.n	8002b68 <UART_SetConfig+0x338>
 8002b38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b3c:	d817      	bhi.n	8002b6e <UART_SetConfig+0x33e>
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b42:	d00b      	beq.n	8002b5c <UART_SetConfig+0x32c>
 8002b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b48:	d811      	bhi.n	8002b6e <UART_SetConfig+0x33e>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <UART_SetConfig+0x326>
 8002b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b52:	d006      	beq.n	8002b62 <UART_SetConfig+0x332>
 8002b54:	e00b      	b.n	8002b6e <UART_SetConfig+0x33e>
 8002b56:	2300      	movs	r3, #0
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e00d      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e00a      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b62:	2304      	movs	r3, #4
 8002b64:	77fb      	strb	r3, [r7, #31]
 8002b66:	e007      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b68:	2308      	movs	r3, #8
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e004      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b6e:	2310      	movs	r3, #16
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e001      	b.n	8002b78 <UART_SetConfig+0x348>
 8002b74:	2310      	movs	r3, #16
 8002b76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d15b      	bne.n	8002c3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d828      	bhi.n	8002bda <UART_SetConfig+0x3aa>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0x360>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bc5 	.word	0x08002bc5
 8002b9c:	08002bdb 	.word	0x08002bdb
 8002ba0:	08002bcb 	.word	0x08002bcb
 8002ba4:	08002bdb 	.word	0x08002bdb
 8002ba8:	08002bdb 	.word	0x08002bdb
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	08002bd3 	.word	0x08002bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff f90a 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8002bb8:	61b8      	str	r0, [r7, #24]
        break;
 8002bba:	e013      	b.n	8002be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff f91a 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	61b8      	str	r0, [r7, #24]
        break;
 8002bc2:	e00f      	b.n	8002be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <UART_SetConfig+0x4c4>)
 8002bc6:	61bb      	str	r3, [r7, #24]
        break;
 8002bc8:	e00c      	b.n	8002be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bca:	f7fe ffed 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002bce:	61b8      	str	r0, [r7, #24]
        break;
 8002bd0:	e008      	b.n	8002be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	61bb      	str	r3, [r7, #24]
        break;
 8002bd8:	e004      	b.n	8002be4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	77bb      	strb	r3, [r7, #30]
        break;
 8002be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d074      	beq.n	8002cd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d916      	bls.n	8002c34 <UART_SetConfig+0x404>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d212      	bcs.n	8002c34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	89fa      	ldrh	r2, [r7, #14]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e04f      	b.n	8002cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	77bb      	strb	r3, [r7, #30]
 8002c38:	e04c      	b.n	8002cd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d828      	bhi.n	8002c92 <UART_SetConfig+0x462>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <UART_SetConfig+0x418>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c93 	.word	0x08002c93
 8002c64:	08002c93 	.word	0x08002c93
 8002c68:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7ff f8ae 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8002c70:	61b8      	str	r0, [r7, #24]
        break;
 8002c72:	e013      	b.n	8002c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7ff f8be 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8002c78:	61b8      	str	r0, [r7, #24]
        break;
 8002c7a:	e00f      	b.n	8002c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <UART_SetConfig+0x4c4>)
 8002c7e:	61bb      	str	r3, [r7, #24]
        break;
 8002c80:	e00c      	b.n	8002c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c82:	f7fe ff91 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002c86:	61b8      	str	r0, [r7, #24]
        break;
 8002c88:	e008      	b.n	8002c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8e:	61bb      	str	r3, [r7, #24]
        break;
 8002c90:	e004      	b.n	8002c9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77bb      	strb	r3, [r7, #30]
        break;
 8002c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	085a      	lsrs	r2, r3, #1
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d909      	bls.n	8002cd0 <UART_SetConfig+0x4a0>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc2:	d205      	bcs.n	8002cd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	e001      	b.n	8002cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40007c00 	.word	0x40007c00
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400

08002cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01a      	beq.n	8002e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df6:	d10a      	bne.n	8002e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  }
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e4c:	f7fd ffda 	bl	8000e04 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d10e      	bne.n	8002e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f81b 	bl	8002eaa <UART_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e011      	b.n	8002ea2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b09c      	sub	sp, #112	; 0x70
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eba:	e0a7      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	f000 80a3 	beq.w	800300c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fd ff9d 	bl	8000e04 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <UART_WaitOnFlagUntilTimeout+0x32>
 8002ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d13f      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002efc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e6      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3308      	adds	r3, #8
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	663b      	str	r3, [r7, #96]	; 0x60
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e5      	bne.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e068      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d050      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f78:	d148      	bne.n	800300c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e6      	bne.n	8002f84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fd6:	623a      	str	r2, [r7, #32]
 8002fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	69f9      	ldr	r1, [r7, #28]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e010      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	f43f af48 	beq.w	8002ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3770      	adds	r7, #112	; 0x70
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f023 0101 	bic.w	r1, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d102      	bne.n	8003068 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e001      	b.n	800306c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003078:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800307e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003084:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800308a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8003090:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8003096:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800309c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80030a2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80030a8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <FMC_NORSRAM_Init+0x11c>)
 80030d2:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030da:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030e2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80030ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	ea02 0103 	and.w	r1, r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4319      	orrs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d10c      	bne.n	8003130 <FMC_NORSRAM_Init+0xf8>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	0008fb7f 	.word	0x0008fb7f

08003158 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	431a      	orrs	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	431a      	orrs	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	431a      	orrs	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	3b01      	subs	r3, #1
 8003194:	051b      	lsls	r3, r3, #20
 8003196:	431a      	orrs	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	3b02      	subs	r3, #2
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	3201      	adds	r2, #1
 80031ac:	4319      	orrs	r1, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c0:	d113      	bne.n	80031ea <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031ca:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	051b      	lsls	r3, r3, #20
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800320c:	d11d      	bne.n	800324a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003218:	4013      	ands	r3, r2
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	6811      	ldr	r1, [r2, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	6852      	ldr	r2, [r2, #4]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	4311      	orrs	r1, r2
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	6892      	ldr	r2, [r2, #8]
 800322a:	0212      	lsls	r2, r2, #8
 800322c:	4311      	orrs	r1, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	6992      	ldr	r2, [r2, #24]
 8003232:	4311      	orrs	r1, r2
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	68d2      	ldr	r2, [r2, #12]
 8003238:	0412      	lsls	r2, r2, #16
 800323a:	430a      	orrs	r2, r1
 800323c:	ea43 0102 	orr.w	r1, r3, r2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003248:	e005      	b.n	8003256 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	cff00000 	.word	0xcff00000

08003268 <loopback_demo>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void loopback_demo(wiz_NetInfo *net_info)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  int retval = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]

  wizchip_network_initialize(net_info);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f001 ffa6 	bl	80051c6 <wizchip_network_initialize>
  wizchip_network_information(net_info);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f001 ffb6 	bl	80051ec <wizchip_network_information>

  /* Infinite loop */
  while (1)
  {
    // Run TCP server loopback
    if ((retval = loopback_tcps(SOCKET_LOOPBACK, g_loopback_buf, PORT_LOOPBACK)) < 0)
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <loopback_demo+0x38>)
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f80e 	bl	80032a8 <loopback_tcps>
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	daf5      	bge.n	8003280 <loopback_demo+0x18>
    {
      printf(" Loopback error : %d\n", retval);
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	4803      	ldr	r0, [pc, #12]	; (80032a4 <loopback_demo+0x3c>)
 8003298:	f002 f99e 	bl	80055d8 <iprintf>

      while (1)
 800329c:	e7fe      	b.n	800329c <loopback_demo+0x34>
 800329e:	bf00      	nop
 80032a0:	200000c0 	.word	0x200000c0
 80032a4:	08006450 	.word	0x08006450

080032a8 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af04      	add	r7, sp, #16
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	82fb      	strh	r3, [r7, #22]
 80032bc:	2300      	movs	r3, #0
 80032be:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	3308      	adds	r3, #8
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	3308      	adds	r3, #8
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f93f 	bl	800354c <WIZCHIP_READ>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b1c      	cmp	r3, #28
 80032d4:	f200 810a 	bhi.w	80034ec <loopback_tcps+0x244>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <loopback_tcps+0x38>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080034d1 	.word	0x080034d1
 80032e4:	080034ed 	.word	0x080034ed
 80032e8:	080034ed 	.word	0x080034ed
 80032ec:	080034ed 	.word	0x080034ed
 80032f0:	080034ed 	.word	0x080034ed
 80032f4:	080034ed 	.word	0x080034ed
 80032f8:	080034ed 	.word	0x080034ed
 80032fc:	080034ed 	.word	0x080034ed
 8003300:	080034ed 	.word	0x080034ed
 8003304:	080034ed 	.word	0x080034ed
 8003308:	080034ed 	.word	0x080034ed
 800330c:	080034ed 	.word	0x080034ed
 8003310:	080034ed 	.word	0x080034ed
 8003314:	080034ed 	.word	0x080034ed
 8003318:	080034ed 	.word	0x080034ed
 800331c:	080034ed 	.word	0x080034ed
 8003320:	080034ed 	.word	0x080034ed
 8003324:	080034ed 	.word	0x080034ed
 8003328:	080034ed 	.word	0x080034ed
 800332c:	080034af 	.word	0x080034af
 8003330:	080034ed 	.word	0x080034ed
 8003334:	080034ed 	.word	0x080034ed
 8003338:	080034ed 	.word	0x080034ed
 800333c:	08003355 	.word	0x08003355
 8003340:	080034ed 	.word	0x080034ed
 8003344:	080034ed 	.word	0x080034ed
 8003348:	080034ed 	.word	0x080034ed
 800334c:	080034ed 	.word	0x080034ed
 8003350:	0800348d 	.word	0x0800348d
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	3308      	adds	r3, #8
 8003358:	019b      	lsls	r3, r3, #6
 800335a:	3306      	adds	r3, #6
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f8f5 	bl	800354c <WIZCHIP_READ>
 8003362:	4603      	mov	r3, r0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04e      	beq.n	800340c <loopback_tcps+0x164>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	3308      	adds	r3, #8
 8003372:	019b      	lsls	r3, r3, #6
 8003374:	3314      	adds	r3, #20
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f8e8 	bl	800354c <WIZCHIP_READ>
 800337c:	4603      	mov	r3, r0
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	723b      	strb	r3, [r7, #8]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	3308      	adds	r3, #8
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	3314      	adds	r3, #20
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8dc 	bl	800354c <WIZCHIP_READ>
 8003394:	4603      	mov	r3, r0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	727b      	strb	r3, [r7, #9]
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	3308      	adds	r3, #8
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	3316      	adds	r3, #22
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f8d2 	bl	800354c <WIZCHIP_READ>
 80033a8:	4603      	mov	r3, r0
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	72bb      	strb	r3, [r7, #10]
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	3308      	adds	r3, #8
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	3316      	adds	r3, #22
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8c6 	bl	800354c <WIZCHIP_READ>
 80033c0:	4603      	mov	r3, r0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	3308      	adds	r3, #8
 80033ca:	019b      	lsls	r3, r3, #6
 80033cc:	3312      	adds	r3, #18
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f8bc 	bl	800354c <WIZCHIP_READ>
 80033d4:	4603      	mov	r3, r0
 80033d6:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 80033d8:	79f9      	ldrb	r1, [r7, #7]
 80033da:	7a3b      	ldrb	r3, [r7, #8]
 80033dc:	461c      	mov	r4, r3
 80033de:	7a7b      	ldrb	r3, [r7, #9]
 80033e0:	461d      	mov	r5, r3
 80033e2:	7abb      	ldrb	r3, [r7, #10]
 80033e4:	461a      	mov	r2, r3
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	4618      	mov	r0, r3
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	9001      	str	r0, [sp, #4]
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	462b      	mov	r3, r5
 80033f4:	4622      	mov	r2, r4
 80033f6:	4843      	ldr	r0, [pc, #268]	; (8003504 <loopback_tcps+0x25c>)
 80033f8:	f002 f8ee 	bl	80055d8 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	3308      	adds	r3, #8
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	3306      	adds	r3, #6
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f882 	bl	8003510 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f99c 	bl	800374c <getSn_RX_RSR>
 8003414:	4603      	mov	r3, r0
 8003416:	82fb      	strh	r3, [r7, #22]
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d068      	beq.n	80034f0 <loopback_tcps+0x248>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003424:	d902      	bls.n	800342c <loopback_tcps+0x184>
 8003426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800342a:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 800342c:	8afa      	ldrh	r2, [r7, #22]
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	6839      	ldr	r1, [r7, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fdca 	bl	8003fcc <recv>
 8003438:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	dc01      	bgt.n	8003444 <loopback_tcps+0x19c>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	e05b      	b.n	80034fc <loopback_tcps+0x254>
			size = (uint16_t) ret;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 800344c:	e019      	b.n	8003482 <loopback_tcps+0x1da>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 800344e:	8abb      	ldrh	r3, [r7, #20]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	18d1      	adds	r1, r2, r3
 8003454:	8afa      	ldrh	r2, [r7, #22]
 8003456:	8abb      	ldrh	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b29a      	uxth	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fcb8 	bl	8003dd4 <send>
 8003464:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da05      	bge.n	8003478 <loopback_tcps+0x1d0>
				{
					close(sn);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fb2e 	bl	8003ad0 <close>
					return ret;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	e041      	b.n	80034fc <loopback_tcps+0x254>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	b29a      	uxth	r2, r3
 800347c:	8abb      	ldrh	r3, [r7, #20]
 800347e:	4413      	add	r3, r2
 8003480:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8003482:	8afa      	ldrh	r2, [r7, #22]
 8003484:	8abb      	ldrh	r3, [r7, #20]
 8003486:	429a      	cmp	r2, r3
 8003488:	d1e1      	bne.n	800344e <loopback_tcps+0x1a6>
			}
         }
         break;
 800348a:	e031      	b.n	80034f0 <loopback_tcps+0x248>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fc30 	bl	8003cf4 <disconnect>
 8003494:	4603      	mov	r3, r0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <loopback_tcps+0x1fa>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	e02c      	b.n	80034fc <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	4619      	mov	r1, r3
 80034a6:	4818      	ldr	r0, [pc, #96]	; (8003508 <loopback_tcps+0x260>)
 80034a8:	f002 f896 	bl	80055d8 <iprintf>
#endif
         break;
 80034ac:	e025      	b.n	80034fa <loopback_tcps+0x252>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	88ba      	ldrh	r2, [r7, #4]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4815      	ldr	r0, [pc, #84]	; (800350c <loopback_tcps+0x264>)
 80034b6:	f002 f88f 	bl	80055d8 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fbc5 	bl	8003c4c <listen>
 80034c2:	4603      	mov	r3, r0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d013      	beq.n	80034f4 <loopback_tcps+0x24c>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	e015      	b.n	80034fc <loopback_tcps+0x254>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80034d0:	88ba      	ldrh	r2, [r7, #4]
 80034d2:	79f8      	ldrb	r0, [r7, #7]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2101      	movs	r1, #1
 80034d8:	f000 f9de 	bl	8003898 <socket>
 80034dc:	4603      	mov	r3, r0
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d007      	beq.n	80034f8 <loopback_tcps+0x250>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	e007      	b.n	80034fc <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 80034ec:	bf00      	nop
 80034ee:	e004      	b.n	80034fa <loopback_tcps+0x252>
         break;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <loopback_tcps+0x252>
         break;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <loopback_tcps+0x252>
         break;
 80034f8:	bf00      	nop
   }
   return 1;
 80034fa:	2301      	movs	r3, #1
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bdb0      	pop	{r4, r5, r7, pc}
 8003504:	08006468 	.word	0x08006468
 8003508:	0800648c 	.word	0x0800648c
 800350c:	080064a0 	.word	0x080064a0

08003510 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <WIZCHIP_WRITE+0x38>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <WIZCHIP_WRITE+0x38>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <WIZCHIP_WRITE+0x38>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	887a      	ldrh	r2, [r7, #2]
 800352e:	4611      	mov	r1, r2
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <WIZCHIP_WRITE+0x38>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800353a:	4b03      	ldr	r3, [pc, #12]	; (8003548 <WIZCHIP_WRITE+0x38>)
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	4798      	blx	r3
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000000c 	.word	0x2000000c

0800354c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <WIZCHIP_READ+0x38>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4798      	blx	r3
   WIZCHIP.CS._select();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <WIZCHIP_READ+0x38>)
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <WIZCHIP_READ+0x38>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	4603      	mov	r3, r0
 800356a:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <WIZCHIP_READ+0x38>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <WIZCHIP_READ+0x38>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4798      	blx	r3
   return ret;
 8003578:	89fb      	ldrh	r3, [r7, #14]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000000c 	.word	0x2000000c

08003588 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	460a      	mov	r2, r1
 8003592:	71fb      	strb	r3, [r7, #7]
 8003594:	4613      	mov	r3, r2
 8003596:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800359e:	3320      	adds	r3, #32
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ffd3 	bl	800354c <WIZCHIP_READ>
 80035a6:	4603      	mov	r3, r0
 80035a8:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <setTMSR+0x42>
 80035b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035bc:	b21a      	sxth	r2, r3
 80035be:	79bb      	ldrb	r3, [r7, #6]
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	81fb      	strh	r3, [r7, #14]
 80035c8:	e009      	b.n	80035de <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 80035ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	79bb      	ldrb	r3, [r7, #6]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	b21b      	sxth	r3, r3
 80035dc:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035e4:	3320      	adds	r3, #32
 80035e6:	461a      	mov	r2, r3
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7ff ff8f 	bl	8003510 <WIZCHIP_WRITE>
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003614:	3320      	adds	r3, #32
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff98 	bl	800354c <WIZCHIP_READ>
 800361c:	4603      	mov	r3, r0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e00a      	b.n	8003638 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003628:	3320      	adds	r3, #32
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ff8e 	bl	800354c <WIZCHIP_READ>
 8003630:	4603      	mov	r3, r0
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b29b      	uxth	r3, r3
 8003636:	b2db      	uxtb	r3, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	460a      	mov	r2, r1
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	4613      	mov	r3, r2
 800364e:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003656:	3328      	adds	r3, #40	; 0x28
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff77 	bl	800354c <WIZCHIP_READ>
 800365e:	4603      	mov	r3, r0
 8003660:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <setRMSR+0x42>
 800366c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003670:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003674:	b21a      	sxth	r2, r3
 8003676:	79bb      	ldrb	r3, [r7, #6]
 8003678:	b21b      	sxth	r3, r3
 800367a:	4313      	orrs	r3, r2
 800367c:	b21b      	sxth	r3, r3
 800367e:	81fb      	strh	r3, [r7, #14]
 8003680:	e009      	b.n	8003696 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8003682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	b21a      	sxth	r2, r3
 800368a:	79bb      	ldrb	r3, [r7, #6]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	b21b      	sxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b21b      	sxth	r3, r3
 8003694:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	461a      	mov	r2, r3
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f7ff ff33 	bl	8003510 <WIZCHIP_WRITE>
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4603      	mov	r3, r0
 80036ba:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036cc:	3328      	adds	r3, #40	; 0x28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ff3c 	bl	800354c <WIZCHIP_READ>
 80036d4:	4603      	mov	r3, r0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00a      	b.n	80036f0 <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036e0:	3328      	adds	r3, #40	; 0x28
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ff32 	bl	800354c <WIZCHIP_READ>
 80036e8:	4603      	mov	r3, r0
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8003706:	2301      	movs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	3308      	adds	r3, #8
 800370e:	019b      	lsls	r3, r3, #6
 8003710:	3324      	adds	r3, #36	; 0x24
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff1a 	bl	800354c <WIZCHIP_READ>
 8003718:	4603      	mov	r3, r0
 800371a:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	3308      	adds	r3, #8
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	3326      	adds	r3, #38	; 0x26
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff11 	bl	800354c <WIZCHIP_READ>
 800372a:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 800372c:	4323      	orrs	r3, r4
 800372e:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d002      	beq.n	800373e <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 800373c:	e7e5      	b.n	800370a <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 800373e:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8003740:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
	...

0800374c <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 800375a:	2301      	movs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	3308      	adds	r3, #8
 8003762:	019b      	lsls	r3, r3, #6
 8003764:	3328      	adds	r3, #40	; 0x28
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fef0 	bl	800354c <WIZCHIP_READ>
 800376c:	4603      	mov	r3, r0
 800376e:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	3308      	adds	r3, #8
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	332a      	adds	r3, #42	; 0x2a
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fee7 	bl	800354c <WIZCHIP_READ>
 800377e:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003780:	4323      	orrs	r3, r4
 8003782:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d002      	beq.n	8003792 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003790:	e7e5      	b.n	800375e <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003792:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <getSn_RX_RSR+0x60>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	105b      	asrs	r3, r3, #1
 800379c:	f003 0201 	and.w	r2, r3, #1
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4413      	add	r3, r2
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	200008d4 	.word	0x200008d4

080037b0 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d021      	beq.n	800380c <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e019      	b.n	8003802 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3308      	adds	r3, #8
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	332e      	adds	r3, #46	; 0x2e
 80037d6:	4618      	mov	r0, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4413      	add	r3, r2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	440b      	add	r3, r1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7ff fe8a 	bl	8003510 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3302      	adds	r3, #2
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3e1      	bcc.n	80037ce <wiz_send_data+0x1e>
 800380a:	e000      	b.n	800380e <wiz_send_data+0x5e>
   if(len == 0)  return;
 800380c:	bf00      	nop
}
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02c      	beq.n	800388a <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e01f      	b.n	8003876 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	3308      	adds	r3, #8
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	3330      	adds	r3, #48	; 0x30
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe7f 	bl	800354c <WIZCHIP_READ>
 800384e:	4603      	mov	r3, r0
 8003850:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	b299      	uxth	r1, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	b2ca      	uxtb	r2, r1
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e005      	b.n	8003870 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	8afa      	ldrh	r2, [r7, #22]
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3db      	bcc.n	8003836 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	8afa      	ldrh	r2, [r7, #22]
 8003882:	b2d1      	uxtb	r1, r2
 8003884:	4a03      	ldr	r2, [pc, #12]	; (8003894 <wiz_recv_data+0x80>)
 8003886:	54d1      	strb	r1, [r2, r3]
 8003888:	e000      	b.n	800388c <wiz_recv_data+0x78>
   if(len == 0) return;
 800388a:	bf00      	nop
}
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200008dc 	.word	0x200008dc

08003898 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	71fb      	strb	r3, [r7, #7]
 80038aa:	4603      	mov	r3, r0
 80038ac:	71bb      	strb	r3, [r7, #6]
 80038ae:	460b      	mov	r3, r1
 80038b0:	80bb      	strh	r3, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d902      	bls.n	80038c2 <socket+0x2a>
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c0:	e0f8      	b.n	8003ab4 <socket+0x21c>
	switch(protocol)
 80038c2:	79bb      	ldrb	r3, [r7, #6]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d005      	beq.n	80038d4 <socket+0x3c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	dd32      	ble.n	8003932 <socket+0x9a>
 80038cc:	3b02      	subs	r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d82f      	bhi.n	8003932 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80038d2:	e032      	b.n	800393a <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 80038d4:	2018      	movs	r0, #24
 80038d6:	f7ff fe39 	bl	800354c <WIZCHIP_READ>
 80038da:	4603      	mov	r3, r0
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b29a      	uxth	r2, r3
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	2018      	movs	r0, #24
 80038ea:	f7ff fe2f 	bl	800354c <WIZCHIP_READ>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	f107 030c 	add.w	r3, r7, #12
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	201a      	movs	r0, #26
 80038fe:	f7ff fe25 	bl	800354c <WIZCHIP_READ>
 8003902:	4603      	mov	r3, r0
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	3302      	adds	r3, #2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	201a      	movs	r0, #26
 8003914:	f7ff fe1a 	bl	800354c <WIZCHIP_READ>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	3303      	adds	r3, #3
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <socket+0xa0>
 800392c:	f06f 0302 	mvn.w	r3, #2
 8003930:	e0c0      	b.n	8003ab4 <socket+0x21c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003932:	f06f 0304 	mvn.w	r3, #4
 8003936:	e0bd      	b.n	8003ab4 <socket+0x21c>
	    break;
 8003938:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <socket+0xb2>
 8003944:	f06f 0305 	mvn.w	r3, #5
 8003948:	e0b4      	b.n	8003ab4 <socket+0x21c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <socket+0xec>
	{
   	switch(protocol)
 8003950:	79bb      	ldrb	r3, [r7, #6]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <socket+0xc4>
 8003956:	2b02      	cmp	r3, #2
 8003958:	d008      	beq.n	800396c <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800395a:	e018      	b.n	800398e <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8003962:	2b00      	cmp	r3, #0
 8003964:	d110      	bne.n	8003988 <socket+0xf0>
 8003966:	f06f 0305 	mvn.w	r3, #5
 800396a:	e0a3      	b.n	8003ab4 <socket+0x21c>
   	      if(flag & SF_IGMP_VER2)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db06      	blt.n	800398c <socket+0xf4>
 800397e:	f06f 0305 	mvn.w	r3, #5
 8003982:	e097      	b.n	8003ab4 <socket+0x21c>
   	}
   }
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <socket+0xf6>
   	      break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <socket+0xf6>
   	      break;
 800398c:	bf00      	nop
	close(sn);
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f89d 	bl	8003ad0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	3308      	adds	r3, #8
 800399a:	019b      	lsls	r3, r3, #6
 800399c:	4618      	mov	r0, r3
 800399e:	79bb      	ldrb	r3, [r7, #6]
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b21a      	sxth	r2, r3
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	01db      	lsls	r3, r3, #7
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	b21b      	sxth	r3, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	4619      	mov	r1, r3
 80039c4:	f7ff fda4 	bl	8003510 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d110      	bne.n	80039f0 <socket+0x158>
	{
	   port = sock_any_port++;
 80039ce:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <socket+0x224>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	b291      	uxth	r1, r2
 80039d6:	4a39      	ldr	r2, [pc, #228]	; (8003abc <socket+0x224>)
 80039d8:	8011      	strh	r1, [r2, #0]
 80039da:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80039dc:	4b37      	ldr	r3, [pc, #220]	; (8003abc <socket+0x224>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d103      	bne.n	80039f0 <socket+0x158>
 80039e8:	4b34      	ldr	r3, [pc, #208]	; (8003abc <socket+0x224>)
 80039ea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80039ee:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	3308      	adds	r3, #8
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	330a      	adds	r3, #10
 80039f8:	461a      	mov	r2, r3
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7ff fd86 	bl	8003510 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	3308      	adds	r3, #8
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fd7e 	bl	8003510 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003a14:	bf00      	nop
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	019b      	lsls	r3, r3, #6
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fd94 	bl	800354c <WIZCHIP_READ>
 8003a24:	4603      	mov	r3, r0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f4      	bne.n	8003a16 <socket+0x17e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	b21a      	sxth	r2, r3
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <socket+0x228>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4013      	ands	r3, r2
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <socket+0x228>)
 8003a48:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 0201 	and.w	r2, r3, #1
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	b21a      	sxth	r2, r3
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <socket+0x228>)
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <socket+0x228>)
 8003a66:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	b21b      	sxth	r3, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	b21a      	sxth	r2, r3
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <socket+0x22c>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b21b      	sxth	r3, r3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <socket+0x22c>)
 8003a84:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <socket+0x230>)
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <socket+0x234>)
 8003a94:	2100      	movs	r1, #0
 8003a96:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003a98:	bf00      	nop
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	019b      	lsls	r3, r3, #6
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fd52 	bl	800354c <WIZCHIP_READ>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f4      	beq.n	8003a9a <socket+0x202>
   return (int8_t)sn;
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	2000000a 	.word	0x2000000a
 8003ac0:	200008c0 	.word	0x200008c0
 8003ac4:	200008c2 	.word	0x200008c2
 8003ac8:	200008c4 	.word	0x200008c4
 8003acc:	200008d4 	.word	0x200008d4

08003ad0 <close>:

int8_t close(uint8_t sn)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d902      	bls.n	8003ae6 <close+0x16>
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ae4:	e0a5      	b.n	8003c32 <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	019b      	lsls	r3, r3, #6
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fd2d 	bl	800354c <WIZCHIP_READ>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d14a      	bne.n	8003b92 <close+0xc2>
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fdfa 	bl	80036f8 <getSn_TX_FSR>
 8003b04:	4604      	mov	r4, r0
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fd76 	bl	80035fa <getTMSR>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d03d      	beq.n	8003b92 <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8003b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b1a:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fcf3 	bl	8003510 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	330a      	adds	r3, #10
 8003b32:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fcea 	bl	8003510 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	3302      	adds	r3, #2
 8003b44:	2101      	movs	r1, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fce2 	bl	8003510 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8003b4c:	bf00      	nop
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	3308      	adds	r3, #8
 8003b52:	019b      	lsls	r3, r3, #6
 8003b54:	3302      	adds	r3, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fcf8 	bl	800354c <WIZCHIP_READ>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f4      	bne.n	8003b4e <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8003b64:	bf00      	nop
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fcec 	bl	800354c <WIZCHIP_READ>
 8003b74:	4603      	mov	r3, r0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b22      	cmp	r3, #34	; 0x22
 8003b7a:	d1f4      	bne.n	8003b66 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	f107 010c 	add.w	r1, r7, #12
 8003b84:	79f8      	ldrb	r0, [r7, #7]
 8003b86:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003b8a:	9200      	str	r2, [sp, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f000 fb81 	bl	8004294 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	3308      	adds	r3, #8
 8003b96:	019b      	lsls	r3, r3, #6
 8003b98:	3302      	adds	r3, #2
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fcb7 	bl	8003510 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003ba2:	bf00      	nop
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	3302      	adds	r3, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fccd 	bl	800354c <WIZCHIP_READ>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f4      	bne.n	8003ba4 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	3306      	adds	r3, #6
 8003bc2:	21ff      	movs	r1, #255	; 0xff
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fca3 	bl	8003510 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <close+0x16c>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	4013      	ands	r3, r2
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <close+0x16c>)
 8003be6:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2201      	movs	r2, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	b21b      	sxth	r3, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <close+0x170>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <close+0x170>)
 8003c04:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <close+0x174>)
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <close+0x178>)
 8003c14:	2100      	movs	r1, #0
 8003c16:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003c18:	bf00      	nop
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	019b      	lsls	r3, r3, #6
 8003c20:	3308      	adds	r3, #8
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fc92 	bl	800354c <WIZCHIP_READ>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f4      	bne.n	8003c1a <close+0x14a>
	return SOCK_OK;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd90      	pop	{r4, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200008c0 	.word	0x200008c0
 8003c40:	200008c2 	.word	0x200008c2
 8003c44:	200008c4 	.word	0x200008c4
 8003c48:	200008d4 	.word	0x200008d4

08003c4c <listen>:

int8_t listen(uint8_t sn)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d902      	bls.n	8003c62 <listen+0x16>
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c60:	e043      	b.n	8003cea <listen+0x9e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	3308      	adds	r3, #8
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fc6f 	bl	800354c <WIZCHIP_READ>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d002      	beq.n	8003c7e <listen+0x32>
 8003c78:	f06f 0304 	mvn.w	r3, #4
 8003c7c:	e035      	b.n	8003cea <listen+0x9e>
	CHECK_SOCKINIT();
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	3308      	adds	r3, #8
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	3308      	adds	r3, #8
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fc60 	bl	800354c <WIZCHIP_READ>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b13      	cmp	r3, #19
 8003c92:	d002      	beq.n	8003c9a <listen+0x4e>
 8003c94:	f06f 0302 	mvn.w	r3, #2
 8003c98:	e027      	b.n	8003cea <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fc33 	bl	8003510 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003caa:	bf00      	nop
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fc49 	bl	800354c <WIZCHIP_READ>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f4      	bne.n	8003cac <listen+0x60>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003cc2:	e006      	b.n	8003cd2 <listen+0x86>
   {
         close(sn);
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff02 	bl	8003ad0 <close>
         return SOCKERR_SOCKCLOSED;
 8003ccc:	f06f 0303 	mvn.w	r3, #3
 8003cd0:	e00b      	b.n	8003cea <listen+0x9e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	019b      	lsls	r3, r3, #6
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fc36 	bl	800354c <WIZCHIP_READ>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b14      	cmp	r3, #20
 8003ce6:	d1ed      	bne.n	8003cc4 <listen+0x78>
   }
   return SOCK_OK;
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d902      	bls.n	8003d0a <disconnect+0x16>
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d08:	e05c      	b.n	8003dc4 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	019b      	lsls	r3, r3, #6
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fc1b 	bl	800354c <WIZCHIP_READ>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d002      	beq.n	8003d26 <disconnect+0x32>
 8003d20:	f06f 0304 	mvn.w	r3, #4
 8003d24:	e04e      	b.n	8003dc4 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	019b      	lsls	r3, r3, #6
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	2108      	movs	r1, #8
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fbed 	bl	8003510 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003d36:	bf00      	nop
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	3302      	adds	r3, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc03 	bl	800354c <WIZCHIP_READ>
 8003d46:	4603      	mov	r3, r0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f4      	bne.n	8003d38 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2201      	movs	r2, #1
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <disconnect+0xd8>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	4013      	ands	r3, r2
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <disconnect+0xd8>)
 8003d6a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <disconnect+0xdc>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	fa42 f303 	asr.w	r3, r2, r3
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <disconnect+0xb8>
 8003d80:	2300      	movs	r3, #0
 8003d82:	e01f      	b.n	8003dc4 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	3308      	adds	r3, #8
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	3306      	adds	r3, #6
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fbdd 	bl	800354c <WIZCHIP_READ>
 8003d92:	4603      	mov	r3, r0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <disconnect+0xb8>
	   {
	      close(sn);
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fe95 	bl	8003ad0 <close>
	      return SOCKERR_TIMEOUT;
 8003da6:	f06f 030c 	mvn.w	r3, #12
 8003daa:	e00b      	b.n	8003dc4 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	3308      	adds	r3, #8
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	3308      	adds	r3, #8
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fbc9 	bl	800354c <WIZCHIP_READ>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e0      	bne.n	8003d84 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200008c2 	.word	0x200008c2
 8003dd0:	200008c0 	.word	0x200008c0

08003dd4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d902      	bls.n	8003df8 <send+0x24>
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df6:	e0e1      	b.n	8003fbc <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fba4 	bl	800354c <WIZCHIP_READ>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d002      	beq.n	8003e14 <send+0x40>
 8003e0e:	f06f 0304 	mvn.w	r3, #4
 8003e12:	e0d3      	b.n	8003fbc <send+0x1e8>
   CHECK_SOCKDATA();
 8003e14:	88bb      	ldrh	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <send+0x4c>
 8003e1a:	f06f 030d 	mvn.w	r3, #13
 8003e1e:	e0cd      	b.n	8003fbc <send+0x1e8>
   tmp = getSn_SR(sn);
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	3308      	adds	r3, #8
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	3308      	adds	r3, #8
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fb8f 	bl	800354c <WIZCHIP_READ>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b17      	cmp	r3, #23
 8003e36:	d005      	beq.n	8003e44 <send+0x70>
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b1c      	cmp	r3, #28
 8003e3c:	d002      	beq.n	8003e44 <send+0x70>
 8003e3e:	f06f 0306 	mvn.w	r3, #6
 8003e42:	e0bb      	b.n	8003fbc <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 8003e44:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <send+0x1f0>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	fa42 f303 	asr.w	r3, r2, r3
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d033      	beq.n	8003ec0 <send+0xec>
   {
      tmp = getSn_IR(sn);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	3306      	adds	r3, #6
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fb73 	bl	800354c <WIZCHIP_READ>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d017      	beq.n	8003ea4 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	3308      	adds	r3, #8
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	3306      	adds	r3, #6
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fb46 	bl	8003510 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	2201      	movs	r2, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	b21a      	sxth	r2, r3
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <send+0x1f0>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b21b      	sxth	r3, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <send+0x1f0>)
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	e00d      	b.n	8003ec0 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <send+0xe8>
      {
         close(sn);
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fe0d 	bl	8003ad0 <close>
         return SOCKERR_TIMEOUT;
 8003eb6:	f06f 030c 	mvn.w	r3, #12
 8003eba:	e07f      	b.n	8003fbc <send+0x1e8>
      }
      else return SOCK_BUSY;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e07d      	b.n	8003fbc <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fb99 	bl	80035fa <getTMSR>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003ed0:	88ba      	ldrh	r2, [r7, #4]
 8003ed2:	89bb      	ldrh	r3, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d901      	bls.n	8003edc <send+0x108>
 8003ed8:	89bb      	ldrh	r3, [r7, #12]
 8003eda:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fc0a 	bl	80036f8 <getSn_TX_FSR>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	3308      	adds	r3, #8
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	3308      	adds	r3, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fb2b 	bl	800354c <WIZCHIP_READ>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b17      	cmp	r3, #23
 8003efe:	d009      	beq.n	8003f14 <send+0x140>
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b1c      	cmp	r3, #28
 8003f04:	d006      	beq.n	8003f14 <send+0x140>
      {
         close(sn);
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fde1 	bl	8003ad0 <close>
         return SOCKERR_SOCKSTATUS;
 8003f0e:	f06f 0306 	mvn.w	r3, #6
 8003f12:	e053      	b.n	8003fbc <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <send+0x1f4>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	fa42 f303 	asr.w	r3, r2, r3
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <send+0x160>
 8003f28:	88ba      	ldrh	r2, [r7, #4]
 8003f2a:	89bb      	ldrh	r3, [r7, #12]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d901      	bls.n	8003f34 <send+0x160>
 8003f30:	2300      	movs	r3, #0
 8003f32:	e043      	b.n	8003fbc <send+0x1e8>
      if(len <= freesize) break;
 8003f34:	88ba      	ldrh	r2, [r7, #4]
 8003f36:	89bb      	ldrh	r3, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d900      	bls.n	8003f3e <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 8003f3c:	e7ce      	b.n	8003edc <send+0x108>
      if(len <= freesize) break;
 8003f3e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003f40:	88ba      	ldrh	r2, [r7, #4]
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	6839      	ldr	r1, [r7, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fc32 	bl	80037b0 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	3320      	adds	r3, #32
 8003f54:	461a      	mov	r2, r3
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7ff fad6 	bl	8003510 <WIZCHIP_WRITE>
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	3308      	adds	r3, #8
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	3322      	adds	r3, #34	; 0x22
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	88bb      	ldrh	r3, [r7, #4]
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7ff facc 	bl	8003510 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	3302      	adds	r3, #2
 8003f80:	2120      	movs	r1, #32
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fac4 	bl	8003510 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003f88:	bf00      	nop
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	019b      	lsls	r3, r3, #6
 8003f90:	3302      	adds	r3, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fada 	bl	800354c <WIZCHIP_READ>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f4      	bne.n	8003f8a <send+0x1b6>
   sock_is_sending |= (1 << sn);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	b21a      	sxth	r2, r3
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <send+0x1f0>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b21b      	sxth	r3, r3
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <send+0x1f0>)
 8003fb8:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003fba:	88bb      	ldrh	r3, [r7, #4]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200008c2 	.word	0x200008c2
 8003fc8:	200008c0 	.word	0x200008c0

08003fcc <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d902      	bls.n	8003ff0 <recv+0x24>
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fee:	e145      	b.n	800427c <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff faa8 	bl	800354c <WIZCHIP_READ>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	2b01      	cmp	r3, #1
 8004004:	d002      	beq.n	800400c <recv+0x40>
 8004006:	f06f 0304 	mvn.w	r3, #4
 800400a:	e137      	b.n	800427c <recv+0x2b0>
   CHECK_SOCKDATA();
 800400c:	88bb      	ldrh	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <recv+0x4c>
 8004012:	f06f 030d 	mvn.w	r3, #13
 8004016:	e131      	b.n	800427c <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fb49 	bl	80036b2 <getRMSR>
 8004020:	4603      	mov	r3, r0
 8004022:	b29b      	uxth	r3, r3
 8004024:	029b      	lsls	r3, r3, #10
 8004026:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 8004028:	89fa      	ldrh	r2, [r7, #14]
 800402a:	88bb      	ldrh	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d201      	bcs.n	8004034 <recv+0x68>
 8004030:	89fb      	ldrh	r3, [r7, #14]
 8004032:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	4a93      	ldr	r2, [pc, #588]	; (8004284 <recv+0x2b8>)
 8004038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d148      	bne.n	80040d2 <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fb82 	bl	800374c <getSn_RX_RSR>
 8004048:	4603      	mov	r3, r0
 800404a:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	3308      	adds	r3, #8
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	3308      	adds	r3, #8
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fa79 	bl	800354c <WIZCHIP_READ>
 800405a:	4603      	mov	r3, r0
 800405c:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 800405e:	7b7b      	ldrb	r3, [r7, #13]
 8004060:	2b17      	cmp	r3, #23
 8004062:	d020      	beq.n	80040a6 <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8004064:	7b7b      	ldrb	r3, [r7, #13]
 8004066:	2b1c      	cmp	r3, #28
 8004068:	d116      	bne.n	8004098 <recv+0xcc>
            {
               if(recvsize != 0) break;
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d12d      	bne.n	80040cc <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fb40 	bl	80036f8 <getSn_TX_FSR>
 8004078:	4604      	mov	r4, r0
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fabc 	bl	80035fa <getTMSR>
 8004082:	4603      	mov	r3, r0
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	429c      	cmp	r4, r3
 8004088:	d10d      	bne.n	80040a6 <recv+0xda>
               {
                  close(sn);
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fd1f 	bl	8003ad0 <close>
                  return SOCKERR_SOCKSTATUS;
 8004092:	f06f 0306 	mvn.w	r3, #6
 8004096:	e0f1      	b.n	800427c <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fd18 	bl	8003ad0 <close>
               return SOCKERR_SOCKSTATUS;
 80040a0:	f06f 0306 	mvn.w	r3, #6
 80040a4:	e0ea      	b.n	800427c <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80040a6:	4b78      	ldr	r3, [pc, #480]	; (8004288 <recv+0x2bc>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	fa42 f303 	asr.w	r3, r2, r3
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <recv+0xf8>
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <recv+0xf8>
 80040c0:	2300      	movs	r3, #0
 80040c2:	e0db      	b.n	800427c <recv+0x2b0>
         if(recvsize != 0) break;
 80040c4:	89fb      	ldrh	r3, [r7, #14]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 80040ca:	e7b9      	b.n	8004040 <recv+0x74>
               if(recvsize != 0) break;
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <recv+0x106>
         if(recvsize != 0) break;
 80040d0:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <recv+0x2b8>)
 80040d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <recv+0x128>
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	3308      	adds	r3, #8
 80040e2:	019b      	lsls	r3, r3, #6
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fa31 	bl	800354c <WIZCHIP_READ>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d035      	beq.n	8004160 <recv+0x194>
   {
      mr = getMR();
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7ff fa29 	bl	800354c <WIZCHIP_READ>
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	3308      	adds	r3, #8
 8004102:	019b      	lsls	r3, r3, #6
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fa21 	bl	800354c <WIZCHIP_READ>
 800410a:	4603      	mov	r3, r0
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d120      	bne.n	8004156 <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 8004114:	f107 0108 	add.w	r1, r7, #8
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2202      	movs	r2, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fb79 	bl	8003814 <wiz_recv_data>
         if(mr & MR_FS)
 8004122:	897b      	ldrh	r3, [r7, #10]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 800412c:	7a7b      	ldrb	r3, [r7, #9]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	b21a      	sxth	r2, r3
 8004132:	7a3b      	ldrb	r3, [r7, #8]
 8004134:	b21b      	sxth	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b21b      	sxth	r3, r3
 800413a:	81fb      	strh	r3, [r7, #14]
 800413c:	e007      	b.n	800414e <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800413e:	7a3b      	ldrb	r3, [r7, #8]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	b21a      	sxth	r2, r3
 8004144:	7a7b      	ldrb	r3, [r7, #9]
 8004146:	b21b      	sxth	r3, r3
 8004148:	4313      	orrs	r3, r2
 800414a:	b21b      	sxth	r3, r3
 800414c:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4a4e      	ldr	r2, [pc, #312]	; (800428c <recv+0x2c0>)
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	494a      	ldr	r1, [pc, #296]	; (8004284 <recv+0x2b8>)
 800415a:	89fa      	ldrh	r2, [r7, #14]
 800415c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	4a48      	ldr	r2, [pc, #288]	; (8004284 <recv+0x2b8>)
 8004164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004168:	88ba      	ldrh	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d904      	bls.n	8004178 <recv+0x1ac>
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	4a44      	ldr	r2, [pc, #272]	; (8004284 <recv+0x2b8>)
 8004172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004176:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 8004178:	88bb      	ldrh	r3, [r7, #4]
 800417a:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	4a43      	ldr	r2, [pc, #268]	; (800428c <recv+0x2c0>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01d      	beq.n	80041c6 <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	4a40      	ldr	r2, [pc, #256]	; (8004290 <recv+0x2c4>)
 800418e:	5cd2      	ldrb	r2, [r2, r3]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	701a      	strb	r2, [r3, #0]
      buf++;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4a3b      	ldr	r2, [pc, #236]	; (800428c <recv+0x2c0>)
 800419e:	5cd2      	ldrb	r2, [r2, r3]
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f022 0202 	bic.w	r2, r2, #2
 80041a6:	b2d1      	uxtb	r1, r2
 80041a8:	4a38      	ldr	r2, [pc, #224]	; (800428c <recv+0x2c0>)
 80041aa:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	4a33      	ldr	r2, [pc, #204]	; (8004284 <recv+0x2b8>)
 80041b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	3a01      	subs	r2, #1
 80041be:	b291      	uxth	r1, r2
 80041c0:	4a30      	ldr	r2, [pc, #192]	; (8004284 <recv+0x2b8>)
 80041c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d019      	beq.n	8004200 <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 80041cc:	89fa      	ldrh	r2, [r7, #14]
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fb1e 	bl	8003814 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	3308      	adds	r3, #8
 80041dc:	019b      	lsls	r3, r3, #6
 80041de:	3302      	adds	r3, #2
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f994 	bl	8003510 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80041e8:	bf00      	nop
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	3308      	adds	r3, #8
 80041ee:	019b      	lsls	r3, r3, #6
 80041f0:	3302      	adds	r3, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f9aa 	bl	800354c <WIZCHIP_READ>
 80041f8:	4603      	mov	r3, r0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f4      	bne.n	80041ea <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <recv+0x2b8>)
 8004204:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	89fa      	ldrh	r2, [r7, #14]
 800420c:	1a8a      	subs	r2, r1, r2
 800420e:	b291      	uxth	r1, r2
 8004210:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <recv+0x2b8>)
 8004212:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <recv+0x2b8>)
 800421a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <recv+0x2c0>)
 8004226:	5cd2      	ldrb	r2, [r2, r3]
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	b2d1      	uxtb	r1, r2
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <recv+0x2c0>)
 8004232:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <recv+0x28e>
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <recv+0x2c0>)
 8004242:	5cd2      	ldrb	r2, [r2, r3]
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f042 0202 	orr.w	r2, r2, #2
 800424a:	b2d1      	uxtb	r1, r2
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <recv+0x2c0>)
 800424e:	54d1      	strb	r1, [r2, r3]
 8004250:	e003      	b.n	800425a <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <recv+0x2c0>)
 8004256:	2100      	movs	r1, #0
 8004258:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	3308      	adds	r3, #8
 800425e:	019b      	lsls	r3, r3, #6
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f973 	bl	800354c <WIZCHIP_READ>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <recv+0x2ae>
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <recv+0x2b8>)
 8004274:	2100      	movs	r1, #0
 8004276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800427a:	88bb      	ldrh	r3, [r7, #4]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	200008c4 	.word	0x200008c4
 8004288:	200008c0 	.word	0x200008c0
 800428c:	200008d4 	.word	0x200008d4
 8004290:	200008dc 	.word	0x200008dc

08004294 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	4613      	mov	r3, r2
 80042a4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d902      	bls.n	80042ba <sendto+0x26>
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b8:	e1e6      	b.n	8004688 <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3308      	adds	r3, #8
 80042be:	019b      	lsls	r3, r3, #6
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f943 	bl	800354c <WIZCHIP_READ>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	3b02      	subs	r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d902      	bls.n	80042d8 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80042d2:	f06f 0304 	mvn.w	r3, #4
 80042d6:	e1d7      	b.n	8004688 <sendto+0x3f4>
         break;
 80042d8:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80042da:	89bb      	ldrh	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <sendto+0x52>
 80042e0:	f06f 030d 	mvn.w	r3, #13
 80042e4:	e1d0      	b.n	8004688 <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	3201      	adds	r2, #1
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	3202      	adds	r2, #2
 8004302:	7812      	ldrb	r2, [r2, #0]
 8004304:	4413      	add	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	3203      	adds	r2, #3
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	4413      	add	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <sendto+0xa4>
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	3308      	adds	r3, #8
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff f912 	bl	800354c <WIZCHIP_READ>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d002      	beq.n	8004338 <sendto+0xa4>
 8004332:	f06f 030b 	mvn.w	r3, #11
 8004336:	e1a7      	b.n	8004688 <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004338:	8c3b      	ldrh	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10d      	bne.n	800435a <sendto+0xc6>
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	3308      	adds	r3, #8
 8004342:	019b      	lsls	r3, r3, #6
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff f901 	bl	800354c <WIZCHIP_READ>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d002      	beq.n	800435a <sendto+0xc6>
 8004354:	f06f 030a 	mvn.w	r3, #10
 8004358:	e196      	b.n	8004688 <sendto+0x3f4>
   tmp = getSn_SR(sn);
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	3308      	adds	r3, #8
 800435e:	019b      	lsls	r3, r3, #6
 8004360:	3308      	adds	r3, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f8f2 	bl	800354c <WIZCHIP_READ>
 8004368:	4603      	mov	r3, r0
 800436a:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b42      	cmp	r3, #66	; 0x42
 8004370:	d008      	beq.n	8004384 <sendto+0xf0>
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b22      	cmp	r3, #34	; 0x22
 8004376:	d005      	beq.n	8004384 <sendto+0xf0>
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	2b32      	cmp	r3, #50	; 0x32
 800437c:	d002      	beq.n	8004384 <sendto+0xf0>
 800437e:	f06f 0306 	mvn.w	r3, #6
 8004382:	e181      	b.n	8004688 <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	3308      	adds	r3, #8
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	3314      	adds	r3, #20
 800438c:	4618      	mov	r0, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7ff f8b3 	bl	8003510 <WIZCHIP_WRITE>
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	3308      	adds	r3, #8
 80043ae:	019b      	lsls	r3, r3, #6
 80043b0:	3316      	adds	r3, #22
 80043b2:	4618      	mov	r0, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3302      	adds	r3, #2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3303      	adds	r3, #3
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7ff f89f 	bl	8003510 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	3308      	adds	r3, #8
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	3312      	adds	r3, #18
 80043da:	461a      	mov	r2, r3
 80043dc:	8c3b      	ldrh	r3, [r7, #32]
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7ff f895 	bl	8003510 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f906 	bl	80035fa <getTMSR>
 80043ee:	4603      	mov	r3, r0
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	029b      	lsls	r3, r3, #10
 80043f4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80043f6:	89ba      	ldrh	r2, [r7, #12]
 80043f8:	8abb      	ldrh	r3, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d901      	bls.n	8004402 <sendto+0x16e>
 80043fe:	8abb      	ldrh	r3, [r7, #20]
 8004400:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f977 	bl	80036f8 <getSn_TX_FSR>
 800440a:	4603      	mov	r3, r0
 800440c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	3308      	adds	r3, #8
 8004412:	019b      	lsls	r3, r3, #6
 8004414:	3308      	adds	r3, #8
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f898 	bl	800354c <WIZCHIP_READ>
 800441c:	4603      	mov	r3, r0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <sendto+0x196>
 8004424:	f06f 0303 	mvn.w	r3, #3
 8004428:	e12e      	b.n	8004688 <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800442a:	4b99      	ldr	r3, [pc, #612]	; (8004690 <sendto+0x3fc>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	fa42 f303 	asr.w	r3, r2, r3
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <sendto+0x1b6>
 800443e:	89ba      	ldrh	r2, [r7, #12]
 8004440:	8abb      	ldrh	r3, [r7, #20]
 8004442:	429a      	cmp	r2, r3
 8004444:	d901      	bls.n	800444a <sendto+0x1b6>
 8004446:	2300      	movs	r3, #0
 8004448:	e11e      	b.n	8004688 <sendto+0x3f4>
      if(len <= freesize) break;
 800444a:	89ba      	ldrh	r2, [r7, #12]
 800444c:	8abb      	ldrh	r3, [r7, #20]
 800444e:	429a      	cmp	r2, r3
 8004450:	d900      	bls.n	8004454 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8004452:	e7d6      	b.n	8004402 <sendto+0x16e>
      if(len <= freesize) break;
 8004454:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8004456:	89ba      	ldrh	r2, [r7, #12]
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f9a7 	bl	80037b0 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8004462:	2018      	movs	r0, #24
 8004464:	f7ff f872 	bl	800354c <WIZCHIP_READ>
 8004468:	4603      	mov	r3, r0
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	b29a      	uxth	r2, r3
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	2018      	movs	r0, #24
 8004478:	f7ff f868 	bl	800354c <WIZCHIP_READ>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	3301      	adds	r3, #1
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	201a      	movs	r0, #26
 800448c:	f7ff f85e 	bl	800354c <WIZCHIP_READ>
 8004490:	4603      	mov	r3, r0
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b29a      	uxth	r2, r3
 8004496:	f107 0310 	add.w	r3, r7, #16
 800449a:	3302      	adds	r3, #2
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	201a      	movs	r0, #26
 80044a2:	f7ff f853 	bl	800354c <WIZCHIP_READ>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	f107 0310 	add.w	r3, r7, #16
 80044ae:	3303      	adds	r3, #3
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d145      	bne.n	8004546 <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 80044ba:	2014      	movs	r0, #20
 80044bc:	f7ff f846 	bl	800354c <WIZCHIP_READ>
 80044c0:	4603      	mov	r3, r0
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	f107 0310 	add.w	r3, r7, #16
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	2014      	movs	r0, #20
 80044d0:	f7ff f83c 	bl	800354c <WIZCHIP_READ>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	3301      	adds	r3, #1
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	2016      	movs	r0, #22
 80044e4:	f7ff f832 	bl	800354c <WIZCHIP_READ>
 80044e8:	4603      	mov	r3, r0
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	f107 0310 	add.w	r3, r7, #16
 80044f2:	3302      	adds	r3, #2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	2016      	movs	r0, #22
 80044fa:	f7ff f827 	bl	800354c <WIZCHIP_READ>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	f107 0310 	add.w	r3, r7, #16
 8004506:	3303      	adds	r3, #3
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 800450c:	4b61      	ldr	r3, [pc, #388]	; (8004694 <sendto+0x400>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b29a      	uxth	r2, r3
 8004516:	4b60      	ldr	r3, [pc, #384]	; (8004698 <sendto+0x404>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4413      	add	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	4619      	mov	r1, r3
 8004522:	2014      	movs	r0, #20
 8004524:	f7fe fff4 	bl	8003510 <WIZCHIP_WRITE>
 8004528:	4b5c      	ldr	r3, [pc, #368]	; (800469c <sendto+0x408>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	b29a      	uxth	r2, r3
 8004532:	4b5b      	ldr	r3, [pc, #364]	; (80046a0 <sendto+0x40c>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4413      	add	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	4619      	mov	r1, r3
 800453e:	2016      	movs	r0, #22
 8004540:	f7fe ffe6 	bl	8003510 <WIZCHIP_WRITE>
 8004544:	e001      	b.n	800454a <sendto+0x2b6>
      }
      else taddr = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	3308      	adds	r3, #8
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	3320      	adds	r3, #32
 8004552:	461a      	mov	r2, r3
 8004554:	89bb      	ldrh	r3, [r7, #12]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b29b      	uxth	r3, r3
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fe ffd7 	bl	8003510 <WIZCHIP_WRITE>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3308      	adds	r3, #8
 8004566:	019b      	lsls	r3, r3, #6
 8004568:	3322      	adds	r3, #34	; 0x22
 800456a:	461a      	mov	r2, r3
 800456c:	89bb      	ldrh	r3, [r7, #12]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7fe ffcd 	bl	8003510 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	3308      	adds	r3, #8
 800457a:	019b      	lsls	r3, r3, #6
 800457c:	3302      	adds	r3, #2
 800457e:	2120      	movs	r1, #32
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe ffc5 	bl	8003510 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004586:	bf00      	nop
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3308      	adds	r3, #8
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	3302      	adds	r3, #2
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe ffdb 	bl	800354c <WIZCHIP_READ>
 8004596:	4603      	mov	r3, r0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f4      	bne.n	8004588 <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3308      	adds	r3, #8
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	3306      	adds	r3, #6
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe ffd0 	bl	800354c <WIZCHIP_READ>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	3308      	adds	r3, #8
 80045be:	019b      	lsls	r3, r3, #6
 80045c0:	3306      	adds	r3, #6
 80045c2:	2110      	movs	r1, #16
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe ffa3 	bl	8003510 <WIZCHIP_WRITE>
         break;
 80045ca:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d059      	beq.n	8004686 <sendto+0x3f2>
 80045d2:	e035      	b.n	8004640 <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0df      	beq.n	800459e <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	3308      	adds	r3, #8
 80045e2:	019b      	lsls	r3, r3, #6
 80045e4:	3306      	adds	r3, #6
 80045e6:	2108      	movs	r1, #8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe ff91 	bl	8003510 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d022      	beq.n	800463a <sendto+0x3a6>
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	b29a      	uxth	r2, r3
 8004600:	f107 0310 	add.w	r3, r7, #16
 8004604:	3301      	adds	r3, #1
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	4413      	add	r3, r2
 800460c:	b29b      	uxth	r3, r3
 800460e:	4619      	mov	r1, r3
 8004610:	2014      	movs	r0, #20
 8004612:	f7fe ff7d 	bl	8003510 <WIZCHIP_WRITE>
 8004616:	f107 0310 	add.w	r3, r7, #16
 800461a:	3302      	adds	r3, #2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	b29a      	uxth	r2, r3
 8004624:	f107 0310 	add.w	r3, r7, #16
 8004628:	3303      	adds	r3, #3
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	4413      	add	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	2016      	movs	r0, #22
 8004636:	f7fe ff6b 	bl	8003510 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800463a:	f06f 030c 	mvn.w	r3, #12
 800463e:	e023      	b.n	8004688 <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8004640:	f107 0310 	add.w	r3, r7, #16
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b29a      	uxth	r2, r3
 800464c:	f107 0310 	add.w	r3, r7, #16
 8004650:	3301      	adds	r3, #1
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	4413      	add	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	2014      	movs	r0, #20
 800465e:	f7fe ff57 	bl	8003510 <WIZCHIP_WRITE>
 8004662:	f107 0310 	add.w	r3, r7, #16
 8004666:	3302      	adds	r3, #2
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	b29a      	uxth	r2, r3
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	3303      	adds	r3, #3
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4413      	add	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	2016      	movs	r0, #22
 8004682:	f7fe ff45 	bl	8003510 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004686:	89bb      	ldrh	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200008c0 	.word	0x200008c0
 8004694:	0800657c 	.word	0x0800657c
 8004698:	0800657d 	.word	0x0800657d
 800469c:	0800657e 	.word	0x0800657e
 80046a0:	0800657f 	.word	0x0800657f

080046a4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	807b      	strh	r3, [r7, #2]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	887a      	ldrh	r2, [r7, #2]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <reg_wizchip_cs_cbfunc+0x16>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <reg_wizchip_cs_cbfunc+0x40>)
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <reg_wizchip_cs_cbfunc+0x44>)
 800472e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <reg_wizchip_cs_cbfunc+0x40>)
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <reg_wizchip_cs_cbfunc+0x48>)
 8004734:	619a      	str	r2, [r3, #24]
 8004736:	e006      	b.n	8004746 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004738:	4a06      	ldr	r2, [pc, #24]	; (8004754 <reg_wizchip_cs_cbfunc+0x40>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <reg_wizchip_cs_cbfunc+0x40>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6193      	str	r3, [r2, #24]
   }
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	080046c1 	.word	0x080046c1
 800475c:	080046cf 	.word	0x080046cf

08004760 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 800476a:	bf00      	nop
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <reg_wizchip_bus_cbfunc+0x4c>)
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f9      	beq.n	800476c <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <reg_wizchip_bus_cbfunc+0x24>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <reg_wizchip_bus_cbfunc+0x4c>)
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <reg_wizchip_bus_cbfunc+0x50>)
 8004788:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 800478a:	4b08      	ldr	r3, [pc, #32]	; (80047ac <reg_wizchip_bus_cbfunc+0x4c>)
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <reg_wizchip_bus_cbfunc+0x54>)
 800478e:	621a      	str	r2, [r3, #32]
 8004790:	e006      	b.n	80047a0 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8004792:	4a06      	ldr	r2, [pc, #24]	; (80047ac <reg_wizchip_bus_cbfunc+0x4c>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <reg_wizchip_bus_cbfunc+0x4c>)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6213      	str	r3, [r2, #32]
   }
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	2000000c 	.word	0x2000000c
 80047b0:	080046dd 	.word	0x080046dd
 80047b4:	080046f7 	.word	0x080046f7

080047b8 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	6039      	str	r1, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d863      	bhi.n	800489a <ctlwizchip+0xe2>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <ctlwizchip+0x20>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004803 	.word	0x08004803
 80047e0:	0800482f 	.word	0x0800482f
 80047e4:	08004823 	.word	0x08004823
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	08004849 	.word	0x08004849
 80047f0:	0800489b 	.word	0x0800489b
 80047f4:	0800489b 	.word	0x0800489b
 80047f8:	08004857 	.word	0x08004857
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80047fc:	f000 f896 	bl	800492c <wizchip_sw_reset>
         break;
 8004800:	e04e      	b.n	80048a0 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	3308      	adds	r3, #8
 8004810:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f97f 	bl	8004b1c <wizchip_init>
 800481e:	4603      	mov	r3, r0
 8004820:	e03f      	b.n	80048a2 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa0e 	bl	8004c48 <wizchip_clrinterrupt>
         break;
 800482c:	e038      	b.n	80048a0 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800482e:	f000 fa2d 	bl	8004c8c <wizchip_getinterrupt>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	801a      	strh	r2, [r3, #0]
         break;
 800483a:	e031      	b.n	80048a0 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fa47 	bl	8004cd4 <wizchip_setinterruptmask>
         break;         
 8004846:	e02b      	b.n	80048a0 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004848:	f000 fa66 	bl	8004d18 <wizchip_getinterruptmask>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	801a      	strh	r2, [r3, #0]
         break;
 8004854:	e024      	b.n	80048a0 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <ctlwizchip+0xf4>)
 8004858:	789a      	ldrb	r2, [r3, #2]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <ctlwizchip+0xf4>)
 8004864:	78d2      	ldrb	r2, [r2, #3]
 8004866:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	3302      	adds	r3, #2
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <ctlwizchip+0xf4>)
 800486e:	7912      	ldrb	r2, [r2, #4]
 8004870:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3303      	adds	r3, #3
 8004876:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <ctlwizchip+0xf4>)
 8004878:	7952      	ldrb	r2, [r2, #5]
 800487a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3304      	adds	r3, #4
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <ctlwizchip+0xf4>)
 8004882:	7992      	ldrb	r2, [r2, #6]
 8004884:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	3305      	adds	r3, #5
 800488a:	4a08      	ldr	r2, [pc, #32]	; (80048ac <ctlwizchip+0xf4>)
 800488c:	79d2      	ldrb	r2, [r2, #7]
 800488e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	3306      	adds	r3, #6
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
         break;
 8004898:	e002      	b.n	80048a0 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489e:	e000      	b.n	80048a2 <ctlwizchip+0xea>
   }
   return 0;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d82c      	bhi.n	800491c <ctlnetwork+0x6c>
 80048c2:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <ctlnetwork+0x18>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	0800490d 	.word	0x0800490d
 80048dc:	08004915 	.word	0x08004915
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	f000 fa41 	bl	8004d68 <wizchip_setnetinfo>
         break;
 80048e6:	e01c      	b.n	8004922 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80048e8:	6838      	ldr	r0, [r7, #0]
 80048ea:	f000 fadb 	bl	8004ea4 <wizchip_getnetinfo>
         break;
 80048ee:	e018      	b.n	8004922 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb85 	bl	8005004 <wizchip_setnetmode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	e012      	b.n	8004924 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80048fe:	f000 fba4 	bl	800504a <wizchip_getnetmode>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	701a      	strb	r2, [r3, #0]
         break;
 800490a:	e00a      	b.n	8004922 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	f000 fba5 	bl	800505c <wizchip_settimeout>
         break;
 8004912:	e006      	b.n	8004922 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004914:	6838      	ldr	r0, [r7, #0]
 8004916:	f000 fbb6 	bl	8005086 <wizchip_gettimeout>
         break;
 800491a:	e002      	b.n	8004922 <ctlnetwork+0x72>
      default:
         return -1;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004920:	e000      	b.n	8004924 <ctlnetwork+0x74>
   }
   return 0;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004932:	2008      	movs	r0, #8
 8004934:	f7fe fe0a 	bl	800354c <WIZCHIP_READ>
 8004938:	4603      	mov	r3, r0
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b29b      	uxth	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	713b      	strb	r3, [r7, #4]
 8004942:	2008      	movs	r0, #8
 8004944:	f7fe fe02 	bl	800354c <WIZCHIP_READ>
 8004948:	4603      	mov	r3, r0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	717b      	strb	r3, [r7, #5]
 800494e:	200a      	movs	r0, #10
 8004950:	f7fe fdfc 	bl	800354c <WIZCHIP_READ>
 8004954:	4603      	mov	r3, r0
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	b29b      	uxth	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	71bb      	strb	r3, [r7, #6]
 800495e:	200a      	movs	r0, #10
 8004960:	f7fe fdf4 	bl	800354c <WIZCHIP_READ>
 8004964:	4603      	mov	r3, r0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	71fb      	strb	r3, [r7, #7]
 800496a:	200c      	movs	r0, #12
 800496c:	f7fe fdee 	bl	800354c <WIZCHIP_READ>
 8004970:	4603      	mov	r3, r0
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	b29b      	uxth	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	723b      	strb	r3, [r7, #8]
 800497a:	200c      	movs	r0, #12
 800497c:	f7fe fde6 	bl	800354c <WIZCHIP_READ>
 8004980:	4603      	mov	r3, r0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004986:	2010      	movs	r0, #16
 8004988:	f7fe fde0 	bl	800354c <WIZCHIP_READ>
 800498c:	4603      	mov	r3, r0
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	753b      	strb	r3, [r7, #20]
 8004996:	2010      	movs	r0, #16
 8004998:	f7fe fdd8 	bl	800354c <WIZCHIP_READ>
 800499c:	4603      	mov	r3, r0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	757b      	strb	r3, [r7, #21]
 80049a2:	2012      	movs	r0, #18
 80049a4:	f7fe fdd2 	bl	800354c <WIZCHIP_READ>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	75bb      	strb	r3, [r7, #22]
 80049b2:	2012      	movs	r0, #18
 80049b4:	f7fe fdca 	bl	800354c <WIZCHIP_READ>
 80049b8:	4603      	mov	r3, r0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	75fb      	strb	r3, [r7, #23]
 80049be:	2014      	movs	r0, #20
 80049c0:	f7fe fdc4 	bl	800354c <WIZCHIP_READ>
 80049c4:	4603      	mov	r3, r0
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	743b      	strb	r3, [r7, #16]
 80049ce:	2014      	movs	r0, #20
 80049d0:	f7fe fdbc 	bl	800354c <WIZCHIP_READ>
 80049d4:	4603      	mov	r3, r0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	747b      	strb	r3, [r7, #17]
 80049da:	2016      	movs	r0, #22
 80049dc:	f7fe fdb6 	bl	800354c <WIZCHIP_READ>
 80049e0:	4603      	mov	r3, r0
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	74bb      	strb	r3, [r7, #18]
 80049ea:	2016      	movs	r0, #22
 80049ec:	f7fe fdae 	bl	800354c <WIZCHIP_READ>
 80049f0:	4603      	mov	r3, r0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	74fb      	strb	r3, [r7, #19]
 80049f6:	2018      	movs	r0, #24
 80049f8:	f7fe fda8 	bl	800354c <WIZCHIP_READ>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	733b      	strb	r3, [r7, #12]
 8004a06:	2018      	movs	r0, #24
 8004a08:	f7fe fda0 	bl	800354c <WIZCHIP_READ>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	737b      	strb	r3, [r7, #13]
 8004a12:	201a      	movs	r0, #26
 8004a14:	f7fe fd9a 	bl	800354c <WIZCHIP_READ>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	73bb      	strb	r3, [r7, #14]
 8004a22:	201a      	movs	r0, #26
 8004a24:	f7fe fd92 	bl	800354c <WIZCHIP_READ>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7fe fd6d 	bl	8003510 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7fe fd88 	bl	800354c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004a3c:	793b      	ldrb	r3, [r7, #4]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	797b      	ldrb	r3, [r7, #5]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2008      	movs	r0, #8
 8004a50:	f7fe fd5e 	bl	8003510 <WIZCHIP_WRITE>
 8004a54:	79bb      	ldrb	r3, [r7, #6]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	200a      	movs	r0, #10
 8004a68:	f7fe fd52 	bl	8003510 <WIZCHIP_WRITE>
 8004a6c:	7a3b      	ldrb	r3, [r7, #8]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	7a7b      	ldrb	r3, [r7, #9]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	200c      	movs	r0, #12
 8004a80:	f7fe fd46 	bl	8003510 <WIZCHIP_WRITE>
   setGAR(gw);
 8004a84:	7d3b      	ldrb	r3, [r7, #20]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	7d7b      	ldrb	r3, [r7, #21]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4619      	mov	r1, r3
 8004a96:	2010      	movs	r0, #16
 8004a98:	f7fe fd3a 	bl	8003510 <WIZCHIP_WRITE>
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	2012      	movs	r0, #18
 8004ab0:	f7fe fd2e 	bl	8003510 <WIZCHIP_WRITE>
   setSUBR(sn);
 8004ab4:	7c3b      	ldrb	r3, [r7, #16]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	7c7b      	ldrb	r3, [r7, #17]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	2014      	movs	r0, #20
 8004ac8:	f7fe fd22 	bl	8003510 <WIZCHIP_WRITE>
 8004acc:	7cbb      	ldrb	r3, [r7, #18]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4619      	mov	r1, r3
 8004ade:	2016      	movs	r0, #22
 8004ae0:	f7fe fd16 	bl	8003510 <WIZCHIP_WRITE>
   setSIPR(sip);
 8004ae4:	7b3b      	ldrb	r3, [r7, #12]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	7b7b      	ldrb	r3, [r7, #13]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	2018      	movs	r0, #24
 8004af8:	f7fe fd0a 	bl	8003510 <WIZCHIP_WRITE>
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	201a      	movs	r0, #26
 8004b10:	f7fe fcfe 	bl	8003510 <WIZCHIP_WRITE>
}
 8004b14:	bf00      	nop
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004b2a:	f7ff feff 	bl	800492c <wizchip_sw_reset>
   if(txsize)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d040      	beq.n	8004bb6 <wizchip_init+0x9a>
   {
      tmp = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e018      	b.n	8004b70 <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d902      	bls.n	8004b52 <wizchip_init+0x36>
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b50:	e076      	b.n	8004c40 <wizchip_init+0x124>
			tmp += txsize[i];
 8004b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	4413      	add	r3, r2
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	73fb      	strb	r3, [r7, #15]
 8004b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b74:	2b07      	cmp	r3, #7
 8004b76:	dde2      	ble.n	8004b3e <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <wizchip_init+0x6e>
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b88:	e05a      	b.n	8004c40 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e00e      	b.n	8004bae <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004b90:	7bf8      	ldrb	r0, [r7, #15]
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4413      	add	r3, r2
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7fe fcf3 	bl	8003588 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb2:	2b07      	cmp	r3, #7
 8004bb4:	ddec      	ble.n	8004b90 <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d040      	beq.n	8004c3e <wizchip_init+0x122>
   {
      tmp = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e018      	b.n	8004bf8 <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d902      	bls.n	8004bda <wizchip_init+0xbe>
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd8:	e032      	b.n	8004c40 <wizchip_init+0x124>
			tmp += rxsize[i];
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	7bbb      	ldrb	r3, [r7, #14]
 8004be6:	4413      	add	r3, r2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	dde2      	ble.n	8004bc6 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <wizchip_init+0xf6>
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c10:	e016      	b.n	8004c40 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e00e      	b.n	8004c36 <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004c18:	7bf8      	ldrb	r0, [r7, #15]
 8004c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	4413      	add	r3, r2
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fe fd0b 	bl	8003640 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	73fb      	strb	r3, [r7, #15]
 8004c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3a:	2b07      	cmp	r3, #7
 8004c3c:	ddec      	ble.n	8004c18 <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	f043 0310 	orr.w	r3, r3, #16
 8004c64:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	b21a      	sxth	r2, r3
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	2002      	movs	r0, #2
 8004c80:	f7fe fc46 	bl	8003510 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 8004c9e:	2002      	movs	r0, #2
 8004ca0:	f7fe fc54 	bl	800354c <WIZCHIP_READ>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004caa:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8004cb4:	88bb      	ldrh	r3, [r7, #4]
 8004cb6:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004cb8:	79bb      	ldrb	r3, [r7, #6]
 8004cba:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004cbc:	88bb      	ldrh	r3, [r7, #4]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004cca:	88bb      	ldrh	r3, [r7, #4]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	b21a      	sxth	r2, r3
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	2004      	movs	r0, #4
 8004d0c:	f7fe fc00 	bl	8003510 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8004d2a:	2004      	movs	r0, #4
 8004d2c:	f7fe fc0e 	bl	800354c <WIZCHIP_READ>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d36:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8004d38:	88bb      	ldrh	r3, [r7, #4]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004d50:	88bb      	ldrh	r3, [r7, #4]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004d5e:	88bb      	ldrh	r3, [r7, #4]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	2008      	movs	r0, #8
 8004d88:	f7fe fbc2 	bl	8003510 <WIZCHIP_WRITE>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	789b      	ldrb	r3, [r3, #2]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	78db      	ldrb	r3, [r3, #3]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	200a      	movs	r0, #10
 8004da4:	f7fe fbb4 	bl	8003510 <WIZCHIP_WRITE>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	795b      	ldrb	r3, [r3, #5]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	200c      	movs	r0, #12
 8004dc0:	f7fe fba6 	bl	8003510 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7b9b      	ldrb	r3, [r3, #14]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7bdb      	ldrb	r3, [r3, #15]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4619      	mov	r1, r3
 8004dda:	2010      	movs	r0, #16
 8004ddc:	f7fe fb98 	bl	8003510 <WIZCHIP_WRITE>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7c1b      	ldrb	r3, [r3, #16]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7c5b      	ldrb	r3, [r3, #17]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	2012      	movs	r0, #18
 8004df8:	f7fe fb8a 	bl	8003510 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7a9b      	ldrb	r3, [r3, #10]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7adb      	ldrb	r3, [r3, #11]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	2014      	movs	r0, #20
 8004e14:	f7fe fb7c 	bl	8003510 <WIZCHIP_WRITE>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7b1b      	ldrb	r3, [r3, #12]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7b5b      	ldrb	r3, [r3, #13]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	2016      	movs	r0, #22
 8004e30:	f7fe fb6e 	bl	8003510 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	799b      	ldrb	r3, [r3, #6]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	79db      	ldrb	r3, [r3, #7]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2018      	movs	r0, #24
 8004e4c:	f7fe fb60 	bl	8003510 <WIZCHIP_WRITE>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	7a1b      	ldrb	r3, [r3, #8]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7a5b      	ldrb	r3, [r3, #9]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4619      	mov	r1, r3
 8004e66:	201a      	movs	r0, #26
 8004e68:	f7fe fb52 	bl	8003510 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7c9a      	ldrb	r2, [r3, #18]
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <wizchip_setnetinfo+0x134>)
 8004e72:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7cda      	ldrb	r2, [r3, #19]
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <wizchip_setnetinfo+0x134>)
 8004e7a:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7d1a      	ldrb	r2, [r3, #20]
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <wizchip_setnetinfo+0x134>)
 8004e82:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7d5a      	ldrb	r2, [r3, #21]
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <wizchip_setnetinfo+0x134>)
 8004e8a:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	7d9a      	ldrb	r2, [r3, #22]
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <wizchip_setnetinfo+0x138>)
 8004e92:	701a      	strb	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200008e4 	.word	0x200008e4
 8004ea0:	200008e8 	.word	0x200008e8

08004ea4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004eac:	2008      	movs	r0, #8
 8004eae:	f7fe fb4d 	bl	800354c <WIZCHIP_READ>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	2008      	movs	r0, #8
 8004ec0:	f7fe fb44 	bl	800354c <WIZCHIP_READ>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	705a      	strb	r2, [r3, #1]
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f7fe fb3d 	bl	800354c <WIZCHIP_READ>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	709a      	strb	r2, [r3, #2]
 8004ede:	200a      	movs	r0, #10
 8004ee0:	f7fe fb34 	bl	800354c <WIZCHIP_READ>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	70da      	strb	r2, [r3, #3]
 8004eec:	200c      	movs	r0, #12
 8004eee:	f7fe fb2d 	bl	800354c <WIZCHIP_READ>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	711a      	strb	r2, [r3, #4]
 8004efe:	200c      	movs	r0, #12
 8004f00:	f7fe fb24 	bl	800354c <WIZCHIP_READ>
 8004f04:	4603      	mov	r3, r0
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8004f0c:	2010      	movs	r0, #16
 8004f0e:	f7fe fb1d 	bl	800354c <WIZCHIP_READ>
 8004f12:	4603      	mov	r3, r0
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	739a      	strb	r2, [r3, #14]
 8004f1e:	2010      	movs	r0, #16
 8004f20:	f7fe fb14 	bl	800354c <WIZCHIP_READ>
 8004f24:	4603      	mov	r3, r0
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	73da      	strb	r2, [r3, #15]
 8004f2c:	2012      	movs	r0, #18
 8004f2e:	f7fe fb0d 	bl	800354c <WIZCHIP_READ>
 8004f32:	4603      	mov	r3, r0
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	741a      	strb	r2, [r3, #16]
 8004f3e:	2012      	movs	r0, #18
 8004f40:	f7fe fb04 	bl	800354c <WIZCHIP_READ>
 8004f44:	4603      	mov	r3, r0
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8004f4c:	2014      	movs	r0, #20
 8004f4e:	f7fe fafd 	bl	800354c <WIZCHIP_READ>
 8004f52:	4603      	mov	r3, r0
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	729a      	strb	r2, [r3, #10]
 8004f5e:	2014      	movs	r0, #20
 8004f60:	f7fe faf4 	bl	800354c <WIZCHIP_READ>
 8004f64:	4603      	mov	r3, r0
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	72da      	strb	r2, [r3, #11]
 8004f6c:	2016      	movs	r0, #22
 8004f6e:	f7fe faed 	bl	800354c <WIZCHIP_READ>
 8004f72:	4603      	mov	r3, r0
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	731a      	strb	r2, [r3, #12]
 8004f7e:	2016      	movs	r0, #22
 8004f80:	f7fe fae4 	bl	800354c <WIZCHIP_READ>
 8004f84:	4603      	mov	r3, r0
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8004f8c:	2018      	movs	r0, #24
 8004f8e:	f7fe fadd 	bl	800354c <WIZCHIP_READ>
 8004f92:	4603      	mov	r3, r0
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	719a      	strb	r2, [r3, #6]
 8004f9e:	2018      	movs	r0, #24
 8004fa0:	f7fe fad4 	bl	800354c <WIZCHIP_READ>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	71da      	strb	r2, [r3, #7]
 8004fac:	201a      	movs	r0, #26
 8004fae:	f7fe facd 	bl	800354c <WIZCHIP_READ>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	721a      	strb	r2, [r3, #8]
 8004fbe:	201a      	movs	r0, #26
 8004fc0:	f7fe fac4 	bl	800354c <WIZCHIP_READ>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <wizchip_getnetinfo+0x158>)
 8004fce:	781a      	ldrb	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <wizchip_getnetinfo+0x158>)
 8004fd6:	785a      	ldrb	r2, [r3, #1]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <wizchip_getnetinfo+0x158>)
 8004fde:	789a      	ldrb	r2, [r3, #2]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <wizchip_getnetinfo+0x158>)
 8004fe6:	78da      	ldrb	r2, [r3, #3]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <wizchip_getnetinfo+0x15c>)
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	759a      	strb	r2, [r3, #22]
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200008e4 	.word	0x200008e4
 8005000:	200008e8 	.word	0x200008e8

08005004 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <wizchip_setnetmode+0x1e>
 800501c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005020:	e00f      	b.n	8005042 <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8005022:	2000      	movs	r0, #0
 8005024:	f7fe fa92 	bl	800354c <WIZCHIP_READ>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	4313      	orrs	r3, r2
 8005032:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	2000      	movs	r0, #0
 800503c:	f7fe fa68 	bl	8003510 <WIZCHIP_WRITE>
   return 0;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800504e:	2000      	movs	r0, #0
 8005050:	f7fe fa7c 	bl	800354c <WIZCHIP_READ>
 8005054:	4603      	mov	r3, r0
 8005056:	b2db      	uxtb	r3, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}

0800505c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	201e      	movs	r0, #30
 800506e:	f7fe fa4f 	bl	8003510 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	4619      	mov	r1, r3
 8005078:	201c      	movs	r0, #28
 800507a:	f7fe fa49 	bl	8003510 <WIZCHIP_WRITE>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800508e:	201e      	movs	r0, #30
 8005090:	f7fe fa5c 	bl	800354c <WIZCHIP_READ>
 8005094:	4603      	mov	r3, r0
 8005096:	b2da      	uxtb	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800509c:	201c      	movs	r0, #28
 800509e:	f7fe fa55 	bl	800354c <WIZCHIP_READ>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461a      	mov	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	805a      	strh	r2, [r3, #2]
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <wizchip_select+0x14>)
 80050be:	f7fc f969 	bl	8001394 <HAL_GPIO_WritePin>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40020c00 	.word	0x40020c00

080050cc <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80050d0:	2201      	movs	r2, #1
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <wizchip_deselect+0x14>)
 80050d6:	f7fc f95d 	bl	8001394 <HAL_GPIO_WritePin>
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40020c00 	.word	0x40020c00

080050e4 <wizchip_read>:

static inline uint16_t wizchip_read(uint32_t addr)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return _W5300_DATA(addr);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, uint16_t tx_data)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
  _W5300_DATA(addr) = tx_data;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8005118:	461a      	mov	r2, r3
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	8013      	strh	r3, [r2, #0]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <wizchip_initialize>:

void wizchip_initialize(void)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 8005132:	f7ff ffcb 	bl	80050cc <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8005136:	490e      	ldr	r1, [pc, #56]	; (8005170 <wizchip_initialize+0x44>)
 8005138:	480e      	ldr	r0, [pc, #56]	; (8005174 <wizchip_initialize+0x48>)
 800513a:	f7ff faeb 	bl	8004714 <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 800513e:	490e      	ldr	r1, [pc, #56]	; (8005178 <wizchip_initialize+0x4c>)
 8005140:	480e      	ldr	r0, [pc, #56]	; (800517c <wizchip_initialize+0x50>)
 8005142:	f7ff fb0d 	bl	8004760 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <wizchip_initialize+0x54>)
 8005148:	463c      	mov	r4, r7
 800514a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800514c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8005150:	463b      	mov	r3, r7
 8005152:	4619      	mov	r1, r3
 8005154:	2001      	movs	r0, #1
 8005156:	f7ff fb2f 	bl	80047b8 <ctlwizchip>
 800515a:	4603      	mov	r3, r0
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005160:	d102      	bne.n	8005168 <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 8005162:	4808      	ldr	r0, [pc, #32]	; (8005184 <wizchip_initialize+0x58>)
 8005164:	f000 fabe 	bl	80056e4 <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	080050cd 	.word	0x080050cd
 8005174:	080050b5 	.word	0x080050b5
 8005178:	08005105 	.word	0x08005105
 800517c:	080050e5 	.word	0x080050e5
 8005180:	0800659c 	.word	0x0800659c
 8005184:	08006584 	.word	0x08006584

08005188 <wizchip_reset>:

void wizchip_reset(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005192:	4808      	ldr	r0, [pc, #32]	; (80051b4 <wizchip_reset+0x2c>)
 8005194:	f7fc f8fe 	bl	8001394 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005198:	2064      	movs	r0, #100	; 0x64
 800519a:	f7fb fe3f 	bl	8000e1c <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800519e:	2201      	movs	r2, #1
 80051a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051a4:	4803      	ldr	r0, [pc, #12]	; (80051b4 <wizchip_reset+0x2c>)
 80051a6:	f7fc f8f5 	bl	8001394 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80051aa:	2064      	movs	r0, #100	; 0x64
 80051ac:	f7fb fe36 	bl	8000e1c <HAL_Delay>
}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40020800 	.word	0x40020800

080051b8 <wizchip_check>:

void wizchip_check(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 80051ce:	f7ff ffad 	bl	800512c <wizchip_initialize>
  wizchip_reset();
 80051d2:	f7ff ffd9 	bl	8005188 <wizchip_reset>
  wizchip_check();
 80051d6:	f7ff ffef 	bl	80051b8 <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	2000      	movs	r0, #0
 80051de:	f7ff fb67 	bl	80048b0 <ctlnetwork>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 80051ec:	b5b0      	push	{r4, r5, r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	2001      	movs	r0, #1
 8005200:	f7ff fb56 	bl	80048b0 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	4619      	mov	r1, r3
 800520a:	2008      	movs	r0, #8
 800520c:	f7ff fad4 	bl	80047b8 <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7d9b      	ldrb	r3, [r3, #22]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d109      	bne.n	800522c <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 8005218:	4839      	ldr	r0, [pc, #228]	; (8005300 <wizchip_network_information+0x114>)
 800521a:	f000 fa63 	bl	80056e4 <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4619      	mov	r1, r3
 8005224:	4837      	ldr	r0, [pc, #220]	; (8005304 <wizchip_network_information+0x118>)
 8005226:	f000 f9d7 	bl	80055d8 <iprintf>
 800522a:	e008      	b.n	800523e <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 800522c:	4834      	ldr	r0, [pc, #208]	; (8005300 <wizchip_network_information+0x114>)
 800522e:	f000 fa59 	bl	80056e4 <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4619      	mov	r1, r3
 8005238:	4833      	ldr	r0, [pc, #204]	; (8005308 <wizchip_network_information+0x11c>)
 800523a:	f000 f9cd 	bl	80055d8 <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	461c      	mov	r4, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	789b      	ldrb	r3, [r3, #2]
 800524e:	461d      	mov	r5, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	78db      	ldrb	r3, [r3, #3]
 8005254:	461a      	mov	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	4619      	mov	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	795b      	ldrb	r3, [r3, #5]
 8005260:	9302      	str	r3, [sp, #8]
 8005262:	9101      	str	r1, [sp, #4]
 8005264:	9200      	str	r2, [sp, #0]
 8005266:	462b      	mov	r3, r5
 8005268:	4622      	mov	r2, r4
 800526a:	4601      	mov	r1, r0
 800526c:	4827      	ldr	r0, [pc, #156]	; (800530c <wizchip_network_information+0x120>)
 800526e:	f000 f9b3 	bl	80055d8 <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	799b      	ldrb	r3, [r3, #6]
 8005276:	4619      	mov	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	79db      	ldrb	r3, [r3, #7]
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7a1b      	ldrb	r3, [r3, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	7a5b      	ldrb	r3, [r3, #9]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	4603      	mov	r3, r0
 800528c:	4820      	ldr	r0, [pc, #128]	; (8005310 <wizchip_network_information+0x124>)
 800528e:	f000 f9a3 	bl	80055d8 <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7a9b      	ldrb	r3, [r3, #10]
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	7adb      	ldrb	r3, [r3, #11]
 800529c:	461a      	mov	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7b1b      	ldrb	r3, [r3, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7b5b      	ldrb	r3, [r3, #13]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4603      	mov	r3, r0
 80052ac:	4819      	ldr	r0, [pc, #100]	; (8005314 <wizchip_network_information+0x128>)
 80052ae:	f000 f993 	bl	80055d8 <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7b9b      	ldrb	r3, [r3, #14]
 80052b6:	4619      	mov	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7bdb      	ldrb	r3, [r3, #15]
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7c1b      	ldrb	r3, [r3, #16]
 80052c2:	4618      	mov	r0, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7c5b      	ldrb	r3, [r3, #17]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4603      	mov	r3, r0
 80052cc:	4812      	ldr	r0, [pc, #72]	; (8005318 <wizchip_network_information+0x12c>)
 80052ce:	f000 f983 	bl	80055d8 <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7c9b      	ldrb	r3, [r3, #18]
 80052d6:	4619      	mov	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7cdb      	ldrb	r3, [r3, #19]
 80052dc:	461a      	mov	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	7d1b      	ldrb	r3, [r3, #20]
 80052e2:	4618      	mov	r0, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7d5b      	ldrb	r3, [r3, #21]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4603      	mov	r3, r0
 80052ec:	480b      	ldr	r0, [pc, #44]	; (800531c <wizchip_network_information+0x130>)
 80052ee:	f000 f973 	bl	80055d8 <iprintf>
  printf("====================================================================================================\n\n");
 80052f2:	480b      	ldr	r0, [pc, #44]	; (8005320 <wizchip_network_information+0x134>)
 80052f4:	f000 f9f6 	bl	80056e4 <puts>
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005300:	080065ac 	.word	0x080065ac
 8005304:	08006614 	.word	0x08006614
 8005308:	08006638 	.word	0x08006638
 800530c:	08006660 	.word	0x08006660
 8005310:	08006690 	.word	0x08006690
 8005314:	080066ac 	.word	0x080066ac
 8005318:	080066c8 	.word	0x080066c8
 800531c:	080066e4 	.word	0x080066e4
 8005320:	08006700 	.word	0x08006700

08005324 <HAL_SYSTICK_Callback>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void HAL_SYSTICK_Callback(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  g_time_base++;
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <HAL_SYSTICK_Callback+0x48>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a0f      	ldr	r2, [pc, #60]	; (800536c <HAL_SYSTICK_Callback+0x48>)
 8005330:	6013      	str	r3, [r2, #0]

  if ((g_time_base % 1) == 0) // uint : 1 millisecond, repeat every millisecond
  {
    g_msec++;
 8005332:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <HAL_SYSTICK_Callback+0x4c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a0d      	ldr	r2, [pc, #52]	; (8005370 <HAL_SYSTICK_Callback+0x4c>)
 800533a:	6013      	str	r3, [r2, #0]

    wizchip_1msec_timer_callback();
 800533c:	f000 f81e 	bl	800537c <wizchip_1msec_timer_callback>
  }

  if ((g_time_base % 1000) == 0) // uint : 1 second, repeat every second
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_SYSTICK_Callback+0x48>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_SYSTICK_Callback+0x50>)
 8005346:	fba3 1302 	umull	r1, r3, r3, r2
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SYSTICK_Callback+0x44>
  {
    g_sec++;
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_SYSTICK_Callback+0x54>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	4a05      	ldr	r2, [pc, #20]	; (8005378 <HAL_SYSTICK_Callback+0x54>)
 8005362:	6013      	str	r3, [r2, #0]

    wizchip_1sec_timer_callback();
 8005364:	f000 f818 	bl	8005398 <wizchip_1sec_timer_callback>
  }
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200008ec 	.word	0x200008ec
 8005370:	200008f4 	.word	0x200008f4
 8005374:	10624dd3 	.word	0x10624dd3
 8005378:	200008f0 	.word	0x200008f0

0800537c <wizchip_1msec_timer_callback>:
{
  msec_timer_callback_ptr = callback;
}

void wizchip_1msec_timer_callback(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  if (msec_timer_callback_ptr != NULL)
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <wizchip_1msec_timer_callback+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <wizchip_1msec_timer_callback+0x12>
  {
    msec_timer_callback_ptr();
 8005388:	4b02      	ldr	r3, [pc, #8]	; (8005394 <wizchip_1msec_timer_callback+0x18>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4798      	blx	r3
  }
}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200009e0 	.word	0x200009e0

08005398 <wizchip_1sec_timer_callback>:
{
  sec_timer_callback_ptr = callback;
}

void wizchip_1sec_timer_callback(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  if (sec_timer_callback_ptr != NULL)
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <wizchip_1sec_timer_callback+0x18>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <wizchip_1sec_timer_callback+0x12>
  {
    sec_timer_callback_ptr();
 80053a4:	4b02      	ldr	r3, [pc, #8]	; (80053b0 <wizchip_1sec_timer_callback+0x18>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4798      	blx	r3
  }
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200009e4 	.word	0x200009e4

080053b4 <__errno>:
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <__errno+0x8>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000038 	.word	0x20000038

080053c0 <__libc_init_array>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4d0d      	ldr	r5, [pc, #52]	; (80053f8 <__libc_init_array+0x38>)
 80053c4:	4c0d      	ldr	r4, [pc, #52]	; (80053fc <__libc_init_array+0x3c>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	2600      	movs	r6, #0
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	d109      	bne.n	80053e4 <__libc_init_array+0x24>
 80053d0:	4d0b      	ldr	r5, [pc, #44]	; (8005400 <__libc_init_array+0x40>)
 80053d2:	4c0c      	ldr	r4, [pc, #48]	; (8005404 <__libc_init_array+0x44>)
 80053d4:	f001 f824 	bl	8006420 <_init>
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	2600      	movs	r6, #0
 80053de:	42a6      	cmp	r6, r4
 80053e0:	d105      	bne.n	80053ee <__libc_init_array+0x2e>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e8:	4798      	blx	r3
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7ee      	b.n	80053cc <__libc_init_array+0xc>
 80053ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f2:	4798      	blx	r3
 80053f4:	3601      	adds	r6, #1
 80053f6:	e7f2      	b.n	80053de <__libc_init_array+0x1e>
 80053f8:	08006820 	.word	0x08006820
 80053fc:	08006820 	.word	0x08006820
 8005400:	08006820 	.word	0x08006820
 8005404:	08006824 	.word	0x08006824

08005408 <memset>:
 8005408:	4402      	add	r2, r0
 800540a:	4603      	mov	r3, r0
 800540c:	4293      	cmp	r3, r2
 800540e:	d100      	bne.n	8005412 <memset+0xa>
 8005410:	4770      	bx	lr
 8005412:	f803 1b01 	strb.w	r1, [r3], #1
 8005416:	e7f9      	b.n	800540c <memset+0x4>

08005418 <_free_r>:
 8005418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541a:	2900      	cmp	r1, #0
 800541c:	d044      	beq.n	80054a8 <_free_r+0x90>
 800541e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005422:	9001      	str	r0, [sp, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f1a1 0404 	sub.w	r4, r1, #4
 800542a:	bfb8      	it	lt
 800542c:	18e4      	addlt	r4, r4, r3
 800542e:	f000 fcc9 	bl	8005dc4 <__malloc_lock>
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <_free_r+0x94>)
 8005434:	9801      	ldr	r0, [sp, #4]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	b933      	cbnz	r3, 8005448 <_free_r+0x30>
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6014      	str	r4, [r2, #0]
 800543e:	b003      	add	sp, #12
 8005440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005444:	f000 bcc4 	b.w	8005dd0 <__malloc_unlock>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d908      	bls.n	800545e <_free_r+0x46>
 800544c:	6825      	ldr	r5, [r4, #0]
 800544e:	1961      	adds	r1, r4, r5
 8005450:	428b      	cmp	r3, r1
 8005452:	bf01      	itttt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	e7ed      	b.n	800543a <_free_r+0x22>
 800545e:	461a      	mov	r2, r3
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b10b      	cbz	r3, 8005468 <_free_r+0x50>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d9fa      	bls.n	800545e <_free_r+0x46>
 8005468:	6811      	ldr	r1, [r2, #0]
 800546a:	1855      	adds	r5, r2, r1
 800546c:	42a5      	cmp	r5, r4
 800546e:	d10b      	bne.n	8005488 <_free_r+0x70>
 8005470:	6824      	ldr	r4, [r4, #0]
 8005472:	4421      	add	r1, r4
 8005474:	1854      	adds	r4, r2, r1
 8005476:	42a3      	cmp	r3, r4
 8005478:	6011      	str	r1, [r2, #0]
 800547a:	d1e0      	bne.n	800543e <_free_r+0x26>
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	4421      	add	r1, r4
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	e7da      	b.n	800543e <_free_r+0x26>
 8005488:	d902      	bls.n	8005490 <_free_r+0x78>
 800548a:	230c      	movs	r3, #12
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	e7d6      	b.n	800543e <_free_r+0x26>
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	1961      	adds	r1, r4, r5
 8005494:	428b      	cmp	r3, r1
 8005496:	bf04      	itt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	bf04      	itt	eq
 80054a0:	1949      	addeq	r1, r1, r5
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	6054      	str	r4, [r2, #4]
 80054a6:	e7ca      	b.n	800543e <_free_r+0x26>
 80054a8:	b003      	add	sp, #12
 80054aa:	bd30      	pop	{r4, r5, pc}
 80054ac:	200008f8 	.word	0x200008f8

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0e      	ldr	r6, [pc, #56]	; (80054ec <sbrk_aligned+0x3c>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 f91a 	bl	80056f4 <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f915 	bl	80056f4 <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d00a      	beq.n	80054e4 <sbrk_aligned+0x34>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d007      	beq.n	80054e8 <sbrk_aligned+0x38>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f90a 	bl	80056f4 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d101      	bne.n	80054e8 <sbrk_aligned+0x38>
 80054e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054e8:	4620      	mov	r0, r4
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	200008fc 	.word	0x200008fc

080054f0 <_malloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	2d00      	cmp	r5, #0
 8005504:	4607      	mov	r7, r0
 8005506:	db01      	blt.n	800550c <_malloc_r+0x1c>
 8005508:	42a9      	cmp	r1, r5
 800550a:	d905      	bls.n	8005518 <_malloc_r+0x28>
 800550c:	230c      	movs	r3, #12
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	2600      	movs	r6, #0
 8005512:	4630      	mov	r0, r6
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	4e2e      	ldr	r6, [pc, #184]	; (80055d4 <_malloc_r+0xe4>)
 800551a:	f000 fc53 	bl	8005dc4 <__malloc_lock>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	461c      	mov	r4, r3
 8005522:	bb34      	cbnz	r4, 8005572 <_malloc_r+0x82>
 8005524:	4629      	mov	r1, r5
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff ffc2 	bl	80054b0 <sbrk_aligned>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	4604      	mov	r4, r0
 8005530:	d14d      	bne.n	80055ce <_malloc_r+0xde>
 8005532:	6834      	ldr	r4, [r6, #0]
 8005534:	4626      	mov	r6, r4
 8005536:	2e00      	cmp	r6, #0
 8005538:	d140      	bne.n	80055bc <_malloc_r+0xcc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4631      	mov	r1, r6
 800553e:	4638      	mov	r0, r7
 8005540:	eb04 0803 	add.w	r8, r4, r3
 8005544:	f000 f8d6 	bl	80056f4 <_sbrk_r>
 8005548:	4580      	cmp	r8, r0
 800554a:	d13a      	bne.n	80055c2 <_malloc_r+0xd2>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	3503      	adds	r5, #3
 8005550:	1a6d      	subs	r5, r5, r1
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	4629      	mov	r1, r5
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff ffa5 	bl	80054b0 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d02b      	beq.n	80055c2 <_malloc_r+0xd2>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e00e      	b.n	8005590 <_malloc_r+0xa0>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	d41e      	bmi.n	80055b6 <_malloc_r+0xc6>
 8005578:	2a0b      	cmp	r2, #11
 800557a:	d916      	bls.n	80055aa <_malloc_r+0xba>
 800557c:	1961      	adds	r1, r4, r5
 800557e:	42a3      	cmp	r3, r4
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	bf18      	it	ne
 8005584:	6059      	strne	r1, [r3, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	bf08      	it	eq
 800558a:	6031      	streq	r1, [r6, #0]
 800558c:	5162      	str	r2, [r4, r5]
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	4638      	mov	r0, r7
 8005592:	f104 060b 	add.w	r6, r4, #11
 8005596:	f000 fc1b 	bl	8005dd0 <__malloc_unlock>
 800559a:	f026 0607 	bic.w	r6, r6, #7
 800559e:	1d23      	adds	r3, r4, #4
 80055a0:	1af2      	subs	r2, r6, r3
 80055a2:	d0b6      	beq.n	8005512 <_malloc_r+0x22>
 80055a4:	1b9b      	subs	r3, r3, r6
 80055a6:	50a3      	str	r3, [r4, r2]
 80055a8:	e7b3      	b.n	8005512 <_malloc_r+0x22>
 80055aa:	6862      	ldr	r2, [r4, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	bf0c      	ite	eq
 80055b0:	6032      	streq	r2, [r6, #0]
 80055b2:	605a      	strne	r2, [r3, #4]
 80055b4:	e7ec      	b.n	8005590 <_malloc_r+0xa0>
 80055b6:	4623      	mov	r3, r4
 80055b8:	6864      	ldr	r4, [r4, #4]
 80055ba:	e7b2      	b.n	8005522 <_malloc_r+0x32>
 80055bc:	4634      	mov	r4, r6
 80055be:	6876      	ldr	r6, [r6, #4]
 80055c0:	e7b9      	b.n	8005536 <_malloc_r+0x46>
 80055c2:	230c      	movs	r3, #12
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4638      	mov	r0, r7
 80055c8:	f000 fc02 	bl	8005dd0 <__malloc_unlock>
 80055cc:	e7a1      	b.n	8005512 <_malloc_r+0x22>
 80055ce:	6025      	str	r5, [r4, #0]
 80055d0:	e7de      	b.n	8005590 <_malloc_r+0xa0>
 80055d2:	bf00      	nop
 80055d4:	200008f8 	.word	0x200008f8

080055d8 <iprintf>:
 80055d8:	b40f      	push	{r0, r1, r2, r3}
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <iprintf+0x2c>)
 80055dc:	b513      	push	{r0, r1, r4, lr}
 80055de:	681c      	ldr	r4, [r3, #0]
 80055e0:	b124      	cbz	r4, 80055ec <iprintf+0x14>
 80055e2:	69a3      	ldr	r3, [r4, #24]
 80055e4:	b913      	cbnz	r3, 80055ec <iprintf+0x14>
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fad4 	bl	8005b94 <__sinit>
 80055ec:	ab05      	add	r3, sp, #20
 80055ee:	9a04      	ldr	r2, [sp, #16]
 80055f0:	68a1      	ldr	r1, [r4, #8]
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fc1b 	bl	8005e30 <_vfiprintf_r>
 80055fa:	b002      	add	sp, #8
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	b004      	add	sp, #16
 8005602:	4770      	bx	lr
 8005604:	20000038 	.word	0x20000038

08005608 <_puts_r>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	460e      	mov	r6, r1
 800560c:	4605      	mov	r5, r0
 800560e:	b118      	cbz	r0, 8005618 <_puts_r+0x10>
 8005610:	6983      	ldr	r3, [r0, #24]
 8005612:	b90b      	cbnz	r3, 8005618 <_puts_r+0x10>
 8005614:	f000 fabe 	bl	8005b94 <__sinit>
 8005618:	69ab      	ldr	r3, [r5, #24]
 800561a:	68ac      	ldr	r4, [r5, #8]
 800561c:	b913      	cbnz	r3, 8005624 <_puts_r+0x1c>
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fab8 	bl	8005b94 <__sinit>
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <_puts_r+0xd0>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d120      	bne.n	800566c <_puts_r+0x64>
 800562a:	686c      	ldr	r4, [r5, #4]
 800562c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800562e:	07db      	lsls	r3, r3, #31
 8005630:	d405      	bmi.n	800563e <_puts_r+0x36>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	0598      	lsls	r0, r3, #22
 8005636:	d402      	bmi.n	800563e <_puts_r+0x36>
 8005638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563a:	f000 fb49 	bl	8005cd0 <__retarget_lock_acquire_recursive>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	0719      	lsls	r1, r3, #28
 8005642:	d51d      	bpl.n	8005680 <_puts_r+0x78>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	b1db      	cbz	r3, 8005680 <_puts_r+0x78>
 8005648:	3e01      	subs	r6, #1
 800564a:	68a3      	ldr	r3, [r4, #8]
 800564c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005650:	3b01      	subs	r3, #1
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	bb39      	cbnz	r1, 80056a6 <_puts_r+0x9e>
 8005656:	2b00      	cmp	r3, #0
 8005658:	da38      	bge.n	80056cc <_puts_r+0xc4>
 800565a:	4622      	mov	r2, r4
 800565c:	210a      	movs	r1, #10
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f89c 	bl	800579c <__swbuf_r>
 8005664:	3001      	adds	r0, #1
 8005666:	d011      	beq.n	800568c <_puts_r+0x84>
 8005668:	250a      	movs	r5, #10
 800566a:	e011      	b.n	8005690 <_puts_r+0x88>
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <_puts_r+0xd4>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_puts_r+0x6e>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7da      	b.n	800562c <_puts_r+0x24>
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <_puts_r+0xd8>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7d5      	b.n	800562c <_puts_r+0x24>
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f8ee 	bl	8005864 <__swsetup_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d0dd      	beq.n	8005648 <_puts_r+0x40>
 800568c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005692:	07da      	lsls	r2, r3, #31
 8005694:	d405      	bmi.n	80056a2 <_puts_r+0x9a>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	d402      	bmi.n	80056a2 <_puts_r+0x9a>
 800569c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800569e:	f000 fb18 	bl	8005cd2 <__retarget_lock_release_recursive>
 80056a2:	4628      	mov	r0, r5
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da04      	bge.n	80056b4 <_puts_r+0xac>
 80056aa:	69a2      	ldr	r2, [r4, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	dc06      	bgt.n	80056be <_puts_r+0xb6>
 80056b0:	290a      	cmp	r1, #10
 80056b2:	d004      	beq.n	80056be <_puts_r+0xb6>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	7019      	strb	r1, [r3, #0]
 80056bc:	e7c5      	b.n	800564a <_puts_r+0x42>
 80056be:	4622      	mov	r2, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f86b 	bl	800579c <__swbuf_r>
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1bf      	bne.n	800564a <_puts_r+0x42>
 80056ca:	e7df      	b.n	800568c <_puts_r+0x84>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	250a      	movs	r5, #10
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	701d      	strb	r5, [r3, #0]
 80056d6:	e7db      	b.n	8005690 <_puts_r+0x88>
 80056d8:	080067a4 	.word	0x080067a4
 80056dc:	080067c4 	.word	0x080067c4
 80056e0:	08006784 	.word	0x08006784

080056e4 <puts>:
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <puts+0xc>)
 80056e6:	4601      	mov	r1, r0
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	f7ff bf8d 	b.w	8005608 <_puts_r>
 80056ee:	bf00      	nop
 80056f0:	20000038 	.word	0x20000038

080056f4 <_sbrk_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	; (8005710 <_sbrk_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fb fabc 	bl	8000c7c <_sbrk>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_sbrk_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_sbrk_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000904 	.word	0x20000904

08005714 <__sread>:
 8005714:	b510      	push	{r4, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571c:	f000 fe4c 	bl	80063b8 <_read_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	bfab      	itete	ge
 8005724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005726:	89a3      	ldrhlt	r3, [r4, #12]
 8005728:	181b      	addge	r3, r3, r0
 800572a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800572e:	bfac      	ite	ge
 8005730:	6563      	strge	r3, [r4, #84]	; 0x54
 8005732:	81a3      	strhlt	r3, [r4, #12]
 8005734:	bd10      	pop	{r4, pc}

08005736 <__swrite>:
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	461f      	mov	r7, r3
 800573c:	898b      	ldrh	r3, [r1, #12]
 800573e:	05db      	lsls	r3, r3, #23
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	4616      	mov	r6, r2
 8005746:	d505      	bpl.n	8005754 <__swrite+0x1e>
 8005748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574c:	2302      	movs	r3, #2
 800574e:	2200      	movs	r2, #0
 8005750:	f000 fac0 	bl	8005cd4 <_lseek_r>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	4628      	mov	r0, r5
 8005766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576a:	f000 b869 	b.w	8005840 <_write_r>

0800576e <__sseek>:
 800576e:	b510      	push	{r4, lr}
 8005770:	460c      	mov	r4, r1
 8005772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005776:	f000 faad 	bl	8005cd4 <_lseek_r>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	bf15      	itete	ne
 8005780:	6560      	strne	r0, [r4, #84]	; 0x54
 8005782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800578a:	81a3      	strheq	r3, [r4, #12]
 800578c:	bf18      	it	ne
 800578e:	81a3      	strhne	r3, [r4, #12]
 8005790:	bd10      	pop	{r4, pc}

08005792 <__sclose>:
 8005792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005796:	f000 b8d3 	b.w	8005940 <_close_r>
	...

0800579c <__swbuf_r>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	460e      	mov	r6, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	4605      	mov	r5, r0
 80057a4:	b118      	cbz	r0, 80057ae <__swbuf_r+0x12>
 80057a6:	6983      	ldr	r3, [r0, #24]
 80057a8:	b90b      	cbnz	r3, 80057ae <__swbuf_r+0x12>
 80057aa:	f000 f9f3 	bl	8005b94 <__sinit>
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <__swbuf_r+0x98>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d12b      	bne.n	800580c <__swbuf_r+0x70>
 80057b4:	686c      	ldr	r4, [r5, #4]
 80057b6:	69a3      	ldr	r3, [r4, #24]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	071a      	lsls	r2, r3, #28
 80057be:	d52f      	bpl.n	8005820 <__swbuf_r+0x84>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b36b      	cbz	r3, 8005820 <__swbuf_r+0x84>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	1ac0      	subs	r0, r0, r3
 80057ca:	6963      	ldr	r3, [r4, #20]
 80057cc:	b2f6      	uxtb	r6, r6
 80057ce:	4283      	cmp	r3, r0
 80057d0:	4637      	mov	r7, r6
 80057d2:	dc04      	bgt.n	80057de <__swbuf_r+0x42>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 f948 	bl	8005a6c <_fflush_r>
 80057dc:	bb30      	cbnz	r0, 800582c <__swbuf_r+0x90>
 80057de:	68a3      	ldr	r3, [r4, #8]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	60a3      	str	r3, [r4, #8]
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	6022      	str	r2, [r4, #0]
 80057ea:	701e      	strb	r6, [r3, #0]
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	3001      	adds	r0, #1
 80057f0:	4283      	cmp	r3, r0
 80057f2:	d004      	beq.n	80057fe <__swbuf_r+0x62>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	07db      	lsls	r3, r3, #31
 80057f8:	d506      	bpl.n	8005808 <__swbuf_r+0x6c>
 80057fa:	2e0a      	cmp	r6, #10
 80057fc:	d104      	bne.n	8005808 <__swbuf_r+0x6c>
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f933 	bl	8005a6c <_fflush_r>
 8005806:	b988      	cbnz	r0, 800582c <__swbuf_r+0x90>
 8005808:	4638      	mov	r0, r7
 800580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <__swbuf_r+0x9c>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d101      	bne.n	8005816 <__swbuf_r+0x7a>
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	e7cf      	b.n	80057b6 <__swbuf_r+0x1a>
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <__swbuf_r+0xa0>)
 8005818:	429c      	cmp	r4, r3
 800581a:	bf08      	it	eq
 800581c:	68ec      	ldreq	r4, [r5, #12]
 800581e:	e7ca      	b.n	80057b6 <__swbuf_r+0x1a>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f81e 	bl	8005864 <__swsetup_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	d0cb      	beq.n	80057c4 <__swbuf_r+0x28>
 800582c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005830:	e7ea      	b.n	8005808 <__swbuf_r+0x6c>
 8005832:	bf00      	nop
 8005834:	080067a4 	.word	0x080067a4
 8005838:	080067c4 	.word	0x080067c4
 800583c:	08006784 	.word	0x08006784

08005840 <_write_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_write_r+0x20>)
 8005844:	4604      	mov	r4, r0
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	2200      	movs	r2, #0
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fb f9c3 	bl	8000bda <_write>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_write_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_write_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	20000904 	.word	0x20000904

08005864 <__swsetup_r>:
 8005864:	4b32      	ldr	r3, [pc, #200]	; (8005930 <__swsetup_r+0xcc>)
 8005866:	b570      	push	{r4, r5, r6, lr}
 8005868:	681d      	ldr	r5, [r3, #0]
 800586a:	4606      	mov	r6, r0
 800586c:	460c      	mov	r4, r1
 800586e:	b125      	cbz	r5, 800587a <__swsetup_r+0x16>
 8005870:	69ab      	ldr	r3, [r5, #24]
 8005872:	b913      	cbnz	r3, 800587a <__swsetup_r+0x16>
 8005874:	4628      	mov	r0, r5
 8005876:	f000 f98d 	bl	8005b94 <__sinit>
 800587a:	4b2e      	ldr	r3, [pc, #184]	; (8005934 <__swsetup_r+0xd0>)
 800587c:	429c      	cmp	r4, r3
 800587e:	d10f      	bne.n	80058a0 <__swsetup_r+0x3c>
 8005880:	686c      	ldr	r4, [r5, #4]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005888:	0719      	lsls	r1, r3, #28
 800588a:	d42c      	bmi.n	80058e6 <__swsetup_r+0x82>
 800588c:	06dd      	lsls	r5, r3, #27
 800588e:	d411      	bmi.n	80058b4 <__swsetup_r+0x50>
 8005890:	2309      	movs	r3, #9
 8005892:	6033      	str	r3, [r6, #0]
 8005894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800589e:	e03e      	b.n	800591e <__swsetup_r+0xba>
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <__swsetup_r+0xd4>)
 80058a2:	429c      	cmp	r4, r3
 80058a4:	d101      	bne.n	80058aa <__swsetup_r+0x46>
 80058a6:	68ac      	ldr	r4, [r5, #8]
 80058a8:	e7eb      	b.n	8005882 <__swsetup_r+0x1e>
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <__swsetup_r+0xd8>)
 80058ac:	429c      	cmp	r4, r3
 80058ae:	bf08      	it	eq
 80058b0:	68ec      	ldreq	r4, [r5, #12]
 80058b2:	e7e6      	b.n	8005882 <__swsetup_r+0x1e>
 80058b4:	0758      	lsls	r0, r3, #29
 80058b6:	d512      	bpl.n	80058de <__swsetup_r+0x7a>
 80058b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ba:	b141      	cbz	r1, 80058ce <__swsetup_r+0x6a>
 80058bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c0:	4299      	cmp	r1, r3
 80058c2:	d002      	beq.n	80058ca <__swsetup_r+0x66>
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7ff fda7 	bl	8005418 <_free_r>
 80058ca:	2300      	movs	r3, #0
 80058cc:	6363      	str	r3, [r4, #52]	; 0x34
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	2300      	movs	r3, #0
 80058d8:	6063      	str	r3, [r4, #4]
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f043 0308 	orr.w	r3, r3, #8
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	b94b      	cbnz	r3, 80058fe <__swsetup_r+0x9a>
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f4:	d003      	beq.n	80058fe <__swsetup_r+0x9a>
 80058f6:	4621      	mov	r1, r4
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fa23 	bl	8005d44 <__smakebuf_r>
 80058fe:	89a0      	ldrh	r0, [r4, #12]
 8005900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005904:	f010 0301 	ands.w	r3, r0, #1
 8005908:	d00a      	beq.n	8005920 <__swsetup_r+0xbc>
 800590a:	2300      	movs	r3, #0
 800590c:	60a3      	str	r3, [r4, #8]
 800590e:	6963      	ldr	r3, [r4, #20]
 8005910:	425b      	negs	r3, r3
 8005912:	61a3      	str	r3, [r4, #24]
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	b943      	cbnz	r3, 800592a <__swsetup_r+0xc6>
 8005918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800591c:	d1ba      	bne.n	8005894 <__swsetup_r+0x30>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	0781      	lsls	r1, r0, #30
 8005922:	bf58      	it	pl
 8005924:	6963      	ldrpl	r3, [r4, #20]
 8005926:	60a3      	str	r3, [r4, #8]
 8005928:	e7f4      	b.n	8005914 <__swsetup_r+0xb0>
 800592a:	2000      	movs	r0, #0
 800592c:	e7f7      	b.n	800591e <__swsetup_r+0xba>
 800592e:	bf00      	nop
 8005930:	20000038 	.word	0x20000038
 8005934:	080067a4 	.word	0x080067a4
 8005938:	080067c4 	.word	0x080067c4
 800593c:	08006784 	.word	0x08006784

08005940 <_close_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d06      	ldr	r5, [pc, #24]	; (800595c <_close_r+0x1c>)
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	f7fb f961 	bl	8000c12 <_close>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_close_r+0x1a>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_close_r+0x1a>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	20000904 	.word	0x20000904

08005960 <__sflush_r>:
 8005960:	898a      	ldrh	r2, [r1, #12]
 8005962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005966:	4605      	mov	r5, r0
 8005968:	0710      	lsls	r0, r2, #28
 800596a:	460c      	mov	r4, r1
 800596c:	d458      	bmi.n	8005a20 <__sflush_r+0xc0>
 800596e:	684b      	ldr	r3, [r1, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	dc05      	bgt.n	8005980 <__sflush_r+0x20>
 8005974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	dc02      	bgt.n	8005980 <__sflush_r+0x20>
 800597a:	2000      	movs	r0, #0
 800597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005982:	2e00      	cmp	r6, #0
 8005984:	d0f9      	beq.n	800597a <__sflush_r+0x1a>
 8005986:	2300      	movs	r3, #0
 8005988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800598c:	682f      	ldr	r7, [r5, #0]
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	d032      	beq.n	80059f8 <__sflush_r+0x98>
 8005992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	075a      	lsls	r2, r3, #29
 8005998:	d505      	bpl.n	80059a6 <__sflush_r+0x46>
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	1ac0      	subs	r0, r0, r3
 800599e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059a0:	b10b      	cbz	r3, 80059a6 <__sflush_r+0x46>
 80059a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059a4:	1ac0      	subs	r0, r0, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	4602      	mov	r2, r0
 80059aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ac:	6a21      	ldr	r1, [r4, #32]
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b0      	blx	r6
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	d106      	bne.n	80059c6 <__sflush_r+0x66>
 80059b8:	6829      	ldr	r1, [r5, #0]
 80059ba:	291d      	cmp	r1, #29
 80059bc:	d82c      	bhi.n	8005a18 <__sflush_r+0xb8>
 80059be:	4a2a      	ldr	r2, [pc, #168]	; (8005a68 <__sflush_r+0x108>)
 80059c0:	40ca      	lsrs	r2, r1
 80059c2:	07d6      	lsls	r6, r2, #31
 80059c4:	d528      	bpl.n	8005a18 <__sflush_r+0xb8>
 80059c6:	2200      	movs	r2, #0
 80059c8:	6062      	str	r2, [r4, #4]
 80059ca:	04d9      	lsls	r1, r3, #19
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	d504      	bpl.n	80059dc <__sflush_r+0x7c>
 80059d2:	1c42      	adds	r2, r0, #1
 80059d4:	d101      	bne.n	80059da <__sflush_r+0x7a>
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	b903      	cbnz	r3, 80059dc <__sflush_r+0x7c>
 80059da:	6560      	str	r0, [r4, #84]	; 0x54
 80059dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059de:	602f      	str	r7, [r5, #0]
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d0ca      	beq.n	800597a <__sflush_r+0x1a>
 80059e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <__sflush_r+0x92>
 80059ec:	4628      	mov	r0, r5
 80059ee:	f7ff fd13 	bl	8005418 <_free_r>
 80059f2:	2000      	movs	r0, #0
 80059f4:	6360      	str	r0, [r4, #52]	; 0x34
 80059f6:	e7c1      	b.n	800597c <__sflush_r+0x1c>
 80059f8:	6a21      	ldr	r1, [r4, #32]
 80059fa:	2301      	movs	r3, #1
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b0      	blx	r6
 8005a00:	1c41      	adds	r1, r0, #1
 8005a02:	d1c7      	bne.n	8005994 <__sflush_r+0x34>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0c4      	beq.n	8005994 <__sflush_r+0x34>
 8005a0a:	2b1d      	cmp	r3, #29
 8005a0c:	d001      	beq.n	8005a12 <__sflush_r+0xb2>
 8005a0e:	2b16      	cmp	r3, #22
 8005a10:	d101      	bne.n	8005a16 <__sflush_r+0xb6>
 8005a12:	602f      	str	r7, [r5, #0]
 8005a14:	e7b1      	b.n	800597a <__sflush_r+0x1a>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	e7ad      	b.n	800597c <__sflush_r+0x1c>
 8005a20:	690f      	ldr	r7, [r1, #16]
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	d0a9      	beq.n	800597a <__sflush_r+0x1a>
 8005a26:	0793      	lsls	r3, r2, #30
 8005a28:	680e      	ldr	r6, [r1, #0]
 8005a2a:	bf08      	it	eq
 8005a2c:	694b      	ldreq	r3, [r1, #20]
 8005a2e:	600f      	str	r7, [r1, #0]
 8005a30:	bf18      	it	ne
 8005a32:	2300      	movne	r3, #0
 8005a34:	eba6 0807 	sub.w	r8, r6, r7
 8005a38:	608b      	str	r3, [r1, #8]
 8005a3a:	f1b8 0f00 	cmp.w	r8, #0
 8005a3e:	dd9c      	ble.n	800597a <__sflush_r+0x1a>
 8005a40:	6a21      	ldr	r1, [r4, #32]
 8005a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a44:	4643      	mov	r3, r8
 8005a46:	463a      	mov	r2, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b0      	blx	r6
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	dc06      	bgt.n	8005a5e <__sflush_r+0xfe>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5c:	e78e      	b.n	800597c <__sflush_r+0x1c>
 8005a5e:	4407      	add	r7, r0
 8005a60:	eba8 0800 	sub.w	r8, r8, r0
 8005a64:	e7e9      	b.n	8005a3a <__sflush_r+0xda>
 8005a66:	bf00      	nop
 8005a68:	20400001 	.word	0x20400001

08005a6c <_fflush_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	4605      	mov	r5, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	b913      	cbnz	r3, 8005a7c <_fflush_r+0x10>
 8005a76:	2500      	movs	r5, #0
 8005a78:	4628      	mov	r0, r5
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	b118      	cbz	r0, 8005a86 <_fflush_r+0x1a>
 8005a7e:	6983      	ldr	r3, [r0, #24]
 8005a80:	b90b      	cbnz	r3, 8005a86 <_fflush_r+0x1a>
 8005a82:	f000 f887 	bl	8005b94 <__sinit>
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <_fflush_r+0x6c>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	d11b      	bne.n	8005ac4 <_fflush_r+0x58>
 8005a8c:	686c      	ldr	r4, [r5, #4]
 8005a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ef      	beq.n	8005a76 <_fflush_r+0xa>
 8005a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a98:	07d0      	lsls	r0, r2, #31
 8005a9a:	d404      	bmi.n	8005aa6 <_fflush_r+0x3a>
 8005a9c:	0599      	lsls	r1, r3, #22
 8005a9e:	d402      	bmi.n	8005aa6 <_fflush_r+0x3a>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa2:	f000 f915 	bl	8005cd0 <__retarget_lock_acquire_recursive>
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7ff ff59 	bl	8005960 <__sflush_r>
 8005aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ab0:	07da      	lsls	r2, r3, #31
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	d4e0      	bmi.n	8005a78 <_fflush_r+0xc>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	059b      	lsls	r3, r3, #22
 8005aba:	d4dd      	bmi.n	8005a78 <_fflush_r+0xc>
 8005abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005abe:	f000 f908 	bl	8005cd2 <__retarget_lock_release_recursive>
 8005ac2:	e7d9      	b.n	8005a78 <_fflush_r+0xc>
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <_fflush_r+0x70>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	d101      	bne.n	8005ace <_fflush_r+0x62>
 8005aca:	68ac      	ldr	r4, [r5, #8]
 8005acc:	e7df      	b.n	8005a8e <_fflush_r+0x22>
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <_fflush_r+0x74>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	bf08      	it	eq
 8005ad4:	68ec      	ldreq	r4, [r5, #12]
 8005ad6:	e7da      	b.n	8005a8e <_fflush_r+0x22>
 8005ad8:	080067a4 	.word	0x080067a4
 8005adc:	080067c4 	.word	0x080067c4
 8005ae0:	08006784 	.word	0x08006784

08005ae4 <std>:
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	e9c0 3300 	strd	r3, r3, [r0]
 8005aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005af2:	6083      	str	r3, [r0, #8]
 8005af4:	8181      	strh	r1, [r0, #12]
 8005af6:	6643      	str	r3, [r0, #100]	; 0x64
 8005af8:	81c2      	strh	r2, [r0, #14]
 8005afa:	6183      	str	r3, [r0, #24]
 8005afc:	4619      	mov	r1, r3
 8005afe:	2208      	movs	r2, #8
 8005b00:	305c      	adds	r0, #92	; 0x5c
 8005b02:	f7ff fc81 	bl	8005408 <memset>
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <std+0x38>)
 8005b08:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <std+0x3c>)
 8005b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <std+0x40>)
 8005b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <std+0x44>)
 8005b14:	6224      	str	r4, [r4, #32]
 8005b16:	6323      	str	r3, [r4, #48]	; 0x30
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08005715 	.word	0x08005715
 8005b20:	08005737 	.word	0x08005737
 8005b24:	0800576f 	.word	0x0800576f
 8005b28:	08005793 	.word	0x08005793

08005b2c <_cleanup_r>:
 8005b2c:	4901      	ldr	r1, [pc, #4]	; (8005b34 <_cleanup_r+0x8>)
 8005b2e:	f000 b8af 	b.w	8005c90 <_fwalk_reent>
 8005b32:	bf00      	nop
 8005b34:	08005a6d 	.word	0x08005a6d

08005b38 <__sfmoreglue>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	2268      	movs	r2, #104	; 0x68
 8005b3c:	1e4d      	subs	r5, r1, #1
 8005b3e:	4355      	muls	r5, r2
 8005b40:	460e      	mov	r6, r1
 8005b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b46:	f7ff fcd3 	bl	80054f0 <_malloc_r>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	b140      	cbz	r0, 8005b60 <__sfmoreglue+0x28>
 8005b4e:	2100      	movs	r1, #0
 8005b50:	e9c0 1600 	strd	r1, r6, [r0]
 8005b54:	300c      	adds	r0, #12
 8005b56:	60a0      	str	r0, [r4, #8]
 8005b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b5c:	f7ff fc54 	bl	8005408 <memset>
 8005b60:	4620      	mov	r0, r4
 8005b62:	bd70      	pop	{r4, r5, r6, pc}

08005b64 <__sfp_lock_acquire>:
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <__sfp_lock_acquire+0x8>)
 8005b66:	f000 b8b3 	b.w	8005cd0 <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000901 	.word	0x20000901

08005b70 <__sfp_lock_release>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__sfp_lock_release+0x8>)
 8005b72:	f000 b8ae 	b.w	8005cd2 <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000901 	.word	0x20000901

08005b7c <__sinit_lock_acquire>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__sinit_lock_acquire+0x8>)
 8005b7e:	f000 b8a7 	b.w	8005cd0 <__retarget_lock_acquire_recursive>
 8005b82:	bf00      	nop
 8005b84:	20000902 	.word	0x20000902

08005b88 <__sinit_lock_release>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__sinit_lock_release+0x8>)
 8005b8a:	f000 b8a2 	b.w	8005cd2 <__retarget_lock_release_recursive>
 8005b8e:	bf00      	nop
 8005b90:	20000902 	.word	0x20000902

08005b94 <__sinit>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4604      	mov	r4, r0
 8005b98:	f7ff fff0 	bl	8005b7c <__sinit_lock_acquire>
 8005b9c:	69a3      	ldr	r3, [r4, #24]
 8005b9e:	b11b      	cbz	r3, 8005ba8 <__sinit+0x14>
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f7ff bff0 	b.w	8005b88 <__sinit_lock_release>
 8005ba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bac:	6523      	str	r3, [r4, #80]	; 0x50
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <__sinit+0x68>)
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <__sinit+0x6c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bb6:	42a3      	cmp	r3, r4
 8005bb8:	bf04      	itt	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	61a3      	streq	r3, [r4, #24]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f820 	bl	8005c04 <__sfp>
 8005bc4:	6060      	str	r0, [r4, #4]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f81c 	bl	8005c04 <__sfp>
 8005bcc:	60a0      	str	r0, [r4, #8]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 f818 	bl	8005c04 <__sfp>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	60e0      	str	r0, [r4, #12]
 8005bd8:	2104      	movs	r1, #4
 8005bda:	6860      	ldr	r0, [r4, #4]
 8005bdc:	f7ff ff82 	bl	8005ae4 <std>
 8005be0:	68a0      	ldr	r0, [r4, #8]
 8005be2:	2201      	movs	r2, #1
 8005be4:	2109      	movs	r1, #9
 8005be6:	f7ff ff7d 	bl	8005ae4 <std>
 8005bea:	68e0      	ldr	r0, [r4, #12]
 8005bec:	2202      	movs	r2, #2
 8005bee:	2112      	movs	r1, #18
 8005bf0:	f7ff ff78 	bl	8005ae4 <std>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	61a3      	str	r3, [r4, #24]
 8005bf8:	e7d2      	b.n	8005ba0 <__sinit+0xc>
 8005bfa:	bf00      	nop
 8005bfc:	08006780 	.word	0x08006780
 8005c00:	08005b2d 	.word	0x08005b2d

08005c04 <__sfp>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	4607      	mov	r7, r0
 8005c08:	f7ff ffac 	bl	8005b64 <__sfp_lock_acquire>
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <__sfp+0x84>)
 8005c0e:	681e      	ldr	r6, [r3, #0]
 8005c10:	69b3      	ldr	r3, [r6, #24]
 8005c12:	b913      	cbnz	r3, 8005c1a <__sfp+0x16>
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff ffbd 	bl	8005b94 <__sinit>
 8005c1a:	3648      	adds	r6, #72	; 0x48
 8005c1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	d503      	bpl.n	8005c2c <__sfp+0x28>
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	b30b      	cbz	r3, 8005c6c <__sfp+0x68>
 8005c28:	6836      	ldr	r6, [r6, #0]
 8005c2a:	e7f7      	b.n	8005c1c <__sfp+0x18>
 8005c2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c30:	b9d5      	cbnz	r5, 8005c68 <__sfp+0x64>
 8005c32:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <__sfp+0x88>)
 8005c34:	60e3      	str	r3, [r4, #12]
 8005c36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c3a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c3c:	f000 f847 	bl	8005cce <__retarget_lock_init_recursive>
 8005c40:	f7ff ff96 	bl	8005b70 <__sfp_lock_release>
 8005c44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c4c:	6025      	str	r5, [r4, #0]
 8005c4e:	61a5      	str	r5, [r4, #24]
 8005c50:	2208      	movs	r2, #8
 8005c52:	4629      	mov	r1, r5
 8005c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c58:	f7ff fbd6 	bl	8005408 <memset>
 8005c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c64:	4620      	mov	r0, r4
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	3468      	adds	r4, #104	; 0x68
 8005c6a:	e7d9      	b.n	8005c20 <__sfp+0x1c>
 8005c6c:	2104      	movs	r1, #4
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f7ff ff62 	bl	8005b38 <__sfmoreglue>
 8005c74:	4604      	mov	r4, r0
 8005c76:	6030      	str	r0, [r6, #0]
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d1d5      	bne.n	8005c28 <__sfp+0x24>
 8005c7c:	f7ff ff78 	bl	8005b70 <__sfp_lock_release>
 8005c80:	230c      	movs	r3, #12
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	e7ee      	b.n	8005c64 <__sfp+0x60>
 8005c86:	bf00      	nop
 8005c88:	08006780 	.word	0x08006780
 8005c8c:	ffff0001 	.word	0xffff0001

08005c90 <_fwalk_reent>:
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4606      	mov	r6, r0
 8005c96:	4688      	mov	r8, r1
 8005c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c9c:	2700      	movs	r7, #0
 8005c9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca6:	d505      	bpl.n	8005cb4 <_fwalk_reent+0x24>
 8005ca8:	6824      	ldr	r4, [r4, #0]
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	d1f7      	bne.n	8005c9e <_fwalk_reent+0xe>
 8005cae:	4638      	mov	r0, r7
 8005cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb4:	89ab      	ldrh	r3, [r5, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d907      	bls.n	8005cca <_fwalk_reent+0x3a>
 8005cba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	d003      	beq.n	8005cca <_fwalk_reent+0x3a>
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	47c0      	blx	r8
 8005cc8:	4307      	orrs	r7, r0
 8005cca:	3568      	adds	r5, #104	; 0x68
 8005ccc:	e7e9      	b.n	8005ca2 <_fwalk_reent+0x12>

08005cce <__retarget_lock_init_recursive>:
 8005cce:	4770      	bx	lr

08005cd0 <__retarget_lock_acquire_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_release_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <_lseek_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_lseek_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fa ffbc 	bl	8000c60 <_lseek>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_lseek_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_lseek_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000904 	.word	0x20000904

08005cf8 <__swhatbuf_r>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	460e      	mov	r6, r1
 8005cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d00:	2900      	cmp	r1, #0
 8005d02:	b096      	sub	sp, #88	; 0x58
 8005d04:	4614      	mov	r4, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	da08      	bge.n	8005d1c <__swhatbuf_r+0x24>
 8005d0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	061a      	lsls	r2, r3, #24
 8005d14:	d410      	bmi.n	8005d38 <__swhatbuf_r+0x40>
 8005d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d1a:	e00e      	b.n	8005d3a <__swhatbuf_r+0x42>
 8005d1c:	466a      	mov	r2, sp
 8005d1e:	f000 fb5d 	bl	80063dc <_fstat_r>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	dbf1      	blt.n	8005d0a <__swhatbuf_r+0x12>
 8005d26:	9a01      	ldr	r2, [sp, #4]
 8005d28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d30:	425a      	negs	r2, r3
 8005d32:	415a      	adcs	r2, r3
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	e7ee      	b.n	8005d16 <__swhatbuf_r+0x1e>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	b016      	add	sp, #88	; 0x58
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d44 <__smakebuf_r>:
 8005d44:	898b      	ldrh	r3, [r1, #12]
 8005d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d48:	079d      	lsls	r5, r3, #30
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	d507      	bpl.n	8005d60 <__smakebuf_r+0x1c>
 8005d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	6163      	str	r3, [r4, #20]
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	ab01      	add	r3, sp, #4
 8005d62:	466a      	mov	r2, sp
 8005d64:	f7ff ffc8 	bl	8005cf8 <__swhatbuf_r>
 8005d68:	9900      	ldr	r1, [sp, #0]
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff fbbf 	bl	80054f0 <_malloc_r>
 8005d72:	b948      	cbnz	r0, 8005d88 <__smakebuf_r+0x44>
 8005d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d78:	059a      	lsls	r2, r3, #22
 8005d7a:	d4ef      	bmi.n	8005d5c <__smakebuf_r+0x18>
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	e7e3      	b.n	8005d50 <__smakebuf_r+0xc>
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <__smakebuf_r+0x7c>)
 8005d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	6020      	str	r0, [r4, #0]
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	9b00      	ldr	r3, [sp, #0]
 8005d98:	6163      	str	r3, [r4, #20]
 8005d9a:	9b01      	ldr	r3, [sp, #4]
 8005d9c:	6120      	str	r0, [r4, #16]
 8005d9e:	b15b      	cbz	r3, 8005db8 <__smakebuf_r+0x74>
 8005da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da4:	4630      	mov	r0, r6
 8005da6:	f000 fb2b 	bl	8006400 <_isatty_r>
 8005daa:	b128      	cbz	r0, 8005db8 <__smakebuf_r+0x74>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	89a0      	ldrh	r0, [r4, #12]
 8005dba:	4305      	orrs	r5, r0
 8005dbc:	81a5      	strh	r5, [r4, #12]
 8005dbe:	e7cd      	b.n	8005d5c <__smakebuf_r+0x18>
 8005dc0:	08005b2d 	.word	0x08005b2d

08005dc4 <__malloc_lock>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__malloc_lock+0x8>)
 8005dc6:	f7ff bf83 	b.w	8005cd0 <__retarget_lock_acquire_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000900 	.word	0x20000900

08005dd0 <__malloc_unlock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_unlock+0x8>)
 8005dd2:	f7ff bf7e 	b.w	8005cd2 <__retarget_lock_release_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000900 	.word	0x20000900

08005ddc <__sfputc_r>:
 8005ddc:	6893      	ldr	r3, [r2, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	b410      	push	{r4}
 8005de4:	6093      	str	r3, [r2, #8]
 8005de6:	da08      	bge.n	8005dfa <__sfputc_r+0x1e>
 8005de8:	6994      	ldr	r4, [r2, #24]
 8005dea:	42a3      	cmp	r3, r4
 8005dec:	db01      	blt.n	8005df2 <__sfputc_r+0x16>
 8005dee:	290a      	cmp	r1, #10
 8005df0:	d103      	bne.n	8005dfa <__sfputc_r+0x1e>
 8005df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df6:	f7ff bcd1 	b.w	800579c <__swbuf_r>
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	1c58      	adds	r0, r3, #1
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	7019      	strb	r1, [r3, #0]
 8005e02:	4608      	mov	r0, r1
 8005e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <__sfputs_r>:
 8005e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	18d5      	adds	r5, r2, r3
 8005e14:	42ac      	cmp	r4, r5
 8005e16:	d101      	bne.n	8005e1c <__sfputs_r+0x12>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e007      	b.n	8005e2c <__sfputs_r+0x22>
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	463a      	mov	r2, r7
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ffda 	bl	8005ddc <__sfputc_r>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d1f3      	bne.n	8005e14 <__sfputs_r+0xa>
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e30 <_vfiprintf_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	460d      	mov	r5, r1
 8005e36:	b09d      	sub	sp, #116	; 0x74
 8005e38:	4614      	mov	r4, r2
 8005e3a:	4698      	mov	r8, r3
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	b118      	cbz	r0, 8005e48 <_vfiprintf_r+0x18>
 8005e40:	6983      	ldr	r3, [r0, #24]
 8005e42:	b90b      	cbnz	r3, 8005e48 <_vfiprintf_r+0x18>
 8005e44:	f7ff fea6 	bl	8005b94 <__sinit>
 8005e48:	4b89      	ldr	r3, [pc, #548]	; (8006070 <_vfiprintf_r+0x240>)
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	d11b      	bne.n	8005e86 <_vfiprintf_r+0x56>
 8005e4e:	6875      	ldr	r5, [r6, #4]
 8005e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x32>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x32>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5e:	f7ff ff37 	bl	8005cd0 <__retarget_lock_acquire_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	071b      	lsls	r3, r3, #28
 8005e66:	d501      	bpl.n	8005e6c <_vfiprintf_r+0x3c>
 8005e68:	692b      	ldr	r3, [r5, #16]
 8005e6a:	b9eb      	cbnz	r3, 8005ea8 <_vfiprintf_r+0x78>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff fcf8 	bl	8005864 <__swsetup_r>
 8005e74:	b1c0      	cbz	r0, 8005ea8 <_vfiprintf_r+0x78>
 8005e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e78:	07dc      	lsls	r4, r3, #31
 8005e7a:	d50e      	bpl.n	8005e9a <_vfiprintf_r+0x6a>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e80:	b01d      	add	sp, #116	; 0x74
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	4b7b      	ldr	r3, [pc, #492]	; (8006074 <_vfiprintf_r+0x244>)
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	d101      	bne.n	8005e90 <_vfiprintf_r+0x60>
 8005e8c:	68b5      	ldr	r5, [r6, #8]
 8005e8e:	e7df      	b.n	8005e50 <_vfiprintf_r+0x20>
 8005e90:	4b79      	ldr	r3, [pc, #484]	; (8006078 <_vfiprintf_r+0x248>)
 8005e92:	429d      	cmp	r5, r3
 8005e94:	bf08      	it	eq
 8005e96:	68f5      	ldreq	r5, [r6, #12]
 8005e98:	e7da      	b.n	8005e50 <_vfiprintf_r+0x20>
 8005e9a:	89ab      	ldrh	r3, [r5, #12]
 8005e9c:	0598      	lsls	r0, r3, #22
 8005e9e:	d4ed      	bmi.n	8005e7c <_vfiprintf_r+0x4c>
 8005ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ea2:	f7ff ff16 	bl	8005cd2 <__retarget_lock_release_recursive>
 8005ea6:	e7e9      	b.n	8005e7c <_vfiprintf_r+0x4c>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005eac:	2320      	movs	r3, #32
 8005eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb6:	2330      	movs	r3, #48	; 0x30
 8005eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800607c <_vfiprintf_r+0x24c>
 8005ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec0:	f04f 0901 	mov.w	r9, #1
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	469a      	mov	sl, r3
 8005ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ecc:	b10a      	cbz	r2, 8005ed2 <_vfiprintf_r+0xa2>
 8005ece:	2a25      	cmp	r2, #37	; 0x25
 8005ed0:	d1f9      	bne.n	8005ec6 <_vfiprintf_r+0x96>
 8005ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed6:	d00b      	beq.n	8005ef0 <_vfiprintf_r+0xc0>
 8005ed8:	465b      	mov	r3, fp
 8005eda:	4622      	mov	r2, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff ff93 	bl	8005e0a <__sfputs_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f000 80aa 	beq.w	800603e <_vfiprintf_r+0x20e>
 8005eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eec:	445a      	add	r2, fp
 8005eee:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80a2 	beq.w	800603e <_vfiprintf_r+0x20e>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f04:	f10a 0a01 	add.w	sl, sl, #1
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	9307      	str	r3, [sp, #28]
 8005f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f10:	931a      	str	r3, [sp, #104]	; 0x68
 8005f12:	4654      	mov	r4, sl
 8005f14:	2205      	movs	r2, #5
 8005f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1a:	4858      	ldr	r0, [pc, #352]	; (800607c <_vfiprintf_r+0x24c>)
 8005f1c:	f7fa f978 	bl	8000210 <memchr>
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	b9d8      	cbnz	r0, 8005f5c <_vfiprintf_r+0x12c>
 8005f24:	06d1      	lsls	r1, r2, #27
 8005f26:	bf44      	itt	mi
 8005f28:	2320      	movmi	r3, #32
 8005f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f2e:	0713      	lsls	r3, r2, #28
 8005f30:	bf44      	itt	mi
 8005f32:	232b      	movmi	r3, #43	; 0x2b
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f38:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3e:	d015      	beq.n	8005f6c <_vfiprintf_r+0x13c>
 8005f40:	9a07      	ldr	r2, [sp, #28]
 8005f42:	4654      	mov	r4, sl
 8005f44:	2000      	movs	r0, #0
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f50:	3b30      	subs	r3, #48	; 0x30
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d94e      	bls.n	8005ff4 <_vfiprintf_r+0x1c4>
 8005f56:	b1b0      	cbz	r0, 8005f86 <_vfiprintf_r+0x156>
 8005f58:	9207      	str	r2, [sp, #28]
 8005f5a:	e014      	b.n	8005f86 <_vfiprintf_r+0x156>
 8005f5c:	eba0 0308 	sub.w	r3, r0, r8
 8005f60:	fa09 f303 	lsl.w	r3, r9, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	46a2      	mov	sl, r4
 8005f6a:	e7d2      	b.n	8005f12 <_vfiprintf_r+0xe2>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	1d19      	adds	r1, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	9103      	str	r1, [sp, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfbb      	ittet	lt
 8005f78:	425b      	neglt	r3, r3
 8005f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005f7e:	9307      	strge	r3, [sp, #28]
 8005f80:	9307      	strlt	r3, [sp, #28]
 8005f82:	bfb8      	it	lt
 8005f84:	9204      	strlt	r2, [sp, #16]
 8005f86:	7823      	ldrb	r3, [r4, #0]
 8005f88:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8a:	d10c      	bne.n	8005fa6 <_vfiprintf_r+0x176>
 8005f8c:	7863      	ldrb	r3, [r4, #1]
 8005f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f90:	d135      	bne.n	8005ffe <_vfiprintf_r+0x1ce>
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	9203      	str	r2, [sp, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfb8      	it	lt
 8005f9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fa2:	3402      	adds	r4, #2
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800608c <_vfiprintf_r+0x25c>
 8005faa:	7821      	ldrb	r1, [r4, #0]
 8005fac:	2203      	movs	r2, #3
 8005fae:	4650      	mov	r0, sl
 8005fb0:	f7fa f92e 	bl	8000210 <memchr>
 8005fb4:	b140      	cbz	r0, 8005fc8 <_vfiprintf_r+0x198>
 8005fb6:	2340      	movs	r3, #64	; 0x40
 8005fb8:	eba0 000a 	sub.w	r0, r0, sl
 8005fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	4303      	orrs	r3, r0
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fcc:	482c      	ldr	r0, [pc, #176]	; (8006080 <_vfiprintf_r+0x250>)
 8005fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd2:	2206      	movs	r2, #6
 8005fd4:	f7fa f91c 	bl	8000210 <memchr>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d03f      	beq.n	800605c <_vfiprintf_r+0x22c>
 8005fdc:	4b29      	ldr	r3, [pc, #164]	; (8006084 <_vfiprintf_r+0x254>)
 8005fde:	bb1b      	cbnz	r3, 8006028 <_vfiprintf_r+0x1f8>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	3307      	adds	r3, #7
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	3308      	adds	r3, #8
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fee:	443b      	add	r3, r7
 8005ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff2:	e767      	b.n	8005ec4 <_vfiprintf_r+0x94>
 8005ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7a5      	b.n	8005f4a <_vfiprintf_r+0x11a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	3401      	adds	r4, #1
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	4619      	mov	r1, r3
 8006006:	f04f 0c0a 	mov.w	ip, #10
 800600a:	4620      	mov	r0, r4
 800600c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006010:	3a30      	subs	r2, #48	; 0x30
 8006012:	2a09      	cmp	r2, #9
 8006014:	d903      	bls.n	800601e <_vfiprintf_r+0x1ee>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0c5      	beq.n	8005fa6 <_vfiprintf_r+0x176>
 800601a:	9105      	str	r1, [sp, #20]
 800601c:	e7c3      	b.n	8005fa6 <_vfiprintf_r+0x176>
 800601e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006022:	4604      	mov	r4, r0
 8006024:	2301      	movs	r3, #1
 8006026:	e7f0      	b.n	800600a <_vfiprintf_r+0x1da>
 8006028:	ab03      	add	r3, sp, #12
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	462a      	mov	r2, r5
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <_vfiprintf_r+0x258>)
 8006030:	a904      	add	r1, sp, #16
 8006032:	4630      	mov	r0, r6
 8006034:	f3af 8000 	nop.w
 8006038:	4607      	mov	r7, r0
 800603a:	1c78      	adds	r0, r7, #1
 800603c:	d1d6      	bne.n	8005fec <_vfiprintf_r+0x1bc>
 800603e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006040:	07d9      	lsls	r1, r3, #31
 8006042:	d405      	bmi.n	8006050 <_vfiprintf_r+0x220>
 8006044:	89ab      	ldrh	r3, [r5, #12]
 8006046:	059a      	lsls	r2, r3, #22
 8006048:	d402      	bmi.n	8006050 <_vfiprintf_r+0x220>
 800604a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604c:	f7ff fe41 	bl	8005cd2 <__retarget_lock_release_recursive>
 8006050:	89ab      	ldrh	r3, [r5, #12]
 8006052:	065b      	lsls	r3, r3, #25
 8006054:	f53f af12 	bmi.w	8005e7c <_vfiprintf_r+0x4c>
 8006058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800605a:	e711      	b.n	8005e80 <_vfiprintf_r+0x50>
 800605c:	ab03      	add	r3, sp, #12
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	462a      	mov	r2, r5
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <_vfiprintf_r+0x258>)
 8006064:	a904      	add	r1, sp, #16
 8006066:	4630      	mov	r0, r6
 8006068:	f000 f880 	bl	800616c <_printf_i>
 800606c:	e7e4      	b.n	8006038 <_vfiprintf_r+0x208>
 800606e:	bf00      	nop
 8006070:	080067a4 	.word	0x080067a4
 8006074:	080067c4 	.word	0x080067c4
 8006078:	08006784 	.word	0x08006784
 800607c:	080067e4 	.word	0x080067e4
 8006080:	080067ee 	.word	0x080067ee
 8006084:	00000000 	.word	0x00000000
 8006088:	08005e0b 	.word	0x08005e0b
 800608c:	080067ea 	.word	0x080067ea

08006090 <_printf_common>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	4699      	mov	r9, r3
 8006098:	688a      	ldr	r2, [r1, #8]
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfb8      	it	lt
 80060a4:	4613      	movlt	r3, r2
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b10a      	cbz	r2, 80060b6 <_printf_common+0x26>
 80060b2:	3301      	adds	r3, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	0699      	lsls	r1, r3, #26
 80060ba:	bf42      	ittt	mi
 80060bc:	6833      	ldrmi	r3, [r6, #0]
 80060be:	3302      	addmi	r3, #2
 80060c0:	6033      	strmi	r3, [r6, #0]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d106      	bne.n	80060d8 <_printf_common+0x48>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dc26      	bgt.n	8006126 <_printf_common+0x96>
 80060d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060dc:	1e13      	subs	r3, r2, #0
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	0692      	lsls	r2, r2, #26
 80060e6:	d42b      	bmi.n	8006140 <_printf_common+0xb0>
 80060e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d01e      	beq.n	8006134 <_printf_common+0xa4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	68e5      	ldr	r5, [r4, #12]
 80060fa:	6832      	ldr	r2, [r6, #0]
 80060fc:	f003 0306 	and.w	r3, r3, #6
 8006100:	2b04      	cmp	r3, #4
 8006102:	bf08      	it	eq
 8006104:	1aad      	subeq	r5, r5, r2
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	6922      	ldr	r2, [r4, #16]
 800610a:	bf0c      	ite	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	2500      	movne	r5, #0
 8006112:	4293      	cmp	r3, r2
 8006114:	bfc4      	itt	gt
 8006116:	1a9b      	subgt	r3, r3, r2
 8006118:	18ed      	addgt	r5, r5, r3
 800611a:	2600      	movs	r6, #0
 800611c:	341a      	adds	r4, #26
 800611e:	42b5      	cmp	r5, r6
 8006120:	d11a      	bne.n	8006158 <_printf_common+0xc8>
 8006122:	2000      	movs	r0, #0
 8006124:	e008      	b.n	8006138 <_printf_common+0xa8>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4649      	mov	r1, r9
 800612c:	4638      	mov	r0, r7
 800612e:	47c0      	blx	r8
 8006130:	3001      	adds	r0, #1
 8006132:	d103      	bne.n	800613c <_printf_common+0xac>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	3501      	adds	r5, #1
 800613e:	e7c6      	b.n	80060ce <_printf_common+0x3e>
 8006140:	18e1      	adds	r1, r4, r3
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	2030      	movs	r0, #48	; 0x30
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614a:	4422      	add	r2, r4
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006154:	3302      	adds	r3, #2
 8006156:	e7c7      	b.n	80060e8 <_printf_common+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	4622      	mov	r2, r4
 800615c:	4649      	mov	r1, r9
 800615e:	4638      	mov	r0, r7
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa4>
 8006166:	3601      	adds	r6, #1
 8006168:	e7d9      	b.n	800611e <_printf_common+0x8e>
	...

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4691      	mov	r9, r2
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	469a      	mov	sl, r3
 800617e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	; 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d8 	beq.w	800633e <_printf_i+0x1d2>
 800618e:	2f58      	cmp	r7, #88	; 0x58
 8006190:	f000 80a3 	beq.w	80062da <_printf_i+0x16e>
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	; (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	08006325 	.word	0x08006325
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006307 	.word	0x08006307
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	08006347 	.word	0x08006347
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006249 	.word	0x08006249
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	0800630f 	.word	0x0800630f
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e0a3      	b.n	8006360 <_printf_i+0x1f4>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	6829      	ldr	r1, [r5, #0]
 800621c:	0606      	lsls	r6, r0, #24
 800621e:	f101 0304 	add.w	r3, r1, #4
 8006222:	d50a      	bpl.n	800623a <_printf_i+0xce>
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	2e00      	cmp	r6, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xc8>
 800622c:	232d      	movs	r3, #45	; 0x2d
 800622e:	4276      	negs	r6, r6
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	485e      	ldr	r0, [pc, #376]	; (80063b0 <_printf_i+0x244>)
 8006236:	230a      	movs	r3, #10
 8006238:	e019      	b.n	800626e <_printf_i+0x102>
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006242:	bf18      	it	ne
 8006244:	b236      	sxthne	r6, r6
 8006246:	e7ef      	b.n	8006228 <_printf_i+0xbc>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	6029      	str	r1, [r5, #0]
 8006250:	0601      	lsls	r1, r0, #24
 8006252:	d501      	bpl.n	8006258 <_printf_i+0xec>
 8006254:	681e      	ldr	r6, [r3, #0]
 8006256:	e002      	b.n	800625e <_printf_i+0xf2>
 8006258:	0646      	lsls	r6, r0, #25
 800625a:	d5fb      	bpl.n	8006254 <_printf_i+0xe8>
 800625c:	881e      	ldrh	r6, [r3, #0]
 800625e:	4854      	ldr	r0, [pc, #336]	; (80063b0 <_printf_i+0x244>)
 8006260:	2f6f      	cmp	r7, #111	; 0x6f
 8006262:	bf0c      	ite	eq
 8006264:	2308      	moveq	r3, #8
 8006266:	230a      	movne	r3, #10
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626e:	6865      	ldr	r5, [r4, #4]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	2d00      	cmp	r5, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90e      	cbnz	r6, 8006284 <_printf_i+0x118>
 8006280:	2d00      	cmp	r5, #0
 8006282:	d04d      	beq.n	8006320 <_printf_i+0x1b4>
 8006284:	4615      	mov	r5, r2
 8006286:	fbb6 f1f3 	udiv	r1, r6, r3
 800628a:	fb03 6711 	mls	r7, r3, r1, r6
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006294:	4637      	mov	r7, r6
 8006296:	42bb      	cmp	r3, r7
 8006298:	460e      	mov	r6, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x11a>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x14c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07de      	lsls	r6, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x14c>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	; 0x30
 80062b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062b8:	1b52      	subs	r2, r2, r5
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee2 	bl	8006090 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14c      	bne.n	800636a <_printf_i+0x1fe>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	4835      	ldr	r0, [pc, #212]	; (80063b0 <_printf_i+0x244>)
 80062dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e0:	6829      	ldr	r1, [r5, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062e8:	6029      	str	r1, [r5, #0]
 80062ea:	061d      	lsls	r5, r3, #24
 80062ec:	d514      	bpl.n	8006318 <_printf_i+0x1ac>
 80062ee:	07df      	lsls	r7, r3, #31
 80062f0:	bf44      	itt	mi
 80062f2:	f043 0320 	orrmi.w	r3, r3, #32
 80062f6:	6023      	strmi	r3, [r4, #0]
 80062f8:	b91e      	cbnz	r6, 8006302 <_printf_i+0x196>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f023 0320 	bic.w	r3, r3, #32
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	2310      	movs	r3, #16
 8006304:	e7b0      	b.n	8006268 <_printf_i+0xfc>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	2378      	movs	r3, #120	; 0x78
 8006310:	4828      	ldr	r0, [pc, #160]	; (80063b4 <_printf_i+0x248>)
 8006312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006316:	e7e3      	b.n	80062e0 <_printf_i+0x174>
 8006318:	0659      	lsls	r1, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2b6      	uxthmi	r6, r6
 800631e:	e7e6      	b.n	80062ee <_printf_i+0x182>
 8006320:	4615      	mov	r5, r2
 8006322:	e7bb      	b.n	800629c <_printf_i+0x130>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	6826      	ldr	r6, [r4, #0]
 8006328:	6961      	ldr	r1, [r4, #20]
 800632a:	1d18      	adds	r0, r3, #4
 800632c:	6028      	str	r0, [r5, #0]
 800632e:	0635      	lsls	r5, r6, #24
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	d501      	bpl.n	8006338 <_printf_i+0x1cc>
 8006334:	6019      	str	r1, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0x1d2>
 8006338:	0670      	lsls	r0, r6, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0x1c8>
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4615      	mov	r5, r2
 8006344:	e7ba      	b.n	80062bc <_printf_i+0x150>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	4628      	mov	r0, r5
 8006354:	f7f9 ff5c 	bl	8000210 <memchr>
 8006358:	b108      	cbz	r0, 800635e <_printf_i+0x1f2>
 800635a:	1b40      	subs	r0, r0, r5
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	e7a8      	b.n	80062bc <_printf_i+0x150>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	462a      	mov	r2, r5
 800636e:	4649      	mov	r1, r9
 8006370:	4640      	mov	r0, r8
 8006372:	47d0      	blx	sl
 8006374:	3001      	adds	r0, #1
 8006376:	d0ab      	beq.n	80062d0 <_printf_i+0x164>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d413      	bmi.n	80063a6 <_printf_i+0x23a>
 800637e:	68e0      	ldr	r0, [r4, #12]
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	4298      	cmp	r0, r3
 8006384:	bfb8      	it	lt
 8006386:	4618      	movlt	r0, r3
 8006388:	e7a4      	b.n	80062d4 <_printf_i+0x168>
 800638a:	2301      	movs	r3, #1
 800638c:	4632      	mov	r2, r6
 800638e:	4649      	mov	r1, r9
 8006390:	4640      	mov	r0, r8
 8006392:	47d0      	blx	sl
 8006394:	3001      	adds	r0, #1
 8006396:	d09b      	beq.n	80062d0 <_printf_i+0x164>
 8006398:	3501      	adds	r5, #1
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	9903      	ldr	r1, [sp, #12]
 800639e:	1a5b      	subs	r3, r3, r1
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dcf2      	bgt.n	800638a <_printf_i+0x21e>
 80063a4:	e7eb      	b.n	800637e <_printf_i+0x212>
 80063a6:	2500      	movs	r5, #0
 80063a8:	f104 0619 	add.w	r6, r4, #25
 80063ac:	e7f5      	b.n	800639a <_printf_i+0x22e>
 80063ae:	bf00      	nop
 80063b0:	080067f5 	.word	0x080067f5
 80063b4:	08006806 	.word	0x08006806

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_read_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fa fbea 	bl	8000ba0 <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000904 	.word	0x20000904

080063dc <_fstat_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_fstat_r+0x20>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	f7fa fc1e 	bl	8000c2a <_fstat>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d102      	bne.n	80063f8 <_fstat_r+0x1c>
 80063f2:	682b      	ldr	r3, [r5, #0]
 80063f4:	b103      	cbz	r3, 80063f8 <_fstat_r+0x1c>
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	bd38      	pop	{r3, r4, r5, pc}
 80063fa:	bf00      	nop
 80063fc:	20000904 	.word	0x20000904

08006400 <_isatty_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d06      	ldr	r5, [pc, #24]	; (800641c <_isatty_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fa fc1d 	bl	8000c4a <_isatty>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_isatty_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_isatty_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000904 	.word	0x20000904

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
