
NUCLEO-F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d6c  08005d6c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d74  08005d74  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000090c  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00018000  200009a8  200009a8  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2c5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002815  00000000  00000000  0002d391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025773  00000000  00000000  000312f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcc0  00000000  00000000  00056a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc0f2  00000000  00000000  0006672b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014281d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037a8  00000000  00000000  00142870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005974 	.word	0x08005974

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	08005974 	.word	0x08005974

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	2201      	movs	r2, #1
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <__io_putchar+0x20>)
 80005a4:	f001 fc87 	bl	8001eb6 <HAL_UART_Transmit>

  return ch;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000908 	.word	0x20000908

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  wiz_NetInfo net_info =
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x40>)
 80005c0:	463c      	mov	r4, r7
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005cc:	6020      	str	r0, [r4, #0]
 80005ce:	3404      	adds	r4, #4
 80005d0:	8021      	strh	r1, [r4, #0]
 80005d2:	3402      	adds	r4, #2
 80005d4:	0c0b      	lsrs	r3, r1, #16
 80005d6:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fba8 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f922 	bl	8000828 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f87a 	bl	80006dc <MX_USART3_UART_Init>
  MX_FMC_Init();
 80005e8:	f000 f8a2 	bl	8000730 <MX_FMC_Init>
#endif /* APP_SNTP */
#ifdef APP_TCP_CLIENT_OVER_SSL
  tcp_client_over_ssl_demo(&net_info);
#endif /* APP_TCP_CLIENT_OVER_SSL */
#ifdef APP_LOOPBACK
  loopback_demo(&net_info);
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f8e4 	bl	80027bc <loopback_demo>
// ----------------------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x3c>
 80005f6:	bf00      	nop
 80005f8:	0800598c 	.word	0x0800598c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f9a6 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <SystemClock_Config+0xd8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <SystemClock_Config+0xd8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xd8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <SystemClock_Config+0xdc>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xdc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000670:	23b4      	movs	r3, #180	; 0xb4
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f000 feeb 	bl	800145c <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f964 	bl	8000958 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000690:	f000 fe94 	bl	80013bc <HAL_PWREx_EnableOverDrive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800069a:	f000 f95d 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f945 	bl	800194c <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006c8:	f000 f946 	bl	8000958 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f001 fb82 	bl	8001e1c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f91b 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000908 	.word	0x20000908
 800072c:	40004800 	.word	0x40004800

08000730 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_FMC_Init+0xf0>)
 800074a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800074e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <MX_FMC_Init+0xf0>)
 8000752:	4a34      	ldr	r2, [pc, #208]	; (8000824 <MX_FMC_Init+0xf4>)
 8000754:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_FMC_Init+0xf0>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <MX_FMC_Init+0xf0>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <MX_FMC_Init+0xf0>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_FMC_Init+0xf0>)
 800076a:	2210      	movs	r2, #16
 800076c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <MX_FMC_Init+0xf0>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_FMC_Init+0xf0>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_FMC_Init+0xf0>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_FMC_Init+0xf0>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_FMC_Init+0xf0>)
 8000788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_FMC_Init+0xf0>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_FMC_Init+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_FMC_Init+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_FMC_Init+0xf0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_FMC_Init+0xf0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_FMC_Init+0xf0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80007b2:	230f      	movs	r3, #15
 80007b4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80007ba:	23ff      	movs	r3, #255	; 0xff
 80007bc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80007be:	230f      	movs	r3, #15
 80007c0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80007c2:	2310      	movs	r3, #16
 80007c4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80007c6:	2311      	movs	r3, #17
 80007c8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <MX_FMC_Init+0xf0>)
 80007d6:	f001 fad9 	bl	8001d8c <HAL_SRAM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80007e0:	f000 f8ba 	bl	8000958 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  // overwrite
  Timing.AddressSetupTime = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 80007ec:	2306      	movs	r3, #6
 80007ee:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_FMC_Init+0xf0>)
 8000808:	f001 fac0 	bl	8001d8c <HAL_SRAM_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_FMC_Init+0xe6>
  {
    Error_Handler();
 8000812:	f000 f8a1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000094c 	.word	0x2000094c
 8000824:	a0000104 	.word	0xa0000104

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <MX_GPIO_Init+0x124>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a41      	ldr	r2, [pc, #260]	; (800094c <MX_GPIO_Init+0x124>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <MX_GPIO_Init+0x124>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x124>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a3a      	ldr	r2, [pc, #232]	; (800094c <MX_GPIO_Init+0x124>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_GPIO_Init+0x124>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_GPIO_Init+0x124>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <MX_GPIO_Init+0x124>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_GPIO_Init+0x124>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0x124>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	; (800094c <MX_GPIO_Init+0x124>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0x124>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0x124>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <MX_GPIO_Init+0x124>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_GPIO_Init+0x124>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_GPIO_Init+0x124>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <MX_GPIO_Init+0x124>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0x124>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_GPIO_Init+0x128>)
 80008ee:	f000 fd4b 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 80008f2:	233c      	movs	r3, #60	; 0x3c
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_GPIO_Init+0x12c>)
 8000906:	f000 fb93 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_INT_Pin */
  GPIO_InitStruct.Pin = W5x00_INT_Pin;
 800090a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5x00_INT_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x128>)
 8000920:	f000 fb86 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8000924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x128>)
 800093e:	f000 fb77 	bl	8001030 <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800
 8000954:	40021000 	.word	0x40021000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a20:	2307      	movs	r3, #7
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_UART_MspInit+0x8c>)
 8000a2c:	f000 fb00 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800

08000a44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_FMC_MspInit+0xa8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d141      	bne.n	8000ae4 <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_FMC_MspInit+0xa8>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_FMC_MspInit+0xac>)
 8000a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6e:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <HAL_FMC_MspInit+0xac>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6393      	str	r3, [r2, #56]	; 0x38
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_FMC_MspInit+0xac>)
 8000a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a82:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000a86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a94:	230c      	movs	r3, #12
 8000a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4815      	ldr	r0, [pc, #84]	; (8000af4 <HAL_FMC_MspInit+0xb0>)
 8000a9e:	f000 fac7 	bl	8001030 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000aa2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000aa6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <HAL_FMC_MspInit+0xb4>)
 8000abe:	f000 fab7 	bl	8001030 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000ac2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000ac6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <HAL_FMC_MspInit+0xb8>)
 8000ade:	f000 faa7 	bl	8001030 <HAL_GPIO_Init>
 8000ae2:	e000      	b.n	8000ae6 <HAL_FMC_MspInit+0xa2>
    return;
 8000ae4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000b8 	.word	0x200000b8
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40021400 	.word	0x40021400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020c00 	.word	0x40020c00

08000b00 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b08:	f7ff ff9c 	bl	8000a44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f936 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000b64:	f000 fa5d 	bl	8001022 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7e:	f3af 8000 	nop.w
 8000b82:	4601      	mov	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
  }

  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e009      	b.n	8000bcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fce7 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf1      	blt.n	8000bb8 <_write+0x12>
  }
  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:

int _close(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_isatty>:

int _isatty(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f003 fe46 	bl	8004908 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20030000 	.word	0x20030000
 8000ca8:	00008000 	.word	0x00008000
 8000cac:	200000bc 	.word	0x200000bc
 8000cb0:	200009a8 	.word	0x200009a8

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cde:	f000 f813 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f003 fe17 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc67 	bl	80005b8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000cf8:	08005d7c 	.word	0x08005d7c
  ldr r2, =_sbss
 8000cfc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000d00:	200009a8 	.word	0x200009a8

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f931 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fe00 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f93b 	bl	800100a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f000 f911 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	2000099c 	.word	0x2000099c

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000099c 	.word	0x2000099c

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff5c 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb0 	bl	8000f78 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001026:	f003 fc27 	bl	8004878 <HAL_SYSTICK_Callback>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e177      	b.n	800133c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8166 	bne.w	8001336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80c0 	beq.w	8001336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a61      	ldr	r2, [pc, #388]	; (8001358 <HAL_GPIO_Init+0x328>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <HAL_GPIO_Init+0x32c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d037      	beq.n	800126e <HAL_GPIO_Init+0x23e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d031      	beq.n	800126a <HAL_GPIO_Init+0x23a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a56      	ldr	r2, [pc, #344]	; (8001364 <HAL_GPIO_Init+0x334>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x236>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a55      	ldr	r2, [pc, #340]	; (8001368 <HAL_GPIO_Init+0x338>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x232>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a54      	ldr	r2, [pc, #336]	; (800136c <HAL_GPIO_Init+0x33c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x22e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a53      	ldr	r2, [pc, #332]	; (8001370 <HAL_GPIO_Init+0x340>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x22a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x344>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <HAL_GPIO_Init+0x348>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x34c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x350>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x21a>
 8001246:	2309      	movs	r3, #9
 8001248:	e012      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800124a:	230a      	movs	r3, #10
 800124c:	e010      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800124e:	2308      	movs	r3, #8
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001252:	2307      	movs	r3, #7
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x240>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x240>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x328>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_GPIO_Init+0x354>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x354>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_GPIO_Init+0x354>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae84 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40022000 	.word	0x40022000
 8001380:	40022400 	.word	0x40022400
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_PWREx_EnableOverDrive+0x94>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fd06 	bl	8000df8 <HAL_GetTick>
 80013ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ee:	e009      	b.n	8001404 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f0:	f7ff fd02 	bl	8000df8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fe:	d901      	bls.n	8001404 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e01f      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d1ee      	bne.n	80013f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fcee 	bl	8000df8 <HAL_GetTick>
 800141c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800141e:	e009      	b.n	8001434 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001420:	f7ff fcea 	bl	8000df8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142e:	d901      	bls.n	8001434 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e007      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001440:	d1ee      	bne.n	8001420 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	420e0040 	.word	0x420e0040
 8001454:	40007000 	.word	0x40007000
 8001458:	420e0044 	.word	0x420e0044

0800145c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e267      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d075      	beq.n	8001566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d00c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d112      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001492:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800149e:	d10b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d05b      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d157      	bne.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e242      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d106      	bne.n	80014d0 <HAL_RCC_OscConfig+0x74>
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a75      	ldr	r2, [pc, #468]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x98>
 80014da:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6c      	ldr	r2, [pc, #432]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a68      	ldr	r2, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc70 	bl	8000df8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc6c 	bl	8000df8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e207      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xc0>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc5c 	bl	8000df8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc58 	bl	8000df8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1f3      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0xe8>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c7      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e03a      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fc11 	bl	8000df8 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fc0d 	bl	8000df8 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a8      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4925      	ldr	r1, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fbf0 	bl	8000df8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fbec 	bl	8000df8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e187      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d016      	beq.n	800167c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fbd0 	bl	8000df8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fbcc 	bl	8000df8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e167      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x200>
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fbb9 	bl	8000df8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	e00e      	b.n	80016a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fbb5 	bl	8000df8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d907      	bls.n	80016a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e150      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 800169c:	40023800 	.word	0x40023800
 80016a0:	42470000 	.word	0x42470000
 80016a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ea      	bne.n	800168a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8097 	beq.w	80017f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a73      	ldr	r2, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fb75 	bl	8000df8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fb71 	bl	8000df8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e10c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x2ea>
 8001738:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x30c>
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a5e      	ldr	r2, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a54      	ldr	r2, [pc, #336]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fb36 	bl	8000df8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fb32 	bl	8000df8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0cb      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ee      	beq.n	8001790 <HAL_RCC_OscConfig+0x334>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fb20 	bl	8000df8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fb1c 	bl	8000df8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0b5      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ee      	bne.n	80017bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a38      	ldr	r2, [pc, #224]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a1 	beq.w	800193c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d05c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d141      	bne.n	8001892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff faf0 	bl	8000df8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff faec 	bl	8000df8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e087      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	491b      	ldr	r1, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fac5 	bl	8000df8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff fac1 	bl	8000df8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e05c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x416>
 8001890:	e054      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff faae 	bl	8000df8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff faaa 	bl	8000df8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e045      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x444>
 80018be:	e03d      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e038      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000
 80018d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x4ec>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d028      	beq.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d121      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d11a      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	3b01      	subs	r3, #1
 8001922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f9dc 	bl	8000df8 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff f9d8 	bl	8000df8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f93c 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08005cbc 	.word	0x08005cbc
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b094      	sub	sp, #80	; 0x50
 8001b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b28:	2300      	movs	r3, #0
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b30:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d00d      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	f200 80e1 	bhi.w	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x34>
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4a:	e0db      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b50:	e0db      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b56:	e0d8      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	2200      	movs	r2, #0
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	462b      	mov	r3, r5
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	0159      	lsls	r1, r3, #5
 8001b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9c:	0150      	lsls	r0, r2, #5
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	1a51      	subs	r1, r2, r1
 8001ba6:	6139      	str	r1, [r7, #16]
 8001ba8:	4629      	mov	r1, r5
 8001baa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	018b      	lsls	r3, r1, #6
 8001bc0:	4651      	mov	r1, sl
 8001bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	018a      	lsls	r2, r1, #6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bea:	4690      	mov	r8, r2
 8001bec:	4699      	mov	r9, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	eb18 0303 	adds.w	r3, r8, r3
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	eb49 0303 	adc.w	r3, r9, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	024b      	lsls	r3, r1, #9
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c14:	4621      	mov	r1, r4
 8001c16:	024a      	lsls	r2, r1, #9
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c28:	f7fe fb32 	bl	8000290 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	e058      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4611      	mov	r1, r2
 8001c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c50:	4642      	mov	r2, r8
 8001c52:	464b      	mov	r3, r9
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0159      	lsls	r1, r3, #5
 8001c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c62:	0150      	lsls	r0, r2, #5
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4641      	mov	r1, r8
 8001c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c6e:	4649      	mov	r1, r9
 8001c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c88:	ebb2 040a 	subs.w	r4, r2, sl
 8001c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	00eb      	lsls	r3, r5, #3
 8001c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c9e:	00e2      	lsls	r2, r4, #3
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	18e3      	adds	r3, r4, r3
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	464b      	mov	r3, r9
 8001cac:	eb45 0303 	adc.w	r3, r5, r3
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	028b      	lsls	r3, r1, #10
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc8:	4621      	mov	r1, r4
 8001cca:	028a      	lsls	r2, r1, #10
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	61fa      	str	r2, [r7, #28]
 8001cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cdc:	f7fe fad8 	bl	8000290 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3750      	adds	r7, #80	; 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08005ccc 	.word	0x08005ccc

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffdc 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4903      	ldr	r1, [pc, #12]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08005ccc 	.word	0x08005ccc

08001d8c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e038      	b.n	8001e14 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe fea2 	bl	8000b00 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 fbea 	bl	80025a0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	f000 fc68 	bl	80026ac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6858      	ldr	r0, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	f000 fcaf 	bl	800274c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	6892      	ldr	r2, [r2, #8]
 8001df6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6892      	ldr	r2, [r2, #8]
 8001e02:	f041 0101 	orr.w	r1, r1, #1
 8001e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e03f      	b.n	8001eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fdb6 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f929 	bl	80020b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d17c      	bne.n	8001fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_UART_Transmit+0x2c>
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e075      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_UART_Transmit+0x3e>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e06e      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2221      	movs	r2, #33	; 0x21
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe ff75 	bl	8000df8 <HAL_GetTick>
 8001f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f24:	d108      	bne.n	8001f38 <HAL_UART_Transmit+0x82>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e003      	b.n	8001f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f48:	e02a      	b.n	8001fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f840 	bl	8001fda <UART_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e036      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e007      	b.n	8001f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1cf      	bne.n	8001f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2140      	movs	r1, #64	; 0x40
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f810 	bl	8001fda <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b090      	sub	sp, #64	; 0x40
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fea:	e050      	b.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff2:	d04c      	beq.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <UART_WaitOnFlagUntilTimeout+0x30>
 8001ffa:	f7fe fefd 	bl	8000df8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002006:	429a      	cmp	r2, r3
 8002008:	d241      	bcs.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800202a:	637a      	str	r2, [r7, #52]	; 0x34
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3314      	adds	r3, #20
 8002044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	613b      	str	r3, [r7, #16]
   return(result);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205e:	623a      	str	r2, [r7, #32]
 8002060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	61bb      	str	r3, [r7, #24]
   return(result);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e5      	bne.n	800203e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e00f      	b.n	80020ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d09f      	beq.n	8001fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b0c0      	sub	sp, #256	; 0x100
 80020be:	af00      	add	r7, sp, #0
 80020c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	ea40 0301 	orr.w	r3, r0, r1
 80020e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002110:	f021 010c 	bic.w	r1, r1, #12
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800211e:	430b      	orrs	r3, r1
 8002120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	6999      	ldr	r1, [r3, #24]
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	ea40 0301 	orr.w	r3, r0, r1
 800213e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <UART_SetConfig+0x2cc>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d005      	beq.n	8002158 <UART_SetConfig+0xa0>
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <UART_SetConfig+0x2d0>)
 8002154:	429a      	cmp	r2, r3
 8002156:	d104      	bne.n	8002162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002158:	f7ff fe04 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 800215c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002160:	e003      	b.n	800216a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fdeb 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8002166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002174:	f040 810c 	bne.w	8002390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217c:	2200      	movs	r2, #0
 800217e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	1891      	adds	r1, r2, r2
 8002190:	65b9      	str	r1, [r7, #88]	; 0x58
 8002192:	415b      	adcs	r3, r3
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800219a:	4621      	mov	r1, r4
 800219c:	eb12 0801 	adds.w	r8, r2, r1
 80021a0:	4629      	mov	r1, r5
 80021a2:	eb43 0901 	adc.w	r9, r3, r1
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ba:	4690      	mov	r8, r2
 80021bc:	4699      	mov	r9, r3
 80021be:	4623      	mov	r3, r4
 80021c0:	eb18 0303 	adds.w	r3, r8, r3
 80021c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021c8:	462b      	mov	r3, r5
 80021ca:	eb49 0303 	adc.w	r3, r9, r3
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021e6:	460b      	mov	r3, r1
 80021e8:	18db      	adds	r3, r3, r3
 80021ea:	653b      	str	r3, [r7, #80]	; 0x50
 80021ec:	4613      	mov	r3, r2
 80021ee:	eb42 0303 	adc.w	r3, r2, r3
 80021f2:	657b      	str	r3, [r7, #84]	; 0x54
 80021f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021fc:	f7fe f848 	bl	8000290 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <UART_SetConfig+0x2d4>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	011c      	lsls	r4, r3, #4
 800220e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002212:	2200      	movs	r2, #0
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800221c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002220:	4642      	mov	r2, r8
 8002222:	464b      	mov	r3, r9
 8002224:	1891      	adds	r1, r2, r2
 8002226:	64b9      	str	r1, [r7, #72]	; 0x48
 8002228:	415b      	adcs	r3, r3
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800222c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002230:	4641      	mov	r1, r8
 8002232:	eb12 0a01 	adds.w	sl, r2, r1
 8002236:	4649      	mov	r1, r9
 8002238:	eb43 0b01 	adc.w	fp, r3, r1
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800224c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002250:	4692      	mov	sl, r2
 8002252:	469b      	mov	fp, r3
 8002254:	4643      	mov	r3, r8
 8002256:	eb1a 0303 	adds.w	r3, sl, r3
 800225a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800225e:	464b      	mov	r3, r9
 8002260:	eb4b 0303 	adc.w	r3, fp, r3
 8002264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800227c:	460b      	mov	r3, r1
 800227e:	18db      	adds	r3, r3, r3
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
 8002282:	4613      	mov	r3, r2
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
 800228a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800228e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002292:	f7fd fffd 	bl	8000290 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4611      	mov	r1, r2
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <UART_SetConfig+0x2d4>)
 800229e:	fba3 2301 	umull	r2, r3, r3, r1
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2264      	movs	r2, #100	; 0x64
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	1acb      	subs	r3, r1, r3
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <UART_SetConfig+0x2d4>)
 80022b4:	fba3 2302 	umull	r2, r3, r3, r2
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c0:	441c      	add	r4, r3
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	63b9      	str	r1, [r7, #56]	; 0x38
 80022dc:	415b      	adcs	r3, r3
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022e4:	4641      	mov	r1, r8
 80022e6:	1851      	adds	r1, r2, r1
 80022e8:	6339      	str	r1, [r7, #48]	; 0x30
 80022ea:	4649      	mov	r1, r9
 80022ec:	414b      	adcs	r3, r1
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022fc:	4659      	mov	r1, fp
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4651      	mov	r1, sl
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4642      	mov	r2, r8
 8002312:	189b      	adds	r3, r3, r2
 8002314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002318:	464b      	mov	r3, r9
 800231a:	460a      	mov	r2, r1
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002338:	460b      	mov	r3, r1
 800233a:	18db      	adds	r3, r3, r3
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	4613      	mov	r3, r2
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800234e:	f7fd ff9f 	bl	8000290 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <UART_SetConfig+0x2d4>)
 8002358:	fba3 1302 	umull	r1, r3, r3, r2
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	2164      	movs	r1, #100	; 0x64
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	3332      	adds	r3, #50	; 0x32
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <UART_SetConfig+0x2d4>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4422      	add	r2, r4
 800237e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002380:	e105      	b.n	800258e <UART_SetConfig+0x4d6>
 8002382:	bf00      	nop
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002394:	2200      	movs	r2, #0
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800239a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800239e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023a2:	4642      	mov	r2, r8
 80023a4:	464b      	mov	r3, r9
 80023a6:	1891      	adds	r1, r2, r2
 80023a8:	6239      	str	r1, [r7, #32]
 80023aa:	415b      	adcs	r3, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023b2:	4641      	mov	r1, r8
 80023b4:	1854      	adds	r4, r2, r1
 80023b6:	4649      	mov	r1, r9
 80023b8:	eb43 0501 	adc.w	r5, r3, r1
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	00eb      	lsls	r3, r5, #3
 80023c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ca:	00e2      	lsls	r2, r4, #3
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	4643      	mov	r3, r8
 80023d2:	18e3      	adds	r3, r4, r3
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023d8:	464b      	mov	r3, r9
 80023da:	eb45 0303 	adc.w	r3, r5, r3
 80023de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023fe:	4629      	mov	r1, r5
 8002400:	008b      	lsls	r3, r1, #2
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002408:	4621      	mov	r1, r4
 800240a:	008a      	lsls	r2, r1, #2
 800240c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002410:	f7fd ff3e 	bl	8000290 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <UART_SetConfig+0x4e4>)
 800241a:	fba3 2302 	umull	r2, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	011c      	lsls	r4, r3, #4
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800242c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002434:	4642      	mov	r2, r8
 8002436:	464b      	mov	r3, r9
 8002438:	1891      	adds	r1, r2, r2
 800243a:	61b9      	str	r1, [r7, #24]
 800243c:	415b      	adcs	r3, r3
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002444:	4641      	mov	r1, r8
 8002446:	1851      	adds	r1, r2, r1
 8002448:	6139      	str	r1, [r7, #16]
 800244a:	4649      	mov	r1, r9
 800244c:	414b      	adcs	r3, r1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800245c:	4659      	mov	r1, fp
 800245e:	00cb      	lsls	r3, r1, #3
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002466:	4651      	mov	r1, sl
 8002468:	00ca      	lsls	r2, r1, #3
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	4603      	mov	r3, r0
 8002470:	4642      	mov	r2, r8
 8002472:	189b      	adds	r3, r3, r2
 8002474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	67bb      	str	r3, [r7, #120]	; 0x78
 800248e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800249c:	4649      	mov	r1, r9
 800249e:	008b      	lsls	r3, r1, #2
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a6:	4641      	mov	r1, r8
 80024a8:	008a      	lsls	r2, r1, #2
 80024aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024ae:	f7fd feef 	bl	8000290 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <UART_SetConfig+0x4e4>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	2164      	movs	r1, #100	; 0x64
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	3332      	adds	r3, #50	; 0x32
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <UART_SetConfig+0x4e4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d6:	441c      	add	r4, r3
 80024d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024dc:	2200      	movs	r2, #0
 80024de:	673b      	str	r3, [r7, #112]	; 0x70
 80024e0:	677a      	str	r2, [r7, #116]	; 0x74
 80024e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	415b      	adcs	r3, r3
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f6:	4641      	mov	r1, r8
 80024f8:	1851      	adds	r1, r2, r1
 80024fa:	6039      	str	r1, [r7, #0]
 80024fc:	4649      	mov	r1, r9
 80024fe:	414b      	adcs	r3, r1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800250e:	4659      	mov	r1, fp
 8002510:	00cb      	lsls	r3, r1, #3
 8002512:	4651      	mov	r1, sl
 8002514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002518:	4651      	mov	r1, sl
 800251a:	00ca      	lsls	r2, r1, #3
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	4603      	mov	r3, r0
 8002522:	4642      	mov	r2, r8
 8002524:	189b      	adds	r3, r3, r2
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
 8002528:	464b      	mov	r3, r9
 800252a:	460a      	mov	r2, r1
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	663b      	str	r3, [r7, #96]	; 0x60
 800253c:	667a      	str	r2, [r7, #100]	; 0x64
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800254a:	4649      	mov	r1, r9
 800254c:	008b      	lsls	r3, r1, #2
 800254e:	4641      	mov	r1, r8
 8002550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002554:	4641      	mov	r1, r8
 8002556:	008a      	lsls	r2, r1, #2
 8002558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800255c:	f7fd fe98 	bl	8000290 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <UART_SetConfig+0x4e4>)
 8002566:	fba3 1302 	umull	r1, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2164      	movs	r1, #100	; 0x64
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	3332      	adds	r3, #50	; 0x32
 8002578:	4a08      	ldr	r2, [pc, #32]	; (800259c <UART_SetConfig+0x4e4>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4422      	add	r2, r4
 800258c:	609a      	str	r2, [r3, #8]
}
 800258e:	bf00      	nop
 8002590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002594:	46bd      	mov	sp, r7
 8002596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259a:	bf00      	nop
 800259c:	51eb851f 	.word	0x51eb851f

080025a0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f023 0101 	bic.w	r1, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d102      	bne.n	80025d0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e001      	b.n	80025d4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80025e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80025e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80025ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80025f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80025f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80025fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002604:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800260a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002610:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <FMC_NORSRAM_Init+0x108>)
 800263a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002642:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264a:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002652:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43db      	mvns	r3, r3
 8002662:	ea02 0103 	and.w	r1, r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4319      	orrs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267c:	d10c      	bne.n	8002698 <FMC_NORSRAM_Init+0xf8>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	0008fb7f 	.word	0x0008fb7f

080026ac <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	431a      	orrs	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	431a      	orrs	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	3b02      	subs	r3, #2
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	3201      	adds	r2, #1
 8002700:	4319      	orrs	r1, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002714:	d113      	bne.n	800273e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800271e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	3b01      	subs	r3, #1
 8002726:	051b      	lsls	r3, r3, #20
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002760:	d11d      	bne.n	800279e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800276c:	4013      	ands	r3, r2
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	6852      	ldr	r2, [r2, #4]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	4311      	orrs	r1, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	4311      	orrs	r1, r2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	6992      	ldr	r2, [r2, #24]
 8002786:	4311      	orrs	r1, r2
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	68d2      	ldr	r2, [r2, #12]
 800278c:	0412      	lsls	r2, r2, #16
 800278e:	430a      	orrs	r2, r1
 8002790:	ea43 0102 	orr.w	r1, r3, r2
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800279c:	e005      	b.n	80027aa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	cff00000 	.word	0xcff00000

080027bc <loopback_demo>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void loopback_demo(wiz_NetInfo *net_info)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  int retval = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

  wizchip_network_initialize(net_info);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 ffa6 	bl	800471a <wizchip_network_initialize>
  wizchip_network_information(net_info);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f001 ffb6 	bl	8004740 <wizchip_network_information>

  /* Infinite loop */
  while (1)
  {
    // Run TCP server loopback
    if ((retval = loopback_tcps(SOCKET_LOOPBACK, g_loopback_buf, PORT_LOOPBACK)) < 0)
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4906      	ldr	r1, [pc, #24]	; (80027f4 <loopback_demo+0x38>)
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f80e 	bl	80027fc <loopback_tcps>
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	daf5      	bge.n	80027d4 <loopback_demo+0x18>
    {
      printf(" Loopback error : %d\n", retval);
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	4803      	ldr	r0, [pc, #12]	; (80027f8 <loopback_demo+0x3c>)
 80027ec:	f002 f99e 	bl	8004b2c <iprintf>

      while (1)
 80027f0:	e7fe      	b.n	80027f0 <loopback_demo+0x34>
 80027f2:	bf00      	nop
 80027f4:	200000c0 	.word	0x200000c0
 80027f8:	080059a4 	.word	0x080059a4

080027fc <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af04      	add	r7, sp, #16
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
 8002808:	4613      	mov	r3, r2
 800280a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 800280c:	2300      	movs	r3, #0
 800280e:	82fb      	strh	r3, [r7, #22]
 8002810:	2300      	movs	r3, #0
 8002812:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	3308      	adds	r3, #8
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	3308      	adds	r3, #8
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f93f 	bl	8002aa0 <WIZCHIP_READ>
 8002822:	4603      	mov	r3, r0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b1c      	cmp	r3, #28
 8002828:	f200 810a 	bhi.w	8002a40 <loopback_tcps+0x244>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <loopback_tcps+0x38>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002a25 	.word	0x08002a25
 8002838:	08002a41 	.word	0x08002a41
 800283c:	08002a41 	.word	0x08002a41
 8002840:	08002a41 	.word	0x08002a41
 8002844:	08002a41 	.word	0x08002a41
 8002848:	08002a41 	.word	0x08002a41
 800284c:	08002a41 	.word	0x08002a41
 8002850:	08002a41 	.word	0x08002a41
 8002854:	08002a41 	.word	0x08002a41
 8002858:	08002a41 	.word	0x08002a41
 800285c:	08002a41 	.word	0x08002a41
 8002860:	08002a41 	.word	0x08002a41
 8002864:	08002a41 	.word	0x08002a41
 8002868:	08002a41 	.word	0x08002a41
 800286c:	08002a41 	.word	0x08002a41
 8002870:	08002a41 	.word	0x08002a41
 8002874:	08002a41 	.word	0x08002a41
 8002878:	08002a41 	.word	0x08002a41
 800287c:	08002a41 	.word	0x08002a41
 8002880:	08002a03 	.word	0x08002a03
 8002884:	08002a41 	.word	0x08002a41
 8002888:	08002a41 	.word	0x08002a41
 800288c:	08002a41 	.word	0x08002a41
 8002890:	080028a9 	.word	0x080028a9
 8002894:	08002a41 	.word	0x08002a41
 8002898:	08002a41 	.word	0x08002a41
 800289c:	08002a41 	.word	0x08002a41
 80028a0:	08002a41 	.word	0x08002a41
 80028a4:	080029e1 	.word	0x080029e1
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	3308      	adds	r3, #8
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	3306      	adds	r3, #6
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f8f5 	bl	8002aa0 <WIZCHIP_READ>
 80028b6:	4603      	mov	r3, r0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04e      	beq.n	8002960 <loopback_tcps+0x164>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	3308      	adds	r3, #8
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	3314      	adds	r3, #20
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f8e8 	bl	8002aa0 <WIZCHIP_READ>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	723b      	strb	r3, [r7, #8]
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	3308      	adds	r3, #8
 80028de:	019b      	lsls	r3, r3, #6
 80028e0:	3314      	adds	r3, #20
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f8dc 	bl	8002aa0 <WIZCHIP_READ>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	727b      	strb	r3, [r7, #9]
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	3308      	adds	r3, #8
 80028f2:	019b      	lsls	r3, r3, #6
 80028f4:	3316      	adds	r3, #22
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8d2 	bl	8002aa0 <WIZCHIP_READ>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	72bb      	strb	r3, [r7, #10]
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	3308      	adds	r3, #8
 800290a:	019b      	lsls	r3, r3, #6
 800290c:	3316      	adds	r3, #22
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8c6 	bl	8002aa0 <WIZCHIP_READ>
 8002914:	4603      	mov	r3, r0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	3308      	adds	r3, #8
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	3312      	adds	r3, #18
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f8bc 	bl	8002aa0 <WIZCHIP_READ>
 8002928:	4603      	mov	r3, r0
 800292a:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 800292c:	79f9      	ldrb	r1, [r7, #7]
 800292e:	7a3b      	ldrb	r3, [r7, #8]
 8002930:	461c      	mov	r4, r3
 8002932:	7a7b      	ldrb	r3, [r7, #9]
 8002934:	461d      	mov	r5, r3
 8002936:	7abb      	ldrb	r3, [r7, #10]
 8002938:	461a      	mov	r2, r3
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	4618      	mov	r0, r3
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	9001      	str	r0, [sp, #4]
 8002944:	9200      	str	r2, [sp, #0]
 8002946:	462b      	mov	r3, r5
 8002948:	4622      	mov	r2, r4
 800294a:	4843      	ldr	r0, [pc, #268]	; (8002a58 <loopback_tcps+0x25c>)
 800294c:	f002 f8ee 	bl	8004b2c <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	3308      	adds	r3, #8
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	3306      	adds	r3, #6
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f882 	bl	8002a64 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f99c 	bl	8002ca0 <getSn_RX_RSR>
 8002968:	4603      	mov	r3, r0
 800296a:	82fb      	strh	r3, [r7, #22]
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d068      	beq.n	8002a44 <loopback_tcps+0x248>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8002972:	8afb      	ldrh	r3, [r7, #22]
 8002974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002978:	d902      	bls.n	8002980 <loopback_tcps+0x184>
 800297a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800297e:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 8002980:	8afa      	ldrh	r2, [r7, #22]
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fdca 	bl	8003520 <recv>
 800298c:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	dc01      	bgt.n	8002998 <loopback_tcps+0x19c>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	e05b      	b.n	8002a50 <loopback_tcps+0x254>
			size = (uint16_t) ret;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 80029a0:	e019      	b.n	80029d6 <loopback_tcps+0x1da>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 80029a2:	8abb      	ldrh	r3, [r7, #20]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	18d1      	adds	r1, r2, r3
 80029a8:	8afa      	ldrh	r2, [r7, #22]
 80029aa:	8abb      	ldrh	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fcb8 	bl	8003328 <send>
 80029b8:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da05      	bge.n	80029cc <loopback_tcps+0x1d0>
				{
					close(sn);
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fb2e 	bl	8003024 <close>
					return ret;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	e041      	b.n	8002a50 <loopback_tcps+0x254>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	8abb      	ldrh	r3, [r7, #20]
 80029d2:	4413      	add	r3, r2
 80029d4:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 80029d6:	8afa      	ldrh	r2, [r7, #22]
 80029d8:	8abb      	ldrh	r3, [r7, #20]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d1e1      	bne.n	80029a2 <loopback_tcps+0x1a6>
			}
         }
         break;
 80029de:	e031      	b.n	8002a44 <loopback_tcps+0x248>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fc30 	bl	8003248 <disconnect>
 80029e8:	4603      	mov	r3, r0
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <loopback_tcps+0x1fa>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	e02c      	b.n	8002a50 <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4818      	ldr	r0, [pc, #96]	; (8002a5c <loopback_tcps+0x260>)
 80029fc:	f002 f896 	bl	8004b2c <iprintf>
#endif
         break;
 8002a00:	e025      	b.n	8002a4e <loopback_tcps+0x252>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	88ba      	ldrh	r2, [r7, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4815      	ldr	r0, [pc, #84]	; (8002a60 <loopback_tcps+0x264>)
 8002a0a:	f002 f88f 	bl	8004b2c <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fbc5 	bl	80031a0 <listen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d013      	beq.n	8002a48 <loopback_tcps+0x24c>
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	e015      	b.n	8002a50 <loopback_tcps+0x254>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8002a24:	88ba      	ldrh	r2, [r7, #4]
 8002a26:	79f8      	ldrb	r0, [r7, #7]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f000 f9de 	bl	8002dec <socket>
 8002a30:	4603      	mov	r3, r0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d007      	beq.n	8002a4c <loopback_tcps+0x250>
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	e007      	b.n	8002a50 <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8002a40:	bf00      	nop
 8002a42:	e004      	b.n	8002a4e <loopback_tcps+0x252>
         break;
 8002a44:	bf00      	nop
 8002a46:	e002      	b.n	8002a4e <loopback_tcps+0x252>
         break;
 8002a48:	bf00      	nop
 8002a4a:	e000      	b.n	8002a4e <loopback_tcps+0x252>
         break;
 8002a4c:	bf00      	nop
   }
   return 1;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	080059bc 	.word	0x080059bc
 8002a5c:	080059e0 	.word	0x080059e0
 8002a60:	080059f4 	.word	0x080059f4

08002a64 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <WIZCHIP_WRITE+0x38>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <WIZCHIP_WRITE+0x38>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <WIZCHIP_WRITE+0x38>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	4611      	mov	r1, r2
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <WIZCHIP_WRITE+0x38>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <WIZCHIP_WRITE+0x38>)
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	4798      	blx	r3
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000000c 	.word	0x2000000c

08002aa0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <WIZCHIP_READ+0x38>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <WIZCHIP_READ+0x38>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <WIZCHIP_READ+0x38>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	4603      	mov	r3, r0
 8002abe:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <WIZCHIP_READ+0x38>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <WIZCHIP_READ+0x38>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4798      	blx	r3
   return ret;
 8002acc:	89fb      	ldrh	r3, [r7, #14]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	71fb      	strb	r3, [r7, #7]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002af2:	3320      	adds	r3, #32
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ffd3 	bl	8002aa0 <WIZCHIP_READ>
 8002afa:	4603      	mov	r3, r0
 8002afc:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <setTMSR+0x42>
 8002b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b10:	b21a      	sxth	r2, r3
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	81fb      	strh	r3, [r7, #14]
 8002b1c:	e009      	b.n	8002b32 <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8002b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b38:	3320      	adds	r3, #32
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff ff8f 	bl	8002a64 <WIZCHIP_WRITE>
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b68:	3320      	adds	r3, #32
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff98 	bl	8002aa0 <WIZCHIP_READ>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e00a      	b.n	8002b8c <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b7c:	3320      	adds	r3, #32
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff8e 	bl	8002aa0 <WIZCHIP_READ>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002baa:	3328      	adds	r3, #40	; 0x28
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff77 	bl	8002aa0 <WIZCHIP_READ>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <setRMSR+0x42>
 8002bc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc8:	b21a      	sxth	r2, r3
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	81fb      	strh	r3, [r7, #14]
 8002bd4:	e009      	b.n	8002bea <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8002bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	79bb      	ldrb	r3, [r7, #6]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002bf0:	3328      	adds	r3, #40	; 0x28
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7ff ff33 	bl	8002a64 <WIZCHIP_WRITE>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c20:	3328      	adds	r3, #40	; 0x28
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff3c 	bl	8002aa0 <WIZCHIP_READ>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e00a      	b.n	8002c44 <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c34:	3328      	adds	r3, #40	; 0x28
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff32 	bl	8002aa0 <WIZCHIP_READ>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	3308      	adds	r3, #8
 8002c62:	019b      	lsls	r3, r3, #6
 8002c64:	3324      	adds	r3, #36	; 0x24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff1a 	bl	8002aa0 <WIZCHIP_READ>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	3308      	adds	r3, #8
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	3326      	adds	r3, #38	; 0x26
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff11 	bl	8002aa0 <WIZCHIP_READ>
 8002c7e:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8002c80:	4323      	orrs	r3, r4
 8002c82:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d002      	beq.n	8002c92 <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8002c90:	e7e5      	b.n	8002c5e <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8002c92:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8002c94:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
	...

08002ca0 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	019b      	lsls	r3, r3, #6
 8002cb8:	3328      	adds	r3, #40	; 0x28
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fef0 	bl	8002aa0 <WIZCHIP_READ>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	332a      	adds	r3, #42	; 0x2a
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fee7 	bl	8002aa0 <WIZCHIP_READ>
 8002cd2:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d002      	beq.n	8002ce6 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8002ce4:	e7e5      	b.n	8002cb2 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8002ce6:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <getSn_RX_RSR+0x60>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	105b      	asrs	r3, r3, #1
 8002cf0:	f003 0201 	and.w	r2, r3, #1
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4413      	add	r3, r2
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	200008d4 	.word	0x200008d4

08002d04 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e019      	b.n	8002d56 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	3308      	adds	r3, #8
 8002d26:	019b      	lsls	r3, r3, #6
 8002d28:	332e      	adds	r3, #46	; 0x2e
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	440b      	add	r3, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7ff fe8a 	bl	8002a64 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3302      	adds	r3, #2
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3e1      	bcc.n	8002d22 <wiz_send_data+0x1e>
 8002d5e:	e000      	b.n	8002d62 <wiz_send_data+0x5e>
   if(len == 0)  return;
 8002d60:	bf00      	nop
}
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02c      	beq.n	8002dde <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e01f      	b.n	8002dca <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d111      	bne.n	8002db8 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3308      	adds	r3, #8
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	3330      	adds	r3, #48	; 0x30
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe7f 	bl	8002aa0 <WIZCHIP_READ>
 8002da2:	4603      	mov	r3, r0
 8002da4:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8002da6:	8afb      	ldrh	r3, [r7, #22]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b299      	uxth	r1, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	b2ca      	uxtb	r2, r1
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e005      	b.n	8002dc4 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	8afa      	ldrh	r2, [r7, #22]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3db      	bcc.n	8002d8a <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	8afa      	ldrh	r2, [r7, #22]
 8002dd6:	b2d1      	uxtb	r1, r2
 8002dd8:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <wiz_recv_data+0x80>)
 8002dda:	54d1      	strb	r1, [r2, r3]
 8002ddc:	e000      	b.n	8002de0 <wiz_recv_data+0x78>
   if(len == 0) return;
 8002dde:	bf00      	nop
}
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200008dc 	.word	0x200008dc

08002dec <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	71fb      	strb	r3, [r7, #7]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71bb      	strb	r3, [r7, #6]
 8002e02:	460b      	mov	r3, r1
 8002e04:	80bb      	strh	r3, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d902      	bls.n	8002e16 <socket+0x2a>
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e14:	e0f8      	b.n	8003008 <socket+0x21c>
	switch(protocol)
 8002e16:	79bb      	ldrb	r3, [r7, #6]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d005      	beq.n	8002e28 <socket+0x3c>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dd32      	ble.n	8002e86 <socket+0x9a>
 8002e20:	3b02      	subs	r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d82f      	bhi.n	8002e86 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002e26:	e032      	b.n	8002e8e <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8002e28:	2018      	movs	r0, #24
 8002e2a:	f7ff fe39 	bl	8002aa0 <WIZCHIP_READ>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	2018      	movs	r0, #24
 8002e3e:	f7ff fe2f 	bl	8002aa0 <WIZCHIP_READ>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	201a      	movs	r0, #26
 8002e52:	f7ff fe25 	bl	8002aa0 <WIZCHIP_READ>
 8002e56:	4603      	mov	r3, r0
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f107 030c 	add.w	r3, r7, #12
 8002e60:	3302      	adds	r3, #2
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	201a      	movs	r0, #26
 8002e68:	f7ff fe1a 	bl	8002aa0 <WIZCHIP_READ>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	3303      	adds	r3, #3
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <socket+0xa0>
 8002e80:	f06f 0302 	mvn.w	r3, #2
 8002e84:	e0c0      	b.n	8003008 <socket+0x21c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002e86:	f06f 0304 	mvn.w	r3, #4
 8002e8a:	e0bd      	b.n	8003008 <socket+0x21c>
	    break;
 8002e8c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <socket+0xb2>
 8002e98:	f06f 0305 	mvn.w	r3, #5
 8002e9c:	e0b4      	b.n	8003008 <socket+0x21c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <socket+0xec>
	{
   	switch(protocol)
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d002      	beq.n	8002eb0 <socket+0xc4>
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d008      	beq.n	8002ec0 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002eae:	e018      	b.n	8002ee2 <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d110      	bne.n	8002edc <socket+0xf0>
 8002eba:	f06f 0305 	mvn.w	r3, #5
 8002ebe:	e0a3      	b.n	8003008 <socket+0x21c>
   	      if(flag & SF_IGMP_VER2)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db06      	blt.n	8002ee0 <socket+0xf4>
 8002ed2:	f06f 0305 	mvn.w	r3, #5
 8002ed6:	e097      	b.n	8003008 <socket+0x21c>
   	}
   }
 8002ed8:	bf00      	nop
 8002eda:	e002      	b.n	8002ee2 <socket+0xf6>
   	      break;
 8002edc:	bf00      	nop
 8002ede:	e000      	b.n	8002ee2 <socket+0xf6>
   	      break;
 8002ee0:	bf00      	nop
	close(sn);
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f89d 	bl	8003024 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	3308      	adds	r3, #8
 8002eee:	019b      	lsls	r3, r3, #6
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7ff fda4 	bl	8002a64 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8002f1c:	88bb      	ldrh	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d110      	bne.n	8002f44 <socket+0x158>
	{
	   port = sock_any_port++;
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <socket+0x224>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	b291      	uxth	r1, r2
 8002f2a:	4a39      	ldr	r2, [pc, #228]	; (8003010 <socket+0x224>)
 8002f2c:	8011      	strh	r1, [r2, #0]
 8002f2e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <socket+0x224>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <socket+0x158>
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <socket+0x224>)
 8002f3e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002f42:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	3308      	adds	r3, #8
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	330a      	adds	r3, #10
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fd86 	bl	8002a64 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	3302      	adds	r3, #2
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd7e 	bl	8002a64 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002f68:	bf00      	nop
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	019b      	lsls	r3, r3, #6
 8002f70:	3302      	adds	r3, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd94 	bl	8002aa0 <WIZCHIP_READ>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f4      	bne.n	8002f6a <socket+0x17e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2201      	movs	r2, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <socket+0x228>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	4013      	ands	r3, r2
 8002f96:	b21b      	sxth	r3, r3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <socket+0x228>)
 8002f9c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 0201 	and.w	r2, r3, #1
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <socket+0x228>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <socket+0x228>)
 8002fba:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <socket+0x22c>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <socket+0x22c>)
 8002fd8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <socket+0x230>)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <socket+0x234>)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002fec:	bf00      	nop
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	019b      	lsls	r3, r3, #6
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fd52 	bl	8002aa0 <WIZCHIP_READ>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f4      	beq.n	8002fee <socket+0x202>
   return (int8_t)sn;
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	2000000a 	.word	0x2000000a
 8003014:	200008c0 	.word	0x200008c0
 8003018:	200008c2 	.word	0x200008c2
 800301c:	200008c4 	.word	0x200008c4
 8003020:	200008d4 	.word	0x200008d4

08003024 <close>:

int8_t close(uint8_t sn)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b087      	sub	sp, #28
 8003028:	af02      	add	r7, sp, #8
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d902      	bls.n	800303a <close+0x16>
 8003034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003038:	e0a5      	b.n	8003186 <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	3308      	adds	r3, #8
 800303e:	019b      	lsls	r3, r3, #6
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fd2d 	bl	8002aa0 <WIZCHIP_READ>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	2b01      	cmp	r3, #1
 800304e:	d14a      	bne.n	80030e6 <close+0xc2>
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fdfa 	bl	8002c4c <getSn_TX_FSR>
 8003058:	4604      	mov	r4, r0
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fd76 	bl	8002b4e <getTMSR>
 8003062:	4603      	mov	r3, r0
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	429c      	cmp	r4, r3
 8003068:	d03d      	beq.n	80030e6 <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 800306a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800306e:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	3308      	adds	r3, #8
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	2102      	movs	r1, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fcf3 	bl	8002a64 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	3308      	adds	r3, #8
 8003082:	019b      	lsls	r3, r3, #6
 8003084:	330a      	adds	r3, #10
 8003086:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fcea 	bl	8002a64 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	3308      	adds	r3, #8
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	3302      	adds	r3, #2
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fce2 	bl	8002a64 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 80030a0:	bf00      	nop
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	3308      	adds	r3, #8
 80030a6:	019b      	lsls	r3, r3, #6
 80030a8:	3302      	adds	r3, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fcf8 	bl	8002aa0 <WIZCHIP_READ>
 80030b0:	4603      	mov	r3, r0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f4      	bne.n	80030a2 <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 80030b8:	bf00      	nop
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	3308      	adds	r3, #8
 80030be:	019b      	lsls	r3, r3, #6
 80030c0:	3308      	adds	r3, #8
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fcec 	bl	8002aa0 <WIZCHIP_READ>
 80030c8:	4603      	mov	r3, r0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b22      	cmp	r3, #34	; 0x22
 80030ce:	d1f4      	bne.n	80030ba <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	f107 010c 	add.w	r1, r7, #12
 80030d8:	79f8      	ldrb	r0, [r7, #7]
 80030da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80030de:	9200      	str	r2, [sp, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f000 fb81 	bl	80037e8 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	3308      	adds	r3, #8
 80030ea:	019b      	lsls	r3, r3, #6
 80030ec:	3302      	adds	r3, #2
 80030ee:	2110      	movs	r1, #16
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fcb7 	bl	8002a64 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80030f6:	bf00      	nop
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	3308      	adds	r3, #8
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	3302      	adds	r3, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fccd 	bl	8002aa0 <WIZCHIP_READ>
 8003106:	4603      	mov	r3, r0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f4      	bne.n	80030f8 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	3308      	adds	r3, #8
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	3306      	adds	r3, #6
 8003116:	21ff      	movs	r1, #255	; 0xff
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fca3 	bl	8002a64 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	b21b      	sxth	r3, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	b21a      	sxth	r2, r3
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <close+0x16c>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b21b      	sxth	r3, r3
 8003132:	4013      	ands	r3, r2
 8003134:	b21b      	sxth	r3, r3
 8003136:	b29a      	uxth	r2, r3
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <close+0x16c>)
 800313a:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2201      	movs	r2, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	b21b      	sxth	r3, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	b21a      	sxth	r2, r3
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <close+0x170>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b21b      	sxth	r3, r3
 8003150:	4013      	ands	r3, r2
 8003152:	b21b      	sxth	r3, r3
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <close+0x170>)
 8003158:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <close+0x174>)
 800315e:	2100      	movs	r1, #0
 8003160:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	4a0d      	ldr	r2, [pc, #52]	; (800319c <close+0x178>)
 8003168:	2100      	movs	r1, #0
 800316a:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800316c:	bf00      	nop
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	3308      	adds	r3, #8
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	3308      	adds	r3, #8
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fc92 	bl	8002aa0 <WIZCHIP_READ>
 800317c:	4603      	mov	r3, r0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f4      	bne.n	800316e <close+0x14a>
	return SOCK_OK;
 8003184:	2301      	movs	r3, #1
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	200008c0 	.word	0x200008c0
 8003194:	200008c2 	.word	0x200008c2
 8003198:	200008c4 	.word	0x200008c4
 800319c:	200008d4 	.word	0x200008d4

080031a0 <listen>:

int8_t listen(uint8_t sn)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d902      	bls.n	80031b6 <listen+0x16>
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b4:	e043      	b.n	800323e <listen+0x9e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	3308      	adds	r3, #8
 80031ba:	019b      	lsls	r3, r3, #6
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fc6f 	bl	8002aa0 <WIZCHIP_READ>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d002      	beq.n	80031d2 <listen+0x32>
 80031cc:	f06f 0304 	mvn.w	r3, #4
 80031d0:	e035      	b.n	800323e <listen+0x9e>
	CHECK_SOCKINIT();
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	3308      	adds	r3, #8
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	3308      	adds	r3, #8
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fc60 	bl	8002aa0 <WIZCHIP_READ>
 80031e0:	4603      	mov	r3, r0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b13      	cmp	r3, #19
 80031e6:	d002      	beq.n	80031ee <listen+0x4e>
 80031e8:	f06f 0302 	mvn.w	r3, #2
 80031ec:	e027      	b.n	800323e <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	3308      	adds	r3, #8
 80031f2:	019b      	lsls	r3, r3, #6
 80031f4:	3302      	adds	r3, #2
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc33 	bl	8002a64 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80031fe:	bf00      	nop
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	3308      	adds	r3, #8
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	3302      	adds	r3, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fc49 	bl	8002aa0 <WIZCHIP_READ>
 800320e:	4603      	mov	r3, r0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f4      	bne.n	8003200 <listen+0x60>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003216:	e006      	b.n	8003226 <listen+0x86>
   {
         close(sn);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff02 	bl	8003024 <close>
         return SOCKERR_SOCKCLOSED;
 8003220:	f06f 0303 	mvn.w	r3, #3
 8003224:	e00b      	b.n	800323e <listen+0x9e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	3308      	adds	r3, #8
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	3308      	adds	r3, #8
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fc36 	bl	8002aa0 <WIZCHIP_READ>
 8003234:	4603      	mov	r3, r0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b14      	cmp	r3, #20
 800323a:	d1ed      	bne.n	8003218 <listen+0x78>
   }
   return SOCK_OK;
 800323c:	2301      	movs	r3, #1
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d902      	bls.n	800325e <disconnect+0x16>
 8003258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800325c:	e05c      	b.n	8003318 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	3308      	adds	r3, #8
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fc1b 	bl	8002aa0 <WIZCHIP_READ>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <disconnect+0x32>
 8003274:	f06f 0304 	mvn.w	r3, #4
 8003278:	e04e      	b.n	8003318 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	3308      	adds	r3, #8
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	3302      	adds	r3, #2
 8003282:	2108      	movs	r1, #8
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fbed 	bl	8002a64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800328a:	bf00      	nop
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	3308      	adds	r3, #8
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	3302      	adds	r3, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fc03 	bl	8002aa0 <WIZCHIP_READ>
 800329a:	4603      	mov	r3, r0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f4      	bne.n	800328c <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	2201      	movs	r2, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	b21a      	sxth	r2, r3
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <disconnect+0xd8>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	4013      	ands	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <disconnect+0xd8>)
 80032be:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <disconnect+0xdc>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	fa42 f303 	asr.w	r3, r2, r3
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <disconnect+0xb8>
 80032d4:	2300      	movs	r3, #0
 80032d6:	e01f      	b.n	8003318 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	3308      	adds	r3, #8
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	3306      	adds	r3, #6
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fbdd 	bl	8002aa0 <WIZCHIP_READ>
 80032e6:	4603      	mov	r3, r0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <disconnect+0xb8>
	   {
	      close(sn);
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fe95 	bl	8003024 <close>
	      return SOCKERR_TIMEOUT;
 80032fa:	f06f 030c 	mvn.w	r3, #12
 80032fe:	e00b      	b.n	8003318 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	3308      	adds	r3, #8
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	3308      	adds	r3, #8
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fbc9 	bl	8002aa0 <WIZCHIP_READ>
 800330e:	4603      	mov	r3, r0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e0      	bne.n	80032d8 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200008c2 	.word	0x200008c2
 8003324:	200008c0 	.word	0x200008c0

08003328 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	4613      	mov	r3, r2
 8003336:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800333c:	2300      	movs	r3, #0
 800333e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d902      	bls.n	800334c <send+0x24>
 8003346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800334a:	e0e1      	b.n	8003510 <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	3308      	adds	r3, #8
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fba4 	bl	8002aa0 <WIZCHIP_READ>
 8003358:	4603      	mov	r3, r0
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	2b01      	cmp	r3, #1
 8003360:	d002      	beq.n	8003368 <send+0x40>
 8003362:	f06f 0304 	mvn.w	r3, #4
 8003366:	e0d3      	b.n	8003510 <send+0x1e8>
   CHECK_SOCKDATA();
 8003368:	88bb      	ldrh	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <send+0x4c>
 800336e:	f06f 030d 	mvn.w	r3, #13
 8003372:	e0cd      	b.n	8003510 <send+0x1e8>
   tmp = getSn_SR(sn);
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	3308      	adds	r3, #8
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	3308      	adds	r3, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fb8f 	bl	8002aa0 <WIZCHIP_READ>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b17      	cmp	r3, #23
 800338a:	d005      	beq.n	8003398 <send+0x70>
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b1c      	cmp	r3, #28
 8003390:	d002      	beq.n	8003398 <send+0x70>
 8003392:	f06f 0306 	mvn.w	r3, #6
 8003396:	e0bb      	b.n	8003510 <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 8003398:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <send+0x1f0>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	fa42 f303 	asr.w	r3, r2, r3
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d033      	beq.n	8003414 <send+0xec>
   {
      tmp = getSn_IR(sn);
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	3308      	adds	r3, #8
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	3306      	adds	r3, #6
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fb73 	bl	8002aa0 <WIZCHIP_READ>
 80033ba:	4603      	mov	r3, r0
 80033bc:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	3308      	adds	r3, #8
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	3306      	adds	r3, #6
 80033d0:	2110      	movs	r1, #16
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fb46 	bl	8002a64 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <send+0x1f0>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b21b      	sxth	r3, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <send+0x1f0>)
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	e00d      	b.n	8003414 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <send+0xe8>
      {
         close(sn);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe0d 	bl	8003024 <close>
         return SOCKERR_TIMEOUT;
 800340a:	f06f 030c 	mvn.w	r3, #12
 800340e:	e07f      	b.n	8003510 <send+0x1e8>
      }
      else return SOCK_BUSY;
 8003410:	2300      	movs	r3, #0
 8003412:	e07d      	b.n	8003510 <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fb99 	bl	8002b4e <getTMSR>
 800341c:	4603      	mov	r3, r0
 800341e:	b29b      	uxth	r3, r3
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003424:	88ba      	ldrh	r2, [r7, #4]
 8003426:	89bb      	ldrh	r3, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d901      	bls.n	8003430 <send+0x108>
 800342c:	89bb      	ldrh	r3, [r7, #12]
 800342e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fc0a 	bl	8002c4c <getSn_TX_FSR>
 8003438:	4603      	mov	r3, r0
 800343a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	3308      	adds	r3, #8
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	3308      	adds	r3, #8
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fb2b 	bl	8002aa0 <WIZCHIP_READ>
 800344a:	4603      	mov	r3, r0
 800344c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b17      	cmp	r3, #23
 8003452:	d009      	beq.n	8003468 <send+0x140>
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b1c      	cmp	r3, #28
 8003458:	d006      	beq.n	8003468 <send+0x140>
      {
         close(sn);
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fde1 	bl	8003024 <close>
         return SOCKERR_SOCKSTATUS;
 8003462:	f06f 0306 	mvn.w	r3, #6
 8003466:	e053      	b.n	8003510 <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <send+0x1f4>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	fa42 f303 	asr.w	r3, r2, r3
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <send+0x160>
 800347c:	88ba      	ldrh	r2, [r7, #4]
 800347e:	89bb      	ldrh	r3, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d901      	bls.n	8003488 <send+0x160>
 8003484:	2300      	movs	r3, #0
 8003486:	e043      	b.n	8003510 <send+0x1e8>
      if(len <= freesize) break;
 8003488:	88ba      	ldrh	r2, [r7, #4]
 800348a:	89bb      	ldrh	r3, [r7, #12]
 800348c:	429a      	cmp	r2, r3
 800348e:	d900      	bls.n	8003492 <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 8003490:	e7ce      	b.n	8003430 <send+0x108>
      if(len <= freesize) break;
 8003492:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003494:	88ba      	ldrh	r2, [r7, #4]
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fc32 	bl	8002d04 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	3308      	adds	r3, #8
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	3320      	adds	r3, #32
 80034a8:	461a      	mov	r2, r3
 80034aa:	88bb      	ldrh	r3, [r7, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7ff fad6 	bl	8002a64 <WIZCHIP_WRITE>
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	3308      	adds	r3, #8
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	3322      	adds	r3, #34	; 0x22
 80034c0:	461a      	mov	r2, r3
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7ff facc 	bl	8002a64 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	3308      	adds	r3, #8
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	3302      	adds	r3, #2
 80034d4:	2120      	movs	r1, #32
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fac4 	bl	8002a64 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80034dc:	bf00      	nop
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	3308      	adds	r3, #8
 80034e2:	019b      	lsls	r3, r3, #6
 80034e4:	3302      	adds	r3, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fada 	bl	8002aa0 <WIZCHIP_READ>
 80034ec:	4603      	mov	r3, r0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f4      	bne.n	80034de <send+0x1b6>
   sock_is_sending |= (1 << sn);
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2201      	movs	r2, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <send+0x1f0>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b21b      	sxth	r3, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	b21b      	sxth	r3, r3
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <send+0x1f0>)
 800350c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800350e:	88bb      	ldrh	r3, [r7, #4]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200008c2 	.word	0x200008c2
 800351c:	200008c0 	.word	0x200008c0

08003520 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
 800352c:	4613      	mov	r3, r2
 800352e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d902      	bls.n	8003544 <recv+0x24>
 800353e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003542:	e145      	b.n	80037d0 <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	3308      	adds	r3, #8
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff faa8 	bl	8002aa0 <WIZCHIP_READ>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	2b01      	cmp	r3, #1
 8003558:	d002      	beq.n	8003560 <recv+0x40>
 800355a:	f06f 0304 	mvn.w	r3, #4
 800355e:	e137      	b.n	80037d0 <recv+0x2b0>
   CHECK_SOCKDATA();
 8003560:	88bb      	ldrh	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <recv+0x4c>
 8003566:	f06f 030d 	mvn.w	r3, #13
 800356a:	e131      	b.n	80037d0 <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fb49 	bl	8002c06 <getRMSR>
 8003574:	4603      	mov	r3, r0
 8003576:	b29b      	uxth	r3, r3
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 800357c:	89fa      	ldrh	r2, [r7, #14]
 800357e:	88bb      	ldrh	r3, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d201      	bcs.n	8003588 <recv+0x68>
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4a93      	ldr	r2, [pc, #588]	; (80037d8 <recv+0x2b8>)
 800358c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d148      	bne.n	8003626 <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb82 	bl	8002ca0 <getSn_RX_RSR>
 800359c:	4603      	mov	r3, r0
 800359e:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	3308      	adds	r3, #8
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	3308      	adds	r3, #8
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fa79 	bl	8002aa0 <WIZCHIP_READ>
 80035ae:	4603      	mov	r3, r0
 80035b0:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 80035b2:	7b7b      	ldrb	r3, [r7, #13]
 80035b4:	2b17      	cmp	r3, #23
 80035b6:	d020      	beq.n	80035fa <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80035b8:	7b7b      	ldrb	r3, [r7, #13]
 80035ba:	2b1c      	cmp	r3, #28
 80035bc:	d116      	bne.n	80035ec <recv+0xcc>
            {
               if(recvsize != 0) break;
 80035be:	89fb      	ldrh	r3, [r7, #14]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d12d      	bne.n	8003620 <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fb40 	bl	8002c4c <getSn_TX_FSR>
 80035cc:	4604      	mov	r4, r0
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fabc 	bl	8002b4e <getTMSR>
 80035d6:	4603      	mov	r3, r0
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	429c      	cmp	r4, r3
 80035dc:	d10d      	bne.n	80035fa <recv+0xda>
               {
                  close(sn);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fd1f 	bl	8003024 <close>
                  return SOCKERR_SOCKSTATUS;
 80035e6:	f06f 0306 	mvn.w	r3, #6
 80035ea:	e0f1      	b.n	80037d0 <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fd18 	bl	8003024 <close>
               return SOCKERR_SOCKSTATUS;
 80035f4:	f06f 0306 	mvn.w	r3, #6
 80035f8:	e0ea      	b.n	80037d0 <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <recv+0x2bc>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	fa42 f303 	asr.w	r3, r2, r3
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <recv+0xf8>
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <recv+0xf8>
 8003614:	2300      	movs	r3, #0
 8003616:	e0db      	b.n	80037d0 <recv+0x2b0>
         if(recvsize != 0) break;
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 800361e:	e7b9      	b.n	8003594 <recv+0x74>
               if(recvsize != 0) break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <recv+0x106>
         if(recvsize != 0) break;
 8003624:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	4a6b      	ldr	r2, [pc, #428]	; (80037d8 <recv+0x2b8>)
 800362a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <recv+0x128>
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	3308      	adds	r3, #8
 8003636:	019b      	lsls	r3, r3, #6
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fa31 	bl	8002aa0 <WIZCHIP_READ>
 800363e:	4603      	mov	r3, r0
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d035      	beq.n	80036b4 <recv+0x194>
   {
      mr = getMR();
 8003648:	2000      	movs	r0, #0
 800364a:	f7ff fa29 	bl	8002aa0 <WIZCHIP_READ>
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	3308      	adds	r3, #8
 8003656:	019b      	lsls	r3, r3, #6
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fa21 	bl	8002aa0 <WIZCHIP_READ>
 800365e:	4603      	mov	r3, r0
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d120      	bne.n	80036aa <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 8003668:	f107 0108 	add.w	r1, r7, #8
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2202      	movs	r2, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fb79 	bl	8002d68 <wiz_recv_data>
         if(mr & MR_FS)
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8003680:	7a7b      	ldrb	r3, [r7, #9]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	b21a      	sxth	r2, r3
 8003686:	7a3b      	ldrb	r3, [r7, #8]
 8003688:	b21b      	sxth	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b21b      	sxth	r3, r3
 800368e:	81fb      	strh	r3, [r7, #14]
 8003690:	e007      	b.n	80036a2 <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8003692:	7a3b      	ldrb	r3, [r7, #8]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	b21a      	sxth	r2, r3
 8003698:	7a7b      	ldrb	r3, [r7, #9]
 800369a:	b21b      	sxth	r3, r3
 800369c:	4313      	orrs	r3, r2
 800369e:	b21b      	sxth	r3, r3
 80036a0:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4a4e      	ldr	r2, [pc, #312]	; (80037e0 <recv+0x2c0>)
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	494a      	ldr	r1, [pc, #296]	; (80037d8 <recv+0x2b8>)
 80036ae:	89fa      	ldrh	r2, [r7, #14]
 80036b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	4a48      	ldr	r2, [pc, #288]	; (80037d8 <recv+0x2b8>)
 80036b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036bc:	88ba      	ldrh	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d904      	bls.n	80036cc <recv+0x1ac>
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4a44      	ldr	r2, [pc, #272]	; (80037d8 <recv+0x2b8>)
 80036c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ca:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 80036cc:	88bb      	ldrh	r3, [r7, #4]
 80036ce:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <recv+0x2c0>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01d      	beq.n	800371a <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	4a40      	ldr	r2, [pc, #256]	; (80037e4 <recv+0x2c4>)
 80036e2:	5cd2      	ldrb	r2, [r2, r3]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	701a      	strb	r2, [r3, #0]
      buf++;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <recv+0x2c0>)
 80036f2:	5cd2      	ldrb	r2, [r2, r3]
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f022 0202 	bic.w	r2, r2, #2
 80036fa:	b2d1      	uxtb	r1, r2
 80036fc:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <recv+0x2c0>)
 80036fe:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	3b01      	subs	r3, #1
 8003704:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <recv+0x2b8>)
 800370a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	3a01      	subs	r2, #1
 8003712:	b291      	uxth	r1, r2
 8003714:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <recv+0x2b8>)
 8003716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 800371a:	89fb      	ldrh	r3, [r7, #14]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d019      	beq.n	8003754 <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 8003720:	89fa      	ldrh	r2, [r7, #14]
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fb1e 	bl	8002d68 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	3308      	adds	r3, #8
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	3302      	adds	r3, #2
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f994 	bl	8002a64 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 800373c:	bf00      	nop
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	3308      	adds	r3, #8
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	3302      	adds	r3, #2
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f9aa 	bl	8002aa0 <WIZCHIP_READ>
 800374c:	4603      	mov	r3, r0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f4      	bne.n	800373e <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <recv+0x2b8>)
 8003758:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	89fa      	ldrh	r2, [r7, #14]
 8003760:	1a8a      	subs	r2, r1, r2
 8003762:	b291      	uxth	r1, r2
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <recv+0x2b8>)
 8003766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <recv+0x2b8>)
 800376e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <recv+0x2c0>)
 800377a:	5cd2      	ldrb	r2, [r2, r3]
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	b2d1      	uxtb	r1, r2
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <recv+0x2c0>)
 8003786:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <recv+0x28e>
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <recv+0x2c0>)
 8003796:	5cd2      	ldrb	r2, [r2, r3]
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f042 0202 	orr.w	r2, r2, #2
 800379e:	b2d1      	uxtb	r1, r2
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <recv+0x2c0>)
 80037a2:	54d1      	strb	r1, [r2, r3]
 80037a4:	e003      	b.n	80037ae <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <recv+0x2c0>)
 80037aa:	2100      	movs	r1, #0
 80037ac:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	3308      	adds	r3, #8
 80037b2:	019b      	lsls	r3, r3, #6
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f973 	bl	8002aa0 <WIZCHIP_READ>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <recv+0x2ae>
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <recv+0x2b8>)
 80037c8:	2100      	movs	r1, #0
 80037ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80037ce:	88bb      	ldrh	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	200008c4 	.word	0x200008c4
 80037dc:	200008c0 	.word	0x200008c0
 80037e0:	200008d4 	.word	0x200008d4
 80037e4:	200008dc 	.word	0x200008dc

080037e8 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	4613      	mov	r3, r2
 80037f8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d902      	bls.n	800380e <sendto+0x26>
 8003808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380c:	e1e6      	b.n	8003bdc <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	3308      	adds	r3, #8
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f943 	bl	8002aa0 <WIZCHIP_READ>
 800381a:	4603      	mov	r3, r0
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	3b02      	subs	r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003826:	f06f 0304 	mvn.w	r3, #4
 800382a:	e1d7      	b.n	8003bdc <sendto+0x3f4>
         break;
 800382c:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800382e:	89bb      	ldrh	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <sendto+0x52>
 8003834:	f06f 030d 	mvn.w	r3, #13
 8003838:	e1d0      	b.n	8003bdc <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	3201      	adds	r2, #1
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	4413      	add	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	3202      	adds	r2, #2
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	4413      	add	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	3203      	adds	r2, #3
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	4413      	add	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <sendto+0xa4>
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	3308      	adds	r3, #8
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f912 	bl	8002aa0 <WIZCHIP_READ>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d002      	beq.n	800388c <sendto+0xa4>
 8003886:	f06f 030b 	mvn.w	r3, #11
 800388a:	e1a7      	b.n	8003bdc <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800388c:	8c3b      	ldrh	r3, [r7, #32]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <sendto+0xc6>
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	3308      	adds	r3, #8
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f901 	bl	8002aa0 <WIZCHIP_READ>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d002      	beq.n	80038ae <sendto+0xc6>
 80038a8:	f06f 030a 	mvn.w	r3, #10
 80038ac:	e196      	b.n	8003bdc <sendto+0x3f4>
   tmp = getSn_SR(sn);
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3308      	adds	r3, #8
 80038b2:	019b      	lsls	r3, r3, #6
 80038b4:	3308      	adds	r3, #8
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f8f2 	bl	8002aa0 <WIZCHIP_READ>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b42      	cmp	r3, #66	; 0x42
 80038c4:	d008      	beq.n	80038d8 <sendto+0xf0>
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b22      	cmp	r3, #34	; 0x22
 80038ca:	d005      	beq.n	80038d8 <sendto+0xf0>
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b32      	cmp	r3, #50	; 0x32
 80038d0:	d002      	beq.n	80038d8 <sendto+0xf0>
 80038d2:	f06f 0306 	mvn.w	r3, #6
 80038d6:	e181      	b.n	8003bdc <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	3308      	adds	r3, #8
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	3314      	adds	r3, #20
 80038e0:	4618      	mov	r0, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	f7ff f8b3 	bl	8002a64 <WIZCHIP_WRITE>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	3308      	adds	r3, #8
 8003902:	019b      	lsls	r3, r3, #6
 8003904:	3316      	adds	r3, #22
 8003906:	4618      	mov	r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3302      	adds	r3, #2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3303      	adds	r3, #3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	4413      	add	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	f7ff f89f 	bl	8002a64 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	3308      	adds	r3, #8
 800392a:	019b      	lsls	r3, r3, #6
 800392c:	3312      	adds	r3, #18
 800392e:	461a      	mov	r2, r3
 8003930:	8c3b      	ldrh	r3, [r7, #32]
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7ff f895 	bl	8002a64 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f906 	bl	8002b4e <getTMSR>
 8003942:	4603      	mov	r3, r0
 8003944:	b29b      	uxth	r3, r3
 8003946:	029b      	lsls	r3, r3, #10
 8003948:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800394a:	89ba      	ldrh	r2, [r7, #12]
 800394c:	8abb      	ldrh	r3, [r7, #20]
 800394e:	429a      	cmp	r2, r3
 8003950:	d901      	bls.n	8003956 <sendto+0x16e>
 8003952:	8abb      	ldrh	r3, [r7, #20]
 8003954:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff f977 	bl	8002c4c <getSn_TX_FSR>
 800395e:	4603      	mov	r3, r0
 8003960:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3308      	adds	r3, #8
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	3308      	adds	r3, #8
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f898 	bl	8002aa0 <WIZCHIP_READ>
 8003970:	4603      	mov	r3, r0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <sendto+0x196>
 8003978:	f06f 0303 	mvn.w	r3, #3
 800397c:	e12e      	b.n	8003bdc <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800397e:	4b99      	ldr	r3, [pc, #612]	; (8003be4 <sendto+0x3fc>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	fa42 f303 	asr.w	r3, r2, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <sendto+0x1b6>
 8003992:	89ba      	ldrh	r2, [r7, #12]
 8003994:	8abb      	ldrh	r3, [r7, #20]
 8003996:	429a      	cmp	r2, r3
 8003998:	d901      	bls.n	800399e <sendto+0x1b6>
 800399a:	2300      	movs	r3, #0
 800399c:	e11e      	b.n	8003bdc <sendto+0x3f4>
      if(len <= freesize) break;
 800399e:	89ba      	ldrh	r2, [r7, #12]
 80039a0:	8abb      	ldrh	r3, [r7, #20]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d900      	bls.n	80039a8 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80039a6:	e7d6      	b.n	8003956 <sendto+0x16e>
      if(len <= freesize) break;
 80039a8:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80039aa:	89ba      	ldrh	r2, [r7, #12]
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f9a7 	bl	8002d04 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 80039b6:	2018      	movs	r0, #24
 80039b8:	f7ff f872 	bl	8002aa0 <WIZCHIP_READ>
 80039bc:	4603      	mov	r3, r0
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	2018      	movs	r0, #24
 80039cc:	f7ff f868 	bl	8002aa0 <WIZCHIP_READ>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	3301      	adds	r3, #1
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	201a      	movs	r0, #26
 80039e0:	f7ff f85e 	bl	8002aa0 <WIZCHIP_READ>
 80039e4:	4603      	mov	r3, r0
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	3302      	adds	r3, #2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	201a      	movs	r0, #26
 80039f6:	f7ff f853 	bl	8002aa0 <WIZCHIP_READ>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	3303      	adds	r3, #3
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d145      	bne.n	8003a9a <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 8003a0e:	2014      	movs	r0, #20
 8003a10:	f7ff f846 	bl	8002aa0 <WIZCHIP_READ>
 8003a14:	4603      	mov	r3, r0
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	f107 0310 	add.w	r3, r7, #16
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	2014      	movs	r0, #20
 8003a24:	f7ff f83c 	bl	8002aa0 <WIZCHIP_READ>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	3301      	adds	r3, #1
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	2016      	movs	r0, #22
 8003a38:	f7ff f832 	bl	8002aa0 <WIZCHIP_READ>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	3302      	adds	r3, #2
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	2016      	movs	r0, #22
 8003a4e:	f7ff f827 	bl	8002aa0 <WIZCHIP_READ>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461a      	mov	r2, r3
 8003a56:	f107 0310 	add.w	r3, r7, #16
 8003a5a:	3303      	adds	r3, #3
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <sendto+0x400>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b60      	ldr	r3, [pc, #384]	; (8003bec <sendto+0x404>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	2014      	movs	r0, #20
 8003a78:	f7fe fff4 	bl	8002a64 <WIZCHIP_WRITE>
 8003a7c:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <sendto+0x408>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <sendto+0x40c>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	2016      	movs	r0, #22
 8003a94:	f7fe ffe6 	bl	8002a64 <WIZCHIP_WRITE>
 8003a98:	e001      	b.n	8003a9e <sendto+0x2b6>
      }
      else taddr = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	3320      	adds	r3, #32
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	89bb      	ldrh	r3, [r7, #12]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fe ffd7 	bl	8002a64 <WIZCHIP_WRITE>
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	019b      	lsls	r3, r3, #6
 8003abc:	3322      	adds	r3, #34	; 0x22
 8003abe:	461a      	mov	r2, r3
 8003ac0:	89bb      	ldrh	r3, [r7, #12]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fe ffcd 	bl	8002a64 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	3308      	adds	r3, #8
 8003ace:	019b      	lsls	r3, r3, #6
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ffc5 	bl	8002a64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003ada:	bf00      	nop
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	019b      	lsls	r3, r3, #6
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ffdb 	bl	8002aa0 <WIZCHIP_READ>
 8003aea:	4603      	mov	r3, r0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f4      	bne.n	8003adc <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	3308      	adds	r3, #8
 8003af6:	019b      	lsls	r3, r3, #6
 8003af8:	3306      	adds	r3, #6
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe ffd0 	bl	8002aa0 <WIZCHIP_READ>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3308      	adds	r3, #8
 8003b12:	019b      	lsls	r3, r3, #6
 8003b14:	3306      	adds	r3, #6
 8003b16:	2110      	movs	r1, #16
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe ffa3 	bl	8002a64 <WIZCHIP_WRITE>
         break;
 8003b1e:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d059      	beq.n	8003bda <sendto+0x3f2>
 8003b26:	e035      	b.n	8003b94 <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0df      	beq.n	8003af2 <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	3308      	adds	r3, #8
 8003b36:	019b      	lsls	r3, r3, #6
 8003b38:	3306      	adds	r3, #6
 8003b3a:	2108      	movs	r1, #8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ff91 	bl	8002a64 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d022      	beq.n	8003b8e <sendto+0x3a6>
 8003b48:	f107 0310 	add.w	r3, r7, #16
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	f107 0310 	add.w	r3, r7, #16
 8003b58:	3301      	adds	r3, #1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	2014      	movs	r0, #20
 8003b66:	f7fe ff7d 	bl	8002a64 <WIZCHIP_WRITE>
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	3302      	adds	r3, #2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	3303      	adds	r3, #3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	2016      	movs	r0, #22
 8003b8a:	f7fe ff6b 	bl	8002a64 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003b8e:	f06f 030c 	mvn.w	r3, #12
 8003b92:	e023      	b.n	8003bdc <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	f107 0310 	add.w	r3, r7, #16
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4619      	mov	r1, r3
 8003bb0:	2014      	movs	r0, #20
 8003bb2:	f7fe ff57 	bl	8002a64 <WIZCHIP_WRITE>
 8003bb6:	f107 0310 	add.w	r3, r7, #16
 8003bba:	3302      	adds	r3, #2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	3303      	adds	r3, #3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	2016      	movs	r0, #22
 8003bd6:	f7fe ff45 	bl	8002a64 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003bda:	89bb      	ldrh	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200008c0 	.word	0x200008c0
 8003be8:	08005ad0 	.word	0x08005ad0
 8003bec:	08005ad1 	.word	0x08005ad1
 8003bf0:	08005ad2 	.word	0x08005ad2
 8003bf4:	08005ad3 	.word	0x08005ad3

08003bf8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	887a      	ldrh	r2, [r7, #2]
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <reg_wizchip_cs_cbfunc+0x16>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <reg_wizchip_cs_cbfunc+0x44>)
 8003c82:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c88:	619a      	str	r2, [r3, #24]
 8003c8a:	e006      	b.n	8003c9a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6193      	str	r3, [r2, #24]
   }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	2000000c 	.word	0x2000000c
 8003cac:	08003c15 	.word	0x08003c15
 8003cb0:	08003c23 	.word	0x08003c23

08003cb4 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8003cbe:	bf00      	nop
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <reg_wizchip_bus_cbfunc+0x4c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f9      	beq.n	8003cc0 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <reg_wizchip_bus_cbfunc+0x24>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <reg_wizchip_bus_cbfunc+0x4c>)
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <reg_wizchip_bus_cbfunc+0x50>)
 8003cdc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <reg_wizchip_bus_cbfunc+0x4c>)
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <reg_wizchip_bus_cbfunc+0x54>)
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	e006      	b.n	8003cf4 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <reg_wizchip_bus_cbfunc+0x4c>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <reg_wizchip_bus_cbfunc+0x4c>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6213      	str	r3, [r2, #32]
   }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	08003c31 	.word	0x08003c31
 8003d08:	08003c4b 	.word	0x08003c4b

08003d0c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d863      	bhi.n	8003dee <ctlwizchip+0xe2>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <ctlwizchip+0x20>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d57 	.word	0x08003d57
 8003d34:	08003d83 	.word	0x08003d83
 8003d38:	08003d77 	.word	0x08003d77
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d9d 	.word	0x08003d9d
 8003d44:	08003def 	.word	0x08003def
 8003d48:	08003def 	.word	0x08003def
 8003d4c:	08003dab 	.word	0x08003dab
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003d50:	f000 f896 	bl	8003e80 <wizchip_sw_reset>
         break;
 8003d54:	e04e      	b.n	8003df4 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3308      	adds	r3, #8
 8003d64:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f97f 	bl	8004070 <wizchip_init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	e03f      	b.n	8003df6 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fa0e 	bl	800419c <wizchip_clrinterrupt>
         break;
 8003d80:	e038      	b.n	8003df4 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003d82:	f000 fa2d 	bl	80041e0 <wizchip_getinterrupt>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	801a      	strh	r2, [r3, #0]
         break;
 8003d8e:	e031      	b.n	8003df4 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa47 	bl	8004228 <wizchip_setinterruptmask>
         break;         
 8003d9a:	e02b      	b.n	8003df4 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003d9c:	f000 fa66 	bl	800426c <wizchip_getinterruptmask>
 8003da0:	4603      	mov	r3, r0
 8003da2:	461a      	mov	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	801a      	strh	r2, [r3, #0]
         break;
 8003da8:	e024      	b.n	8003df4 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <ctlwizchip+0xf4>)
 8003dac:	789a      	ldrb	r2, [r3, #2]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <ctlwizchip+0xf4>)
 8003db8:	78d2      	ldrb	r2, [r2, #3]
 8003dba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <ctlwizchip+0xf4>)
 8003dc2:	7912      	ldrb	r2, [r2, #4]
 8003dc4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	3303      	adds	r3, #3
 8003dca:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <ctlwizchip+0xf4>)
 8003dcc:	7952      	ldrb	r2, [r2, #5]
 8003dce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <ctlwizchip+0xf4>)
 8003dd6:	7992      	ldrb	r2, [r2, #6]
 8003dd8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	3305      	adds	r3, #5
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <ctlwizchip+0xf4>)
 8003de0:	79d2      	ldrb	r2, [r2, #7]
 8003de2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	3306      	adds	r3, #6
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
         break;
 8003dec:	e002      	b.n	8003df4 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df2:	e000      	b.n	8003df6 <ctlwizchip+0xea>
   }
   return 0;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d82c      	bhi.n	8003e70 <ctlnetwork+0x6c>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <ctlnetwork+0x18>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e35 	.word	0x08003e35
 8003e20:	08003e3d 	.word	0x08003e3d
 8003e24:	08003e45 	.word	0x08003e45
 8003e28:	08003e53 	.word	0x08003e53
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e69 	.word	0x08003e69
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003e34:	6838      	ldr	r0, [r7, #0]
 8003e36:	f000 fa41 	bl	80042bc <wizchip_setnetinfo>
         break;
 8003e3a:	e01c      	b.n	8003e76 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003e3c:	6838      	ldr	r0, [r7, #0]
 8003e3e:	f000 fadb 	bl	80043f8 <wizchip_getnetinfo>
         break;
 8003e42:	e018      	b.n	8003e76 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fb85 	bl	8004558 <wizchip_setnetmode>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	e012      	b.n	8003e78 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003e52:	f000 fba4 	bl	800459e <wizchip_getnetmode>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	701a      	strb	r2, [r3, #0]
         break;
 8003e5e:	e00a      	b.n	8003e76 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	f000 fba5 	bl	80045b0 <wizchip_settimeout>
         break;
 8003e66:	e006      	b.n	8003e76 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003e68:	6838      	ldr	r0, [r7, #0]
 8003e6a:	f000 fbb6 	bl	80045da <wizchip_gettimeout>
         break;
 8003e6e:	e002      	b.n	8003e76 <ctlnetwork+0x72>
      default:
         return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e74:	e000      	b.n	8003e78 <ctlnetwork+0x74>
   }
   return 0;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003e86:	2008      	movs	r0, #8
 8003e88:	f7fe fe0a 	bl	8002aa0 <WIZCHIP_READ>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	713b      	strb	r3, [r7, #4]
 8003e96:	2008      	movs	r0, #8
 8003e98:	f7fe fe02 	bl	8002aa0 <WIZCHIP_READ>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	717b      	strb	r3, [r7, #5]
 8003ea2:	200a      	movs	r0, #10
 8003ea4:	f7fe fdfc 	bl	8002aa0 <WIZCHIP_READ>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	71bb      	strb	r3, [r7, #6]
 8003eb2:	200a      	movs	r0, #10
 8003eb4:	f7fe fdf4 	bl	8002aa0 <WIZCHIP_READ>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	71fb      	strb	r3, [r7, #7]
 8003ebe:	200c      	movs	r0, #12
 8003ec0:	f7fe fdee 	bl	8002aa0 <WIZCHIP_READ>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	723b      	strb	r3, [r7, #8]
 8003ece:	200c      	movs	r0, #12
 8003ed0:	f7fe fde6 	bl	8002aa0 <WIZCHIP_READ>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003eda:	2010      	movs	r0, #16
 8003edc:	f7fe fde0 	bl	8002aa0 <WIZCHIP_READ>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	753b      	strb	r3, [r7, #20]
 8003eea:	2010      	movs	r0, #16
 8003eec:	f7fe fdd8 	bl	8002aa0 <WIZCHIP_READ>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	757b      	strb	r3, [r7, #21]
 8003ef6:	2012      	movs	r0, #18
 8003ef8:	f7fe fdd2 	bl	8002aa0 <WIZCHIP_READ>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	75bb      	strb	r3, [r7, #22]
 8003f06:	2012      	movs	r0, #18
 8003f08:	f7fe fdca 	bl	8002aa0 <WIZCHIP_READ>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	75fb      	strb	r3, [r7, #23]
 8003f12:	2014      	movs	r0, #20
 8003f14:	f7fe fdc4 	bl	8002aa0 <WIZCHIP_READ>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	743b      	strb	r3, [r7, #16]
 8003f22:	2014      	movs	r0, #20
 8003f24:	f7fe fdbc 	bl	8002aa0 <WIZCHIP_READ>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	747b      	strb	r3, [r7, #17]
 8003f2e:	2016      	movs	r0, #22
 8003f30:	f7fe fdb6 	bl	8002aa0 <WIZCHIP_READ>
 8003f34:	4603      	mov	r3, r0
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	74bb      	strb	r3, [r7, #18]
 8003f3e:	2016      	movs	r0, #22
 8003f40:	f7fe fdae 	bl	8002aa0 <WIZCHIP_READ>
 8003f44:	4603      	mov	r3, r0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	74fb      	strb	r3, [r7, #19]
 8003f4a:	2018      	movs	r0, #24
 8003f4c:	f7fe fda8 	bl	8002aa0 <WIZCHIP_READ>
 8003f50:	4603      	mov	r3, r0
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	733b      	strb	r3, [r7, #12]
 8003f5a:	2018      	movs	r0, #24
 8003f5c:	f7fe fda0 	bl	8002aa0 <WIZCHIP_READ>
 8003f60:	4603      	mov	r3, r0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	737b      	strb	r3, [r7, #13]
 8003f66:	201a      	movs	r0, #26
 8003f68:	f7fe fd9a 	bl	8002aa0 <WIZCHIP_READ>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	73bb      	strb	r3, [r7, #14]
 8003f76:	201a      	movs	r0, #26
 8003f78:	f7fe fd92 	bl	8002aa0 <WIZCHIP_READ>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fe fd6d 	bl	8002a64 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fe fd88 	bl	8002aa0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f90:	793b      	ldrb	r3, [r7, #4]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	797b      	ldrb	r3, [r7, #5]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	2008      	movs	r0, #8
 8003fa4:	f7fe fd5e 	bl	8002a64 <WIZCHIP_WRITE>
 8003fa8:	79bb      	ldrb	r3, [r7, #6]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4619      	mov	r1, r3
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f7fe fd52 	bl	8002a64 <WIZCHIP_WRITE>
 8003fc0:	7a3b      	ldrb	r3, [r7, #8]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	7a7b      	ldrb	r3, [r7, #9]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	200c      	movs	r0, #12
 8003fd4:	f7fe fd46 	bl	8002a64 <WIZCHIP_WRITE>
   setGAR(gw);
 8003fd8:	7d3b      	ldrb	r3, [r7, #20]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	7d7b      	ldrb	r3, [r7, #21]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2010      	movs	r0, #16
 8003fec:	f7fe fd3a 	bl	8002a64 <WIZCHIP_WRITE>
 8003ff0:	7dbb      	ldrb	r3, [r7, #22]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4619      	mov	r1, r3
 8004002:	2012      	movs	r0, #18
 8004004:	f7fe fd2e 	bl	8002a64 <WIZCHIP_WRITE>
   setSUBR(sn);
 8004008:	7c3b      	ldrb	r3, [r7, #16]
 800400a:	b29b      	uxth	r3, r3
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	b29a      	uxth	r2, r3
 8004010:	7c7b      	ldrb	r3, [r7, #17]
 8004012:	b29b      	uxth	r3, r3
 8004014:	4413      	add	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	2014      	movs	r0, #20
 800401c:	f7fe fd22 	bl	8002a64 <WIZCHIP_WRITE>
 8004020:	7cbb      	ldrb	r3, [r7, #18]
 8004022:	b29b      	uxth	r3, r3
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	b29a      	uxth	r2, r3
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	b29b      	uxth	r3, r3
 800402c:	4413      	add	r3, r2
 800402e:	b29b      	uxth	r3, r3
 8004030:	4619      	mov	r1, r3
 8004032:	2016      	movs	r0, #22
 8004034:	f7fe fd16 	bl	8002a64 <WIZCHIP_WRITE>
   setSIPR(sip);
 8004038:	7b3b      	ldrb	r3, [r7, #12]
 800403a:	b29b      	uxth	r3, r3
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	b29a      	uxth	r2, r3
 8004040:	7b7b      	ldrb	r3, [r7, #13]
 8004042:	b29b      	uxth	r3, r3
 8004044:	4413      	add	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	2018      	movs	r0, #24
 800404c:	f7fe fd0a 	bl	8002a64 <WIZCHIP_WRITE>
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	b29b      	uxth	r3, r3
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	b29a      	uxth	r2, r3
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	b29b      	uxth	r3, r3
 800405c:	4413      	add	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	4619      	mov	r1, r3
 8004062:	201a      	movs	r0, #26
 8004064:	f7fe fcfe 	bl	8002a64 <WIZCHIP_WRITE>
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800407e:	f7ff feff 	bl	8003e80 <wizchip_sw_reset>
   if(txsize)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d040      	beq.n	800410a <wizchip_init+0x9a>
   {
      tmp = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e018      	b.n	80040c4 <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d902      	bls.n	80040a6 <wizchip_init+0x36>
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040a4:	e076      	b.n	8004194 <wizchip_init+0x124>
			tmp += txsize[i];
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	4413      	add	r3, r2
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	dde2      	ble.n	8004092 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <wizchip_init+0x6e>
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040dc:	e05a      	b.n	8004194 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e00e      	b.n	8004102 <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80040e4:	7bf8      	ldrb	r0, [r7, #15]
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fe fcf3 	bl	8002adc <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004106:	2b07      	cmp	r3, #7
 8004108:	ddec      	ble.n	80040e4 <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d040      	beq.n	8004192 <wizchip_init+0x122>
   {
      tmp = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e018      	b.n	800414c <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4413      	add	r3, r2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d902      	bls.n	800412e <wizchip_init+0xbe>
 8004128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800412c:	e032      	b.n	8004194 <wizchip_init+0x124>
			tmp += rxsize[i];
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4413      	add	r3, r2
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	4413      	add	r3, r2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3301      	adds	r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004150:	2b07      	cmp	r3, #7
 8004152:	dde2      	ble.n	800411a <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8004154:	7bbb      	ldrb	r3, [r7, #14]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <wizchip_init+0xf6>
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	e016      	b.n	8004194 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e00e      	b.n	800418a <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800416c:	7bf8      	ldrb	r0, [r7, #15]
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4413      	add	r3, r2
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	f7fe fd0b 	bl	8002b94 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800417e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418e:	2b07      	cmp	r3, #7
 8004190:	ddec      	ble.n	800416c <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	f043 0310 	orr.w	r3, r3, #16
 80041b8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	b21a      	sxth	r2, r3
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	2002      	movs	r0, #2
 80041d4:	f7fe fc46 	bl	8002a64 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7fe fc54 	bl	8002aa0 <WIZCHIP_READ>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041fe:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 8004200:	88bb      	ldrh	r3, [r7, #4]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8004208:	88bb      	ldrh	r3, [r7, #4]
 800420a:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800420c:	79bb      	ldrb	r3, [r7, #6]
 800420e:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004210:	88bb      	ldrh	r3, [r7, #4]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	b29a      	uxth	r2, r3
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800421e:	88bb      	ldrh	r3, [r7, #4]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	b29b      	uxth	r3, r3
 800423c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f023 0310 	bic.w	r3, r3, #16
 8004244:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	b21a      	sxth	r2, r3
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	b21b      	sxth	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b21b      	sxth	r3, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800425a:	b29b      	uxth	r3, r3
 800425c:	4619      	mov	r1, r3
 800425e:	2004      	movs	r0, #4
 8004260:	f7fe fc00 	bl	8002a64 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800427e:	2004      	movs	r0, #4
 8004280:	f7fe fc0e 	bl	8002aa0 <WIZCHIP_READ>
 8004284:	4603      	mov	r3, r0
 8004286:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800428a:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 800428c:	88bb      	ldrh	r3, [r7, #4]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8004294:	88bb      	ldrh	r3, [r7, #4]
 8004296:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80042a0:	79bb      	ldrb	r3, [r7, #6]
 80042a2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80042a4:	88bb      	ldrh	r3, [r7, #4]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80042b2:	88bb      	ldrh	r3, [r7, #4]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4619      	mov	r1, r3
 80042da:	2008      	movs	r0, #8
 80042dc:	f7fe fbc2 	bl	8002a64 <WIZCHIP_WRITE>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	789b      	ldrb	r3, [r3, #2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	78db      	ldrb	r3, [r3, #3]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	200a      	movs	r0, #10
 80042f8:	f7fe fbb4 	bl	8002a64 <WIZCHIP_WRITE>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	b29b      	uxth	r3, r3
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	795b      	ldrb	r3, [r3, #5]
 800430a:	b29b      	uxth	r3, r3
 800430c:	4413      	add	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	4619      	mov	r1, r3
 8004312:	200c      	movs	r0, #12
 8004314:	f7fe fba6 	bl	8002a64 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7b9b      	ldrb	r3, [r3, #14]
 800431c:	b29b      	uxth	r3, r3
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7bdb      	ldrb	r3, [r3, #15]
 8004326:	b29b      	uxth	r3, r3
 8004328:	4413      	add	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	2010      	movs	r0, #16
 8004330:	f7fe fb98 	bl	8002a64 <WIZCHIP_WRITE>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	7c1b      	ldrb	r3, [r3, #16]
 8004338:	b29b      	uxth	r3, r3
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7c5b      	ldrb	r3, [r3, #17]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4413      	add	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	2012      	movs	r0, #18
 800434c:	f7fe fb8a 	bl	8002a64 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7a9b      	ldrb	r3, [r3, #10]
 8004354:	b29b      	uxth	r3, r3
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7adb      	ldrb	r3, [r3, #11]
 800435e:	b29b      	uxth	r3, r3
 8004360:	4413      	add	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	2014      	movs	r0, #20
 8004368:	f7fe fb7c 	bl	8002a64 <WIZCHIP_WRITE>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7b1b      	ldrb	r3, [r3, #12]
 8004370:	b29b      	uxth	r3, r3
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7b5b      	ldrb	r3, [r3, #13]
 800437a:	b29b      	uxth	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	4619      	mov	r1, r3
 8004382:	2016      	movs	r0, #22
 8004384:	f7fe fb6e 	bl	8002a64 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	799b      	ldrb	r3, [r3, #6]
 800438c:	b29b      	uxth	r3, r3
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	79db      	ldrb	r3, [r3, #7]
 8004396:	b29b      	uxth	r3, r3
 8004398:	4413      	add	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	2018      	movs	r0, #24
 80043a0:	f7fe fb60 	bl	8002a64 <WIZCHIP_WRITE>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7a1b      	ldrb	r3, [r3, #8]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7a5b      	ldrb	r3, [r3, #9]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4619      	mov	r1, r3
 80043ba:	201a      	movs	r0, #26
 80043bc:	f7fe fb52 	bl	8002a64 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7c9a      	ldrb	r2, [r3, #18]
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <wizchip_setnetinfo+0x134>)
 80043c6:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7cda      	ldrb	r2, [r3, #19]
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <wizchip_setnetinfo+0x134>)
 80043ce:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7d1a      	ldrb	r2, [r3, #20]
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <wizchip_setnetinfo+0x134>)
 80043d6:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7d5a      	ldrb	r2, [r3, #21]
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <wizchip_setnetinfo+0x134>)
 80043de:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7d9a      	ldrb	r2, [r3, #22]
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <wizchip_setnetinfo+0x138>)
 80043e6:	701a      	strb	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200008e4 	.word	0x200008e4
 80043f4:	200008e8 	.word	0x200008e8

080043f8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004400:	2008      	movs	r0, #8
 8004402:	f7fe fb4d 	bl	8002aa0 <WIZCHIP_READ>
 8004406:	4603      	mov	r3, r0
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	b29b      	uxth	r3, r3
 800440c:	b2da      	uxtb	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	2008      	movs	r0, #8
 8004414:	f7fe fb44 	bl	8002aa0 <WIZCHIP_READ>
 8004418:	4603      	mov	r3, r0
 800441a:	b2da      	uxtb	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	705a      	strb	r2, [r3, #1]
 8004420:	200a      	movs	r0, #10
 8004422:	f7fe fb3d 	bl	8002aa0 <WIZCHIP_READ>
 8004426:	4603      	mov	r3, r0
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b29b      	uxth	r3, r3
 800442c:	b2da      	uxtb	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	709a      	strb	r2, [r3, #2]
 8004432:	200a      	movs	r0, #10
 8004434:	f7fe fb34 	bl	8002aa0 <WIZCHIP_READ>
 8004438:	4603      	mov	r3, r0
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	70da      	strb	r2, [r3, #3]
 8004440:	200c      	movs	r0, #12
 8004442:	f7fe fb2d 	bl	8002aa0 <WIZCHIP_READ>
 8004446:	4603      	mov	r3, r0
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	b29b      	uxth	r3, r3
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	711a      	strb	r2, [r3, #4]
 8004452:	200c      	movs	r0, #12
 8004454:	f7fe fb24 	bl	8002aa0 <WIZCHIP_READ>
 8004458:	4603      	mov	r3, r0
 800445a:	b2da      	uxtb	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8004460:	2010      	movs	r0, #16
 8004462:	f7fe fb1d 	bl	8002aa0 <WIZCHIP_READ>
 8004466:	4603      	mov	r3, r0
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	b29b      	uxth	r3, r3
 800446c:	b2da      	uxtb	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	739a      	strb	r2, [r3, #14]
 8004472:	2010      	movs	r0, #16
 8004474:	f7fe fb14 	bl	8002aa0 <WIZCHIP_READ>
 8004478:	4603      	mov	r3, r0
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	73da      	strb	r2, [r3, #15]
 8004480:	2012      	movs	r0, #18
 8004482:	f7fe fb0d 	bl	8002aa0 <WIZCHIP_READ>
 8004486:	4603      	mov	r3, r0
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	b29b      	uxth	r3, r3
 800448c:	b2da      	uxtb	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	741a      	strb	r2, [r3, #16]
 8004492:	2012      	movs	r0, #18
 8004494:	f7fe fb04 	bl	8002aa0 <WIZCHIP_READ>
 8004498:	4603      	mov	r3, r0
 800449a:	b2da      	uxtb	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 80044a0:	2014      	movs	r0, #20
 80044a2:	f7fe fafd 	bl	8002aa0 <WIZCHIP_READ>
 80044a6:	4603      	mov	r3, r0
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	729a      	strb	r2, [r3, #10]
 80044b2:	2014      	movs	r0, #20
 80044b4:	f7fe faf4 	bl	8002aa0 <WIZCHIP_READ>
 80044b8:	4603      	mov	r3, r0
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	72da      	strb	r2, [r3, #11]
 80044c0:	2016      	movs	r0, #22
 80044c2:	f7fe faed 	bl	8002aa0 <WIZCHIP_READ>
 80044c6:	4603      	mov	r3, r0
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	731a      	strb	r2, [r3, #12]
 80044d2:	2016      	movs	r0, #22
 80044d4:	f7fe fae4 	bl	8002aa0 <WIZCHIP_READ>
 80044d8:	4603      	mov	r3, r0
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80044e0:	2018      	movs	r0, #24
 80044e2:	f7fe fadd 	bl	8002aa0 <WIZCHIP_READ>
 80044e6:	4603      	mov	r3, r0
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	719a      	strb	r2, [r3, #6]
 80044f2:	2018      	movs	r0, #24
 80044f4:	f7fe fad4 	bl	8002aa0 <WIZCHIP_READ>
 80044f8:	4603      	mov	r3, r0
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	71da      	strb	r2, [r3, #7]
 8004500:	201a      	movs	r0, #26
 8004502:	f7fe facd 	bl	8002aa0 <WIZCHIP_READ>
 8004506:	4603      	mov	r3, r0
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	b29b      	uxth	r3, r3
 800450c:	b2da      	uxtb	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	721a      	strb	r2, [r3, #8]
 8004512:	201a      	movs	r0, #26
 8004514:	f7fe fac4 	bl	8002aa0 <WIZCHIP_READ>
 8004518:	4603      	mov	r3, r0
 800451a:	b2da      	uxtb	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <wizchip_getnetinfo+0x158>)
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <wizchip_getnetinfo+0x158>)
 800452a:	785a      	ldrb	r2, [r3, #1]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <wizchip_getnetinfo+0x158>)
 8004532:	789a      	ldrb	r2, [r3, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <wizchip_getnetinfo+0x158>)
 800453a:	78da      	ldrb	r2, [r3, #3]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <wizchip_getnetinfo+0x15c>)
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	759a      	strb	r2, [r3, #22]
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200008e4 	.word	0x200008e4
 8004554:	200008e8 	.word	0x200008e8

08004558 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <wizchip_setnetmode+0x1e>
 8004570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004574:	e00f      	b.n	8004596 <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8004576:	2000      	movs	r0, #0
 8004578:	f7fe fa92 	bl	8002aa0 <WIZCHIP_READ>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	4313      	orrs	r3, r2
 8004586:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	b29b      	uxth	r3, r3
 800458c:	4619      	mov	r1, r3
 800458e:	2000      	movs	r0, #0
 8004590:	f7fe fa68 	bl	8002a64 <WIZCHIP_WRITE>
   return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7fe fa7c 	bl	8002aa0 <WIZCHIP_READ>
 80045a8:	4603      	mov	r3, r0
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	201e      	movs	r0, #30
 80045c2:	f7fe fa4f 	bl	8002a64 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	885b      	ldrh	r3, [r3, #2]
 80045ca:	4619      	mov	r1, r3
 80045cc:	201c      	movs	r0, #28
 80045ce:	f7fe fa49 	bl	8002a64 <WIZCHIP_WRITE>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80045e2:	201e      	movs	r0, #30
 80045e4:	f7fe fa5c 	bl	8002aa0 <WIZCHIP_READ>
 80045e8:	4603      	mov	r3, r0
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80045f0:	201c      	movs	r0, #28
 80045f2:	f7fe fa55 	bl	8002aa0 <WIZCHIP_READ>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	805a      	strh	r2, [r3, #2]
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <wizchip_select+0x14>)
 8004612:	f7fc feb9 	bl	8001388 <HAL_GPIO_WritePin>
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40020c00 	.word	0x40020c00

08004620 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004624:	2201      	movs	r2, #1
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <wizchip_deselect+0x14>)
 800462a:	f7fc fead 	bl	8001388 <HAL_GPIO_WritePin>
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40020c00 	.word	0x40020c00

08004638 <wizchip_read>:

static inline uint16_t wizchip_read(uint32_t addr)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return _W5300_DATA(addr);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, uint16_t tx_data)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  _W5300_DATA(addr) = tx_data;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800466c:	461a      	mov	r2, r3
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	8013      	strh	r3, [r2, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <wizchip_initialize>:

void wizchip_initialize(void)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 8004686:	f7ff ffcb 	bl	8004620 <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800468a:	490e      	ldr	r1, [pc, #56]	; (80046c4 <wizchip_initialize+0x44>)
 800468c:	480e      	ldr	r0, [pc, #56]	; (80046c8 <wizchip_initialize+0x48>)
 800468e:	f7ff faeb 	bl	8003c68 <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 8004692:	490e      	ldr	r1, [pc, #56]	; (80046cc <wizchip_initialize+0x4c>)
 8004694:	480e      	ldr	r0, [pc, #56]	; (80046d0 <wizchip_initialize+0x50>)
 8004696:	f7ff fb0d 	bl	8003cb4 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 800469a:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <wizchip_initialize+0x54>)
 800469c:	463c      	mov	r4, r7
 800469e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 80046a4:	463b      	mov	r3, r7
 80046a6:	4619      	mov	r1, r3
 80046a8:	2001      	movs	r0, #1
 80046aa:	f7ff fb2f 	bl	8003d0c <ctlwizchip>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b4:	d102      	bne.n	80046bc <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 80046b6:	4808      	ldr	r0, [pc, #32]	; (80046d8 <wizchip_initialize+0x58>)
 80046b8:	f000 fabe 	bl	8004c38 <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	08004621 	.word	0x08004621
 80046c8:	08004609 	.word	0x08004609
 80046cc:	08004659 	.word	0x08004659
 80046d0:	08004639 	.word	0x08004639
 80046d4:	08005af0 	.word	0x08005af0
 80046d8:	08005ad8 	.word	0x08005ad8

080046dc <wizchip_reset>:

void wizchip_reset(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e6:	4808      	ldr	r0, [pc, #32]	; (8004708 <wizchip_reset+0x2c>)
 80046e8:	f7fc fe4e 	bl	8001388 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80046ec:	2064      	movs	r0, #100	; 0x64
 80046ee:	f7fc fb8f 	bl	8000e10 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80046f2:	2201      	movs	r2, #1
 80046f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <wizchip_reset+0x2c>)
 80046fa:	f7fc fe45 	bl	8001388 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80046fe:	2064      	movs	r0, #100	; 0x64
 8004700:	f7fc fb86 	bl	8000e10 <HAL_Delay>
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40020800 	.word	0x40020800

0800470c <wizchip_check>:

void wizchip_check(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 8004722:	f7ff ffad 	bl	8004680 <wizchip_initialize>
  wizchip_reset();
 8004726:	f7ff ffd9 	bl	80046dc <wizchip_reset>
  wizchip_check();
 800472a:	f7ff ffef 	bl	800470c <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	2000      	movs	r0, #0
 8004732:	f7ff fb67 	bl	8003e04 <ctlnetwork>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 8004740:	b5b0      	push	{r4, r5, r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af04      	add	r7, sp, #16
 8004746:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	2001      	movs	r0, #1
 8004754:	f7ff fb56 	bl	8003e04 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	4619      	mov	r1, r3
 800475e:	2008      	movs	r0, #8
 8004760:	f7ff fad4 	bl	8003d0c <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7d9b      	ldrb	r3, [r3, #22]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d109      	bne.n	8004780 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 800476c:	4839      	ldr	r0, [pc, #228]	; (8004854 <wizchip_network_information+0x114>)
 800476e:	f000 fa63 	bl	8004c38 <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	4619      	mov	r1, r3
 8004778:	4837      	ldr	r0, [pc, #220]	; (8004858 <wizchip_network_information+0x118>)
 800477a:	f000 f9d7 	bl	8004b2c <iprintf>
 800477e:	e008      	b.n	8004792 <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 8004780:	4834      	ldr	r0, [pc, #208]	; (8004854 <wizchip_network_information+0x114>)
 8004782:	f000 fa59 	bl	8004c38 <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4619      	mov	r1, r3
 800478c:	4833      	ldr	r0, [pc, #204]	; (800485c <wizchip_network_information+0x11c>)
 800478e:	f000 f9cd 	bl	8004b2c <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	461c      	mov	r4, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	789b      	ldrb	r3, [r3, #2]
 80047a2:	461d      	mov	r5, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	78db      	ldrb	r3, [r3, #3]
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	791b      	ldrb	r3, [r3, #4]
 80047ae:	4619      	mov	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	795b      	ldrb	r3, [r3, #5]
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	9101      	str	r1, [sp, #4]
 80047b8:	9200      	str	r2, [sp, #0]
 80047ba:	462b      	mov	r3, r5
 80047bc:	4622      	mov	r2, r4
 80047be:	4601      	mov	r1, r0
 80047c0:	4827      	ldr	r0, [pc, #156]	; (8004860 <wizchip_network_information+0x120>)
 80047c2:	f000 f9b3 	bl	8004b2c <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	799b      	ldrb	r3, [r3, #6]
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	79db      	ldrb	r3, [r3, #7]
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7a1b      	ldrb	r3, [r3, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7a5b      	ldrb	r3, [r3, #9]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4603      	mov	r3, r0
 80047e0:	4820      	ldr	r0, [pc, #128]	; (8004864 <wizchip_network_information+0x124>)
 80047e2:	f000 f9a3 	bl	8004b2c <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7a9b      	ldrb	r3, [r3, #10]
 80047ea:	4619      	mov	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7adb      	ldrb	r3, [r3, #11]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7b1b      	ldrb	r3, [r3, #12]
 80047f6:	4618      	mov	r0, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7b5b      	ldrb	r3, [r3, #13]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4603      	mov	r3, r0
 8004800:	4819      	ldr	r0, [pc, #100]	; (8004868 <wizchip_network_information+0x128>)
 8004802:	f000 f993 	bl	8004b2c <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	7b9b      	ldrb	r3, [r3, #14]
 800480a:	4619      	mov	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7bdb      	ldrb	r3, [r3, #15]
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	7c1b      	ldrb	r3, [r3, #16]
 8004816:	4618      	mov	r0, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7c5b      	ldrb	r3, [r3, #17]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4603      	mov	r3, r0
 8004820:	4812      	ldr	r0, [pc, #72]	; (800486c <wizchip_network_information+0x12c>)
 8004822:	f000 f983 	bl	8004b2c <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7c9b      	ldrb	r3, [r3, #18]
 800482a:	4619      	mov	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7cdb      	ldrb	r3, [r3, #19]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7d1b      	ldrb	r3, [r3, #20]
 8004836:	4618      	mov	r0, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7d5b      	ldrb	r3, [r3, #21]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4603      	mov	r3, r0
 8004840:	480b      	ldr	r0, [pc, #44]	; (8004870 <wizchip_network_information+0x130>)
 8004842:	f000 f973 	bl	8004b2c <iprintf>
  printf("====================================================================================================\n\n");
 8004846:	480b      	ldr	r0, [pc, #44]	; (8004874 <wizchip_network_information+0x134>)
 8004848:	f000 f9f6 	bl	8004c38 <puts>
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bdb0      	pop	{r4, r5, r7, pc}
 8004854:	08005b00 	.word	0x08005b00
 8004858:	08005b68 	.word	0x08005b68
 800485c:	08005b8c 	.word	0x08005b8c
 8004860:	08005bb4 	.word	0x08005bb4
 8004864:	08005be4 	.word	0x08005be4
 8004868:	08005c00 	.word	0x08005c00
 800486c:	08005c1c 	.word	0x08005c1c
 8004870:	08005c38 	.word	0x08005c38
 8004874:	08005c54 	.word	0x08005c54

08004878 <HAL_SYSTICK_Callback>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void HAL_SYSTICK_Callback(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  g_time_base++;
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_SYSTICK_Callback+0x48>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <HAL_SYSTICK_Callback+0x48>)
 8004884:	6013      	str	r3, [r2, #0]

  if ((g_time_base % 1) == 0) // uint : 1 millisecond, repeat every millisecond
  {
    g_msec++;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_SYSTICK_Callback+0x4c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <HAL_SYSTICK_Callback+0x4c>)
 800488e:	6013      	str	r3, [r2, #0]

    wizchip_1msec_timer_callback();
 8004890:	f000 f81e 	bl	80048d0 <wizchip_1msec_timer_callback>
  }

  if ((g_time_base % 1000) == 0) // uint : 1 second, repeat every second
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_SYSTICK_Callback+0x48>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_SYSTICK_Callback+0x50>)
 800489a:	fba3 1302 	umull	r1, r3, r3, r2
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_SYSTICK_Callback+0x44>
  {
    g_sec++;
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_SYSTICK_Callback+0x54>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a05      	ldr	r2, [pc, #20]	; (80048cc <HAL_SYSTICK_Callback+0x54>)
 80048b6:	6013      	str	r3, [r2, #0]

    wizchip_1sec_timer_callback();
 80048b8:	f000 f818 	bl	80048ec <wizchip_1sec_timer_callback>
  }
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200008ec 	.word	0x200008ec
 80048c4:	200008f4 	.word	0x200008f4
 80048c8:	10624dd3 	.word	0x10624dd3
 80048cc:	200008f0 	.word	0x200008f0

080048d0 <wizchip_1msec_timer_callback>:
{
  msec_timer_callback_ptr = callback;
}

void wizchip_1msec_timer_callback(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  if (msec_timer_callback_ptr != NULL)
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <wizchip_1msec_timer_callback+0x18>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <wizchip_1msec_timer_callback+0x12>
  {
    msec_timer_callback_ptr();
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <wizchip_1msec_timer_callback+0x18>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4798      	blx	r3
  }
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200009a0 	.word	0x200009a0

080048ec <wizchip_1sec_timer_callback>:
{
  sec_timer_callback_ptr = callback;
}

void wizchip_1sec_timer_callback(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  if (sec_timer_callback_ptr != NULL)
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <wizchip_1sec_timer_callback+0x18>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <wizchip_1sec_timer_callback+0x12>
  {
    sec_timer_callback_ptr();
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <wizchip_1sec_timer_callback+0x18>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4798      	blx	r3
  }
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200009a4 	.word	0x200009a4

08004908 <__errno>:
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <__errno+0x8>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000038 	.word	0x20000038

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f001 f824 	bl	8005974 <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	08005d74 	.word	0x08005d74
 8004950:	08005d74 	.word	0x08005d74
 8004954:	08005d74 	.word	0x08005d74
 8004958:	08005d78 	.word	0x08005d78

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <_free_r>:
 800496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800496e:	2900      	cmp	r1, #0
 8004970:	d044      	beq.n	80049fc <_free_r+0x90>
 8004972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004976:	9001      	str	r0, [sp, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f1a1 0404 	sub.w	r4, r1, #4
 800497e:	bfb8      	it	lt
 8004980:	18e4      	addlt	r4, r4, r3
 8004982:	f000 fcc9 	bl	8005318 <__malloc_lock>
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <_free_r+0x94>)
 8004988:	9801      	ldr	r0, [sp, #4]
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	b933      	cbnz	r3, 800499c <_free_r+0x30>
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6014      	str	r4, [r2, #0]
 8004992:	b003      	add	sp, #12
 8004994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004998:	f000 bcc4 	b.w	8005324 <__malloc_unlock>
 800499c:	42a3      	cmp	r3, r4
 800499e:	d908      	bls.n	80049b2 <_free_r+0x46>
 80049a0:	6825      	ldr	r5, [r4, #0]
 80049a2:	1961      	adds	r1, r4, r5
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf01      	itttt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	1949      	addeq	r1, r1, r5
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	e7ed      	b.n	800498e <_free_r+0x22>
 80049b2:	461a      	mov	r2, r3
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b10b      	cbz	r3, 80049bc <_free_r+0x50>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d9fa      	bls.n	80049b2 <_free_r+0x46>
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	1855      	adds	r5, r2, r1
 80049c0:	42a5      	cmp	r5, r4
 80049c2:	d10b      	bne.n	80049dc <_free_r+0x70>
 80049c4:	6824      	ldr	r4, [r4, #0]
 80049c6:	4421      	add	r1, r4
 80049c8:	1854      	adds	r4, r2, r1
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	d1e0      	bne.n	8004992 <_free_r+0x26>
 80049d0:	681c      	ldr	r4, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	4421      	add	r1, r4
 80049d8:	6011      	str	r1, [r2, #0]
 80049da:	e7da      	b.n	8004992 <_free_r+0x26>
 80049dc:	d902      	bls.n	80049e4 <_free_r+0x78>
 80049de:	230c      	movs	r3, #12
 80049e0:	6003      	str	r3, [r0, #0]
 80049e2:	e7d6      	b.n	8004992 <_free_r+0x26>
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf04      	itt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	bf04      	itt	eq
 80049f4:	1949      	addeq	r1, r1, r5
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	6054      	str	r4, [r2, #4]
 80049fa:	e7ca      	b.n	8004992 <_free_r+0x26>
 80049fc:	b003      	add	sp, #12
 80049fe:	bd30      	pop	{r4, r5, pc}
 8004a00:	200008f8 	.word	0x200008f8

08004a04 <sbrk_aligned>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4e0e      	ldr	r6, [pc, #56]	; (8004a40 <sbrk_aligned+0x3c>)
 8004a08:	460c      	mov	r4, r1
 8004a0a:	6831      	ldr	r1, [r6, #0]
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	b911      	cbnz	r1, 8004a16 <sbrk_aligned+0x12>
 8004a10:	f000 f91a 	bl	8004c48 <_sbrk_r>
 8004a14:	6030      	str	r0, [r6, #0]
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 f915 	bl	8004c48 <_sbrk_r>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	d00a      	beq.n	8004a38 <sbrk_aligned+0x34>
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d007      	beq.n	8004a3c <sbrk_aligned+0x38>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f90a 	bl	8004c48 <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d101      	bne.n	8004a3c <sbrk_aligned+0x38>
 8004a38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	200008fc 	.word	0x200008fc

08004a44 <_malloc_r>:
 8004a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a48:	1ccd      	adds	r5, r1, #3
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	4607      	mov	r7, r0
 8004a5a:	db01      	blt.n	8004a60 <_malloc_r+0x1c>
 8004a5c:	42a9      	cmp	r1, r5
 8004a5e:	d905      	bls.n	8004a6c <_malloc_r+0x28>
 8004a60:	230c      	movs	r3, #12
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	2600      	movs	r6, #0
 8004a66:	4630      	mov	r0, r6
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6c:	4e2e      	ldr	r6, [pc, #184]	; (8004b28 <_malloc_r+0xe4>)
 8004a6e:	f000 fc53 	bl	8005318 <__malloc_lock>
 8004a72:	6833      	ldr	r3, [r6, #0]
 8004a74:	461c      	mov	r4, r3
 8004a76:	bb34      	cbnz	r4, 8004ac6 <_malloc_r+0x82>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ffc2 	bl	8004a04 <sbrk_aligned>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	4604      	mov	r4, r0
 8004a84:	d14d      	bne.n	8004b22 <_malloc_r+0xde>
 8004a86:	6834      	ldr	r4, [r6, #0]
 8004a88:	4626      	mov	r6, r4
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	d140      	bne.n	8004b10 <_malloc_r+0xcc>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	4631      	mov	r1, r6
 8004a92:	4638      	mov	r0, r7
 8004a94:	eb04 0803 	add.w	r8, r4, r3
 8004a98:	f000 f8d6 	bl	8004c48 <_sbrk_r>
 8004a9c:	4580      	cmp	r8, r0
 8004a9e:	d13a      	bne.n	8004b16 <_malloc_r+0xd2>
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	3503      	adds	r5, #3
 8004aa4:	1a6d      	subs	r5, r5, r1
 8004aa6:	f025 0503 	bic.w	r5, r5, #3
 8004aaa:	3508      	adds	r5, #8
 8004aac:	2d0c      	cmp	r5, #12
 8004aae:	bf38      	it	cc
 8004ab0:	250c      	movcc	r5, #12
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ffa5 	bl	8004a04 <sbrk_aligned>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d02b      	beq.n	8004b16 <_malloc_r+0xd2>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	442b      	add	r3, r5
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	e00e      	b.n	8004ae4 <_malloc_r+0xa0>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	1b52      	subs	r2, r2, r5
 8004aca:	d41e      	bmi.n	8004b0a <_malloc_r+0xc6>
 8004acc:	2a0b      	cmp	r2, #11
 8004ace:	d916      	bls.n	8004afe <_malloc_r+0xba>
 8004ad0:	1961      	adds	r1, r4, r5
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	6025      	str	r5, [r4, #0]
 8004ad6:	bf18      	it	ne
 8004ad8:	6059      	strne	r1, [r3, #4]
 8004ada:	6863      	ldr	r3, [r4, #4]
 8004adc:	bf08      	it	eq
 8004ade:	6031      	streq	r1, [r6, #0]
 8004ae0:	5162      	str	r2, [r4, r5]
 8004ae2:	604b      	str	r3, [r1, #4]
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f104 060b 	add.w	r6, r4, #11
 8004aea:	f000 fc1b 	bl	8005324 <__malloc_unlock>
 8004aee:	f026 0607 	bic.w	r6, r6, #7
 8004af2:	1d23      	adds	r3, r4, #4
 8004af4:	1af2      	subs	r2, r6, r3
 8004af6:	d0b6      	beq.n	8004a66 <_malloc_r+0x22>
 8004af8:	1b9b      	subs	r3, r3, r6
 8004afa:	50a3      	str	r3, [r4, r2]
 8004afc:	e7b3      	b.n	8004a66 <_malloc_r+0x22>
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	bf0c      	ite	eq
 8004b04:	6032      	streq	r2, [r6, #0]
 8004b06:	605a      	strne	r2, [r3, #4]
 8004b08:	e7ec      	b.n	8004ae4 <_malloc_r+0xa0>
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	6864      	ldr	r4, [r4, #4]
 8004b0e:	e7b2      	b.n	8004a76 <_malloc_r+0x32>
 8004b10:	4634      	mov	r4, r6
 8004b12:	6876      	ldr	r6, [r6, #4]
 8004b14:	e7b9      	b.n	8004a8a <_malloc_r+0x46>
 8004b16:	230c      	movs	r3, #12
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f000 fc02 	bl	8005324 <__malloc_unlock>
 8004b20:	e7a1      	b.n	8004a66 <_malloc_r+0x22>
 8004b22:	6025      	str	r5, [r4, #0]
 8004b24:	e7de      	b.n	8004ae4 <_malloc_r+0xa0>
 8004b26:	bf00      	nop
 8004b28:	200008f8 	.word	0x200008f8

08004b2c <iprintf>:
 8004b2c:	b40f      	push	{r0, r1, r2, r3}
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <iprintf+0x2c>)
 8004b30:	b513      	push	{r0, r1, r4, lr}
 8004b32:	681c      	ldr	r4, [r3, #0]
 8004b34:	b124      	cbz	r4, 8004b40 <iprintf+0x14>
 8004b36:	69a3      	ldr	r3, [r4, #24]
 8004b38:	b913      	cbnz	r3, 8004b40 <iprintf+0x14>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fad4 	bl	80050e8 <__sinit>
 8004b40:	ab05      	add	r3, sp, #20
 8004b42:	9a04      	ldr	r2, [sp, #16]
 8004b44:	68a1      	ldr	r1, [r4, #8]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fc1b 	bl	8005384 <_vfiprintf_r>
 8004b4e:	b002      	add	sp, #8
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr
 8004b58:	20000038 	.word	0x20000038

08004b5c <_puts_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	460e      	mov	r6, r1
 8004b60:	4605      	mov	r5, r0
 8004b62:	b118      	cbz	r0, 8004b6c <_puts_r+0x10>
 8004b64:	6983      	ldr	r3, [r0, #24]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_puts_r+0x10>
 8004b68:	f000 fabe 	bl	80050e8 <__sinit>
 8004b6c:	69ab      	ldr	r3, [r5, #24]
 8004b6e:	68ac      	ldr	r4, [r5, #8]
 8004b70:	b913      	cbnz	r3, 8004b78 <_puts_r+0x1c>
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 fab8 	bl	80050e8 <__sinit>
 8004b78:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <_puts_r+0xd0>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d120      	bne.n	8004bc0 <_puts_r+0x64>
 8004b7e:	686c      	ldr	r4, [r5, #4]
 8004b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b82:	07db      	lsls	r3, r3, #31
 8004b84:	d405      	bmi.n	8004b92 <_puts_r+0x36>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	0598      	lsls	r0, r3, #22
 8004b8a:	d402      	bmi.n	8004b92 <_puts_r+0x36>
 8004b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b8e:	f000 fb49 	bl	8005224 <__retarget_lock_acquire_recursive>
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	0719      	lsls	r1, r3, #28
 8004b96:	d51d      	bpl.n	8004bd4 <_puts_r+0x78>
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	b1db      	cbz	r3, 8004bd4 <_puts_r+0x78>
 8004b9c:	3e01      	subs	r6, #1
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60a3      	str	r3, [r4, #8]
 8004ba8:	bb39      	cbnz	r1, 8004bfa <_puts_r+0x9e>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da38      	bge.n	8004c20 <_puts_r+0xc4>
 8004bae:	4622      	mov	r2, r4
 8004bb0:	210a      	movs	r1, #10
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f89c 	bl	8004cf0 <__swbuf_r>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d011      	beq.n	8004be0 <_puts_r+0x84>
 8004bbc:	250a      	movs	r5, #10
 8004bbe:	e011      	b.n	8004be4 <_puts_r+0x88>
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <_puts_r+0xd4>)
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d101      	bne.n	8004bca <_puts_r+0x6e>
 8004bc6:	68ac      	ldr	r4, [r5, #8]
 8004bc8:	e7da      	b.n	8004b80 <_puts_r+0x24>
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <_puts_r+0xd8>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	bf08      	it	eq
 8004bd0:	68ec      	ldreq	r4, [r5, #12]
 8004bd2:	e7d5      	b.n	8004b80 <_puts_r+0x24>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 f8ee 	bl	8004db8 <__swsetup_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d0dd      	beq.n	8004b9c <_puts_r+0x40>
 8004be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004be6:	07da      	lsls	r2, r3, #31
 8004be8:	d405      	bmi.n	8004bf6 <_puts_r+0x9a>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	059b      	lsls	r3, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_puts_r+0x9a>
 8004bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf2:	f000 fb18 	bl	8005226 <__retarget_lock_release_recursive>
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	bd70      	pop	{r4, r5, r6, pc}
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da04      	bge.n	8004c08 <_puts_r+0xac>
 8004bfe:	69a2      	ldr	r2, [r4, #24]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	dc06      	bgt.n	8004c12 <_puts_r+0xb6>
 8004c04:	290a      	cmp	r1, #10
 8004c06:	d004      	beq.n	8004c12 <_puts_r+0xb6>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	6022      	str	r2, [r4, #0]
 8004c0e:	7019      	strb	r1, [r3, #0]
 8004c10:	e7c5      	b.n	8004b9e <_puts_r+0x42>
 8004c12:	4622      	mov	r2, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f86b 	bl	8004cf0 <__swbuf_r>
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d1bf      	bne.n	8004b9e <_puts_r+0x42>
 8004c1e:	e7df      	b.n	8004be0 <_puts_r+0x84>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	250a      	movs	r5, #10
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	6022      	str	r2, [r4, #0]
 8004c28:	701d      	strb	r5, [r3, #0]
 8004c2a:	e7db      	b.n	8004be4 <_puts_r+0x88>
 8004c2c:	08005cf8 	.word	0x08005cf8
 8004c30:	08005d18 	.word	0x08005d18
 8004c34:	08005cd8 	.word	0x08005cd8

08004c38 <puts>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <puts+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7ff bf8d 	b.w	8004b5c <_puts_r>
 8004c42:	bf00      	nop
 8004c44:	20000038 	.word	0x20000038

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fb fff8 	bl	8000c48 <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000904 	.word	0x20000904

08004c68 <__sread>:
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c70:	f000 fe4c 	bl	800590c <_read_r>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	bfab      	itete	ge
 8004c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c7c:	181b      	addge	r3, r3, r0
 8004c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c82:	bfac      	ite	ge
 8004c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c86:	81a3      	strhlt	r3, [r4, #12]
 8004c88:	bd10      	pop	{r4, pc}

08004c8a <__swrite>:
 8004c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8e:	461f      	mov	r7, r3
 8004c90:	898b      	ldrh	r3, [r1, #12]
 8004c92:	05db      	lsls	r3, r3, #23
 8004c94:	4605      	mov	r5, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	4616      	mov	r6, r2
 8004c9a:	d505      	bpl.n	8004ca8 <__swrite+0x1e>
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f000 fac0 	bl	8005228 <_lseek_r>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	f000 b869 	b.w	8004d94 <_write_r>

08004cc2 <__sseek>:
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cca:	f000 faad 	bl	8005228 <_lseek_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	bf15      	itete	ne
 8004cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cde:	81a3      	strheq	r3, [r4, #12]
 8004ce0:	bf18      	it	ne
 8004ce2:	81a3      	strhne	r3, [r4, #12]
 8004ce4:	bd10      	pop	{r4, pc}

08004ce6 <__sclose>:
 8004ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cea:	f000 b8d3 	b.w	8004e94 <_close_r>
	...

08004cf0 <__swbuf_r>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	b118      	cbz	r0, 8004d02 <__swbuf_r+0x12>
 8004cfa:	6983      	ldr	r3, [r0, #24]
 8004cfc:	b90b      	cbnz	r3, 8004d02 <__swbuf_r+0x12>
 8004cfe:	f000 f9f3 	bl	80050e8 <__sinit>
 8004d02:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <__swbuf_r+0x98>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	d12b      	bne.n	8004d60 <__swbuf_r+0x70>
 8004d08:	686c      	ldr	r4, [r5, #4]
 8004d0a:	69a3      	ldr	r3, [r4, #24]
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	071a      	lsls	r2, r3, #28
 8004d12:	d52f      	bpl.n	8004d74 <__swbuf_r+0x84>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	b36b      	cbz	r3, 8004d74 <__swbuf_r+0x84>
 8004d18:	6923      	ldr	r3, [r4, #16]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1ac0      	subs	r0, r0, r3
 8004d1e:	6963      	ldr	r3, [r4, #20]
 8004d20:	b2f6      	uxtb	r6, r6
 8004d22:	4283      	cmp	r3, r0
 8004d24:	4637      	mov	r7, r6
 8004d26:	dc04      	bgt.n	8004d32 <__swbuf_r+0x42>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f948 	bl	8004fc0 <_fflush_r>
 8004d30:	bb30      	cbnz	r0, 8004d80 <__swbuf_r+0x90>
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	60a3      	str	r3, [r4, #8]
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	701e      	strb	r6, [r3, #0]
 8004d40:	6963      	ldr	r3, [r4, #20]
 8004d42:	3001      	adds	r0, #1
 8004d44:	4283      	cmp	r3, r0
 8004d46:	d004      	beq.n	8004d52 <__swbuf_r+0x62>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d506      	bpl.n	8004d5c <__swbuf_r+0x6c>
 8004d4e:	2e0a      	cmp	r6, #10
 8004d50:	d104      	bne.n	8004d5c <__swbuf_r+0x6c>
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f933 	bl	8004fc0 <_fflush_r>
 8004d5a:	b988      	cbnz	r0, 8004d80 <__swbuf_r+0x90>
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <__swbuf_r+0x9c>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swbuf_r+0x7a>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7cf      	b.n	8004d0a <__swbuf_r+0x1a>
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <__swbuf_r+0xa0>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7ca      	b.n	8004d0a <__swbuf_r+0x1a>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f81e 	bl	8004db8 <__swsetup_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d0cb      	beq.n	8004d18 <__swbuf_r+0x28>
 8004d80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d84:	e7ea      	b.n	8004d5c <__swbuf_r+0x6c>
 8004d86:	bf00      	nop
 8004d88:	08005cf8 	.word	0x08005cf8
 8004d8c:	08005d18 	.word	0x08005d18
 8004d90:	08005cd8 	.word	0x08005cd8

08004d94 <_write_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4d07      	ldr	r5, [pc, #28]	; (8004db4 <_write_r+0x20>)
 8004d98:	4604      	mov	r4, r0
 8004d9a:	4608      	mov	r0, r1
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	602a      	str	r2, [r5, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f7fb feff 	bl	8000ba6 <_write>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_write_r+0x1e>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_write_r+0x1e>
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	20000904 	.word	0x20000904

08004db8 <__swsetup_r>:
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <__swsetup_r+0xcc>)
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	b125      	cbz	r5, 8004dce <__swsetup_r+0x16>
 8004dc4:	69ab      	ldr	r3, [r5, #24]
 8004dc6:	b913      	cbnz	r3, 8004dce <__swsetup_r+0x16>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f98d 	bl	80050e8 <__sinit>
 8004dce:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <__swsetup_r+0xd0>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d10f      	bne.n	8004df4 <__swsetup_r+0x3c>
 8004dd4:	686c      	ldr	r4, [r5, #4]
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ddc:	0719      	lsls	r1, r3, #28
 8004dde:	d42c      	bmi.n	8004e3a <__swsetup_r+0x82>
 8004de0:	06dd      	lsls	r5, r3, #27
 8004de2:	d411      	bmi.n	8004e08 <__swsetup_r+0x50>
 8004de4:	2309      	movs	r3, #9
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df2:	e03e      	b.n	8004e72 <__swsetup_r+0xba>
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <__swsetup_r+0xd4>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <__swsetup_r+0x46>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7eb      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <__swsetup_r+0xd8>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7e6      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004e08:	0758      	lsls	r0, r3, #29
 8004e0a:	d512      	bpl.n	8004e32 <__swsetup_r+0x7a>
 8004e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0e:	b141      	cbz	r1, 8004e22 <__swsetup_r+0x6a>
 8004e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <__swsetup_r+0x66>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff fda7 	bl	800496c <_free_r>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6363      	str	r3, [r4, #52]	; 0x34
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f043 0308 	orr.w	r3, r3, #8
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	b94b      	cbnz	r3, 8004e52 <__swsetup_r+0x9a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d003      	beq.n	8004e52 <__swsetup_r+0x9a>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 fa23 	bl	8005298 <__smakebuf_r>
 8004e52:	89a0      	ldrh	r0, [r4, #12]
 8004e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e58:	f010 0301 	ands.w	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <__swsetup_r+0xbc>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60a3      	str	r3, [r4, #8]
 8004e62:	6963      	ldr	r3, [r4, #20]
 8004e64:	425b      	negs	r3, r3
 8004e66:	61a3      	str	r3, [r4, #24]
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	b943      	cbnz	r3, 8004e7e <__swsetup_r+0xc6>
 8004e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e70:	d1ba      	bne.n	8004de8 <__swsetup_r+0x30>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	0781      	lsls	r1, r0, #30
 8004e76:	bf58      	it	pl
 8004e78:	6963      	ldrpl	r3, [r4, #20]
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	e7f4      	b.n	8004e68 <__swsetup_r+0xb0>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e7f7      	b.n	8004e72 <__swsetup_r+0xba>
 8004e82:	bf00      	nop
 8004e84:	20000038 	.word	0x20000038
 8004e88:	08005cf8 	.word	0x08005cf8
 8004e8c:	08005d18 	.word	0x08005d18
 8004e90:	08005cd8 	.word	0x08005cd8

08004e94 <_close_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d06      	ldr	r5, [pc, #24]	; (8004eb0 <_close_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f7fb fe9d 	bl	8000bde <_close>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_close_r+0x1a>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_close_r+0x1a>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000904 	.word	0x20000904

08004eb4 <__sflush_r>:
 8004eb4:	898a      	ldrh	r2, [r1, #12]
 8004eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	0710      	lsls	r0, r2, #28
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	d458      	bmi.n	8004f74 <__sflush_r+0xc0>
 8004ec2:	684b      	ldr	r3, [r1, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc05      	bgt.n	8004ed4 <__sflush_r+0x20>
 8004ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dc02      	bgt.n	8004ed4 <__sflush_r+0x20>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d0f9      	beq.n	8004ece <__sflush_r+0x1a>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ee0:	682f      	ldr	r7, [r5, #0]
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	d032      	beq.n	8004f4c <__sflush_r+0x98>
 8004ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	075a      	lsls	r2, r3, #29
 8004eec:	d505      	bpl.n	8004efa <__sflush_r+0x46>
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	1ac0      	subs	r0, r0, r3
 8004ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ef4:	b10b      	cbz	r3, 8004efa <__sflush_r+0x46>
 8004ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef8:	1ac0      	subs	r0, r0, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	4602      	mov	r2, r0
 8004efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f00:	6a21      	ldr	r1, [r4, #32]
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b0      	blx	r6
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	d106      	bne.n	8004f1a <__sflush_r+0x66>
 8004f0c:	6829      	ldr	r1, [r5, #0]
 8004f0e:	291d      	cmp	r1, #29
 8004f10:	d82c      	bhi.n	8004f6c <__sflush_r+0xb8>
 8004f12:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <__sflush_r+0x108>)
 8004f14:	40ca      	lsrs	r2, r1
 8004f16:	07d6      	lsls	r6, r2, #31
 8004f18:	d528      	bpl.n	8004f6c <__sflush_r+0xb8>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	6062      	str	r2, [r4, #4]
 8004f1e:	04d9      	lsls	r1, r3, #19
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	d504      	bpl.n	8004f30 <__sflush_r+0x7c>
 8004f26:	1c42      	adds	r2, r0, #1
 8004f28:	d101      	bne.n	8004f2e <__sflush_r+0x7a>
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	b903      	cbnz	r3, 8004f30 <__sflush_r+0x7c>
 8004f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f32:	602f      	str	r7, [r5, #0]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d0ca      	beq.n	8004ece <__sflush_r+0x1a>
 8004f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	d002      	beq.n	8004f46 <__sflush_r+0x92>
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fd13 	bl	800496c <_free_r>
 8004f46:	2000      	movs	r0, #0
 8004f48:	6360      	str	r0, [r4, #52]	; 0x34
 8004f4a:	e7c1      	b.n	8004ed0 <__sflush_r+0x1c>
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b0      	blx	r6
 8004f54:	1c41      	adds	r1, r0, #1
 8004f56:	d1c7      	bne.n	8004ee8 <__sflush_r+0x34>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0c4      	beq.n	8004ee8 <__sflush_r+0x34>
 8004f5e:	2b1d      	cmp	r3, #29
 8004f60:	d001      	beq.n	8004f66 <__sflush_r+0xb2>
 8004f62:	2b16      	cmp	r3, #22
 8004f64:	d101      	bne.n	8004f6a <__sflush_r+0xb6>
 8004f66:	602f      	str	r7, [r5, #0]
 8004f68:	e7b1      	b.n	8004ece <__sflush_r+0x1a>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	e7ad      	b.n	8004ed0 <__sflush_r+0x1c>
 8004f74:	690f      	ldr	r7, [r1, #16]
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	d0a9      	beq.n	8004ece <__sflush_r+0x1a>
 8004f7a:	0793      	lsls	r3, r2, #30
 8004f7c:	680e      	ldr	r6, [r1, #0]
 8004f7e:	bf08      	it	eq
 8004f80:	694b      	ldreq	r3, [r1, #20]
 8004f82:	600f      	str	r7, [r1, #0]
 8004f84:	bf18      	it	ne
 8004f86:	2300      	movne	r3, #0
 8004f88:	eba6 0807 	sub.w	r8, r6, r7
 8004f8c:	608b      	str	r3, [r1, #8]
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	dd9c      	ble.n	8004ece <__sflush_r+0x1a>
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f98:	4643      	mov	r3, r8
 8004f9a:	463a      	mov	r2, r7
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b0      	blx	r6
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	dc06      	bgt.n	8004fb2 <__sflush_r+0xfe>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb0:	e78e      	b.n	8004ed0 <__sflush_r+0x1c>
 8004fb2:	4407      	add	r7, r0
 8004fb4:	eba8 0800 	sub.w	r8, r8, r0
 8004fb8:	e7e9      	b.n	8004f8e <__sflush_r+0xda>
 8004fba:	bf00      	nop
 8004fbc:	20400001 	.word	0x20400001

08004fc0 <_fflush_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	690b      	ldr	r3, [r1, #16]
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_fflush_r+0x10>
 8004fca:	2500      	movs	r5, #0
 8004fcc:	4628      	mov	r0, r5
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	b118      	cbz	r0, 8004fda <_fflush_r+0x1a>
 8004fd2:	6983      	ldr	r3, [r0, #24]
 8004fd4:	b90b      	cbnz	r3, 8004fda <_fflush_r+0x1a>
 8004fd6:	f000 f887 	bl	80050e8 <__sinit>
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <_fflush_r+0x6c>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	d11b      	bne.n	8005018 <_fflush_r+0x58>
 8004fe0:	686c      	ldr	r4, [r5, #4]
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <_fflush_r+0xa>
 8004fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d404      	bmi.n	8004ffa <_fflush_r+0x3a>
 8004ff0:	0599      	lsls	r1, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_fflush_r+0x3a>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f000 f915 	bl	8005224 <__retarget_lock_acquire_recursive>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7ff ff59 	bl	8004eb4 <__sflush_r>
 8005002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	4605      	mov	r5, r0
 8005008:	d4e0      	bmi.n	8004fcc <_fflush_r+0xc>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059b      	lsls	r3, r3, #22
 800500e:	d4dd      	bmi.n	8004fcc <_fflush_r+0xc>
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	f000 f908 	bl	8005226 <__retarget_lock_release_recursive>
 8005016:	e7d9      	b.n	8004fcc <_fflush_r+0xc>
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <_fflush_r+0x70>)
 800501a:	429c      	cmp	r4, r3
 800501c:	d101      	bne.n	8005022 <_fflush_r+0x62>
 800501e:	68ac      	ldr	r4, [r5, #8]
 8005020:	e7df      	b.n	8004fe2 <_fflush_r+0x22>
 8005022:	4b04      	ldr	r3, [pc, #16]	; (8005034 <_fflush_r+0x74>)
 8005024:	429c      	cmp	r4, r3
 8005026:	bf08      	it	eq
 8005028:	68ec      	ldreq	r4, [r5, #12]
 800502a:	e7da      	b.n	8004fe2 <_fflush_r+0x22>
 800502c:	08005cf8 	.word	0x08005cf8
 8005030:	08005d18 	.word	0x08005d18
 8005034:	08005cd8 	.word	0x08005cd8

08005038 <std>:
 8005038:	2300      	movs	r3, #0
 800503a:	b510      	push	{r4, lr}
 800503c:	4604      	mov	r4, r0
 800503e:	e9c0 3300 	strd	r3, r3, [r0]
 8005042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005046:	6083      	str	r3, [r0, #8]
 8005048:	8181      	strh	r1, [r0, #12]
 800504a:	6643      	str	r3, [r0, #100]	; 0x64
 800504c:	81c2      	strh	r2, [r0, #14]
 800504e:	6183      	str	r3, [r0, #24]
 8005050:	4619      	mov	r1, r3
 8005052:	2208      	movs	r2, #8
 8005054:	305c      	adds	r0, #92	; 0x5c
 8005056:	f7ff fc81 	bl	800495c <memset>
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x38>)
 800505c:	6263      	str	r3, [r4, #36]	; 0x24
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x3c>)
 8005060:	62a3      	str	r3, [r4, #40]	; 0x28
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <std+0x40>)
 8005064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <std+0x44>)
 8005068:	6224      	str	r4, [r4, #32]
 800506a:	6323      	str	r3, [r4, #48]	; 0x30
 800506c:	bd10      	pop	{r4, pc}
 800506e:	bf00      	nop
 8005070:	08004c69 	.word	0x08004c69
 8005074:	08004c8b 	.word	0x08004c8b
 8005078:	08004cc3 	.word	0x08004cc3
 800507c:	08004ce7 	.word	0x08004ce7

08005080 <_cleanup_r>:
 8005080:	4901      	ldr	r1, [pc, #4]	; (8005088 <_cleanup_r+0x8>)
 8005082:	f000 b8af 	b.w	80051e4 <_fwalk_reent>
 8005086:	bf00      	nop
 8005088:	08004fc1 	.word	0x08004fc1

0800508c <__sfmoreglue>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	2268      	movs	r2, #104	; 0x68
 8005090:	1e4d      	subs	r5, r1, #1
 8005092:	4355      	muls	r5, r2
 8005094:	460e      	mov	r6, r1
 8005096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800509a:	f7ff fcd3 	bl	8004a44 <_malloc_r>
 800509e:	4604      	mov	r4, r0
 80050a0:	b140      	cbz	r0, 80050b4 <__sfmoreglue+0x28>
 80050a2:	2100      	movs	r1, #0
 80050a4:	e9c0 1600 	strd	r1, r6, [r0]
 80050a8:	300c      	adds	r0, #12
 80050aa:	60a0      	str	r0, [r4, #8]
 80050ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050b0:	f7ff fc54 	bl	800495c <memset>
 80050b4:	4620      	mov	r0, r4
 80050b6:	bd70      	pop	{r4, r5, r6, pc}

080050b8 <__sfp_lock_acquire>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__sfp_lock_acquire+0x8>)
 80050ba:	f000 b8b3 	b.w	8005224 <__retarget_lock_acquire_recursive>
 80050be:	bf00      	nop
 80050c0:	20000901 	.word	0x20000901

080050c4 <__sfp_lock_release>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__sfp_lock_release+0x8>)
 80050c6:	f000 b8ae 	b.w	8005226 <__retarget_lock_release_recursive>
 80050ca:	bf00      	nop
 80050cc:	20000901 	.word	0x20000901

080050d0 <__sinit_lock_acquire>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__sinit_lock_acquire+0x8>)
 80050d2:	f000 b8a7 	b.w	8005224 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000902 	.word	0x20000902

080050dc <__sinit_lock_release>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__sinit_lock_release+0x8>)
 80050de:	f000 b8a2 	b.w	8005226 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000902 	.word	0x20000902

080050e8 <__sinit>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	4604      	mov	r4, r0
 80050ec:	f7ff fff0 	bl	80050d0 <__sinit_lock_acquire>
 80050f0:	69a3      	ldr	r3, [r4, #24]
 80050f2:	b11b      	cbz	r3, 80050fc <__sinit+0x14>
 80050f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f8:	f7ff bff0 	b.w	80050dc <__sinit_lock_release>
 80050fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005100:	6523      	str	r3, [r4, #80]	; 0x50
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <__sinit+0x68>)
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <__sinit+0x6c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	62a2      	str	r2, [r4, #40]	; 0x28
 800510a:	42a3      	cmp	r3, r4
 800510c:	bf04      	itt	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	61a3      	streq	r3, [r4, #24]
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f820 	bl	8005158 <__sfp>
 8005118:	6060      	str	r0, [r4, #4]
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f81c 	bl	8005158 <__sfp>
 8005120:	60a0      	str	r0, [r4, #8]
 8005122:	4620      	mov	r0, r4
 8005124:	f000 f818 	bl	8005158 <__sfp>
 8005128:	2200      	movs	r2, #0
 800512a:	60e0      	str	r0, [r4, #12]
 800512c:	2104      	movs	r1, #4
 800512e:	6860      	ldr	r0, [r4, #4]
 8005130:	f7ff ff82 	bl	8005038 <std>
 8005134:	68a0      	ldr	r0, [r4, #8]
 8005136:	2201      	movs	r2, #1
 8005138:	2109      	movs	r1, #9
 800513a:	f7ff ff7d 	bl	8005038 <std>
 800513e:	68e0      	ldr	r0, [r4, #12]
 8005140:	2202      	movs	r2, #2
 8005142:	2112      	movs	r1, #18
 8005144:	f7ff ff78 	bl	8005038 <std>
 8005148:	2301      	movs	r3, #1
 800514a:	61a3      	str	r3, [r4, #24]
 800514c:	e7d2      	b.n	80050f4 <__sinit+0xc>
 800514e:	bf00      	nop
 8005150:	08005cd4 	.word	0x08005cd4
 8005154:	08005081 	.word	0x08005081

08005158 <__sfp>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	4607      	mov	r7, r0
 800515c:	f7ff ffac 	bl	80050b8 <__sfp_lock_acquire>
 8005160:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <__sfp+0x84>)
 8005162:	681e      	ldr	r6, [r3, #0]
 8005164:	69b3      	ldr	r3, [r6, #24]
 8005166:	b913      	cbnz	r3, 800516e <__sfp+0x16>
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff ffbd 	bl	80050e8 <__sinit>
 800516e:	3648      	adds	r6, #72	; 0x48
 8005170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005174:	3b01      	subs	r3, #1
 8005176:	d503      	bpl.n	8005180 <__sfp+0x28>
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	b30b      	cbz	r3, 80051c0 <__sfp+0x68>
 800517c:	6836      	ldr	r6, [r6, #0]
 800517e:	e7f7      	b.n	8005170 <__sfp+0x18>
 8005180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005184:	b9d5      	cbnz	r5, 80051bc <__sfp+0x64>
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <__sfp+0x88>)
 8005188:	60e3      	str	r3, [r4, #12]
 800518a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800518e:	6665      	str	r5, [r4, #100]	; 0x64
 8005190:	f000 f847 	bl	8005222 <__retarget_lock_init_recursive>
 8005194:	f7ff ff96 	bl	80050c4 <__sfp_lock_release>
 8005198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800519c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051a0:	6025      	str	r5, [r4, #0]
 80051a2:	61a5      	str	r5, [r4, #24]
 80051a4:	2208      	movs	r2, #8
 80051a6:	4629      	mov	r1, r5
 80051a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051ac:	f7ff fbd6 	bl	800495c <memset>
 80051b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051b8:	4620      	mov	r0, r4
 80051ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051bc:	3468      	adds	r4, #104	; 0x68
 80051be:	e7d9      	b.n	8005174 <__sfp+0x1c>
 80051c0:	2104      	movs	r1, #4
 80051c2:	4638      	mov	r0, r7
 80051c4:	f7ff ff62 	bl	800508c <__sfmoreglue>
 80051c8:	4604      	mov	r4, r0
 80051ca:	6030      	str	r0, [r6, #0]
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1d5      	bne.n	800517c <__sfp+0x24>
 80051d0:	f7ff ff78 	bl	80050c4 <__sfp_lock_release>
 80051d4:	230c      	movs	r3, #12
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	e7ee      	b.n	80051b8 <__sfp+0x60>
 80051da:	bf00      	nop
 80051dc:	08005cd4 	.word	0x08005cd4
 80051e0:	ffff0001 	.word	0xffff0001

080051e4 <_fwalk_reent>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051f0:	2700      	movs	r7, #0
 80051f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f6:	f1b9 0901 	subs.w	r9, r9, #1
 80051fa:	d505      	bpl.n	8005208 <_fwalk_reent+0x24>
 80051fc:	6824      	ldr	r4, [r4, #0]
 80051fe:	2c00      	cmp	r4, #0
 8005200:	d1f7      	bne.n	80051f2 <_fwalk_reent+0xe>
 8005202:	4638      	mov	r0, r7
 8005204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005208:	89ab      	ldrh	r3, [r5, #12]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d907      	bls.n	800521e <_fwalk_reent+0x3a>
 800520e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005212:	3301      	adds	r3, #1
 8005214:	d003      	beq.n	800521e <_fwalk_reent+0x3a>
 8005216:	4629      	mov	r1, r5
 8005218:	4630      	mov	r0, r6
 800521a:	47c0      	blx	r8
 800521c:	4307      	orrs	r7, r0
 800521e:	3568      	adds	r5, #104	; 0x68
 8005220:	e7e9      	b.n	80051f6 <_fwalk_reent+0x12>

08005222 <__retarget_lock_init_recursive>:
 8005222:	4770      	bx	lr

08005224 <__retarget_lock_acquire_recursive>:
 8005224:	4770      	bx	lr

08005226 <__retarget_lock_release_recursive>:
 8005226:	4770      	bx	lr

08005228 <_lseek_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_lseek_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fb fcf8 	bl	8000c2c <_lseek>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_lseek_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_lseek_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000904 	.word	0x20000904

0800524c <__swhatbuf_r>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	460e      	mov	r6, r1
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	2900      	cmp	r1, #0
 8005256:	b096      	sub	sp, #88	; 0x58
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	da08      	bge.n	8005270 <__swhatbuf_r+0x24>
 800525e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	061a      	lsls	r2, r3, #24
 8005268:	d410      	bmi.n	800528c <__swhatbuf_r+0x40>
 800526a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800526e:	e00e      	b.n	800528e <__swhatbuf_r+0x42>
 8005270:	466a      	mov	r2, sp
 8005272:	f000 fb5d 	bl	8005930 <_fstat_r>
 8005276:	2800      	cmp	r0, #0
 8005278:	dbf1      	blt.n	800525e <__swhatbuf_r+0x12>
 800527a:	9a01      	ldr	r2, [sp, #4]
 800527c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005280:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005284:	425a      	negs	r2, r3
 8005286:	415a      	adcs	r2, r3
 8005288:	602a      	str	r2, [r5, #0]
 800528a:	e7ee      	b.n	800526a <__swhatbuf_r+0x1e>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	2000      	movs	r0, #0
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	b016      	add	sp, #88	; 0x58
 8005294:	bd70      	pop	{r4, r5, r6, pc}
	...

08005298 <__smakebuf_r>:
 8005298:	898b      	ldrh	r3, [r1, #12]
 800529a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800529c:	079d      	lsls	r5, r3, #30
 800529e:	4606      	mov	r6, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	d507      	bpl.n	80052b4 <__smakebuf_r+0x1c>
 80052a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	2301      	movs	r3, #1
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	b002      	add	sp, #8
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	ab01      	add	r3, sp, #4
 80052b6:	466a      	mov	r2, sp
 80052b8:	f7ff ffc8 	bl	800524c <__swhatbuf_r>
 80052bc:	9900      	ldr	r1, [sp, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff fbbf 	bl	8004a44 <_malloc_r>
 80052c6:	b948      	cbnz	r0, 80052dc <__smakebuf_r+0x44>
 80052c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052cc:	059a      	lsls	r2, r3, #22
 80052ce:	d4ef      	bmi.n	80052b0 <__smakebuf_r+0x18>
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	e7e3      	b.n	80052a4 <__smakebuf_r+0xc>
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <__smakebuf_r+0x7c>)
 80052de:	62b3      	str	r3, [r6, #40]	; 0x28
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	6020      	str	r0, [r4, #0]
 80052e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	6163      	str	r3, [r4, #20]
 80052ee:	9b01      	ldr	r3, [sp, #4]
 80052f0:	6120      	str	r0, [r4, #16]
 80052f2:	b15b      	cbz	r3, 800530c <__smakebuf_r+0x74>
 80052f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f8:	4630      	mov	r0, r6
 80052fa:	f000 fb2b 	bl	8005954 <_isatty_r>
 80052fe:	b128      	cbz	r0, 800530c <__smakebuf_r+0x74>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	89a0      	ldrh	r0, [r4, #12]
 800530e:	4305      	orrs	r5, r0
 8005310:	81a5      	strh	r5, [r4, #12]
 8005312:	e7cd      	b.n	80052b0 <__smakebuf_r+0x18>
 8005314:	08005081 	.word	0x08005081

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_lock+0x8>)
 800531a:	f7ff bf83 	b.w	8005224 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20000900 	.word	0x20000900

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__malloc_unlock+0x8>)
 8005326:	f7ff bf7e 	b.w	8005226 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20000900 	.word	0x20000900

08005330 <__sfputc_r>:
 8005330:	6893      	ldr	r3, [r2, #8]
 8005332:	3b01      	subs	r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	b410      	push	{r4}
 8005338:	6093      	str	r3, [r2, #8]
 800533a:	da08      	bge.n	800534e <__sfputc_r+0x1e>
 800533c:	6994      	ldr	r4, [r2, #24]
 800533e:	42a3      	cmp	r3, r4
 8005340:	db01      	blt.n	8005346 <__sfputc_r+0x16>
 8005342:	290a      	cmp	r1, #10
 8005344:	d103      	bne.n	800534e <__sfputc_r+0x1e>
 8005346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534a:	f7ff bcd1 	b.w	8004cf0 <__swbuf_r>
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	1c58      	adds	r0, r3, #1
 8005352:	6010      	str	r0, [r2, #0]
 8005354:	7019      	strb	r1, [r3, #0]
 8005356:	4608      	mov	r0, r1
 8005358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535c:	4770      	bx	lr

0800535e <__sfputs_r>:
 800535e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005360:	4606      	mov	r6, r0
 8005362:	460f      	mov	r7, r1
 8005364:	4614      	mov	r4, r2
 8005366:	18d5      	adds	r5, r2, r3
 8005368:	42ac      	cmp	r4, r5
 800536a:	d101      	bne.n	8005370 <__sfputs_r+0x12>
 800536c:	2000      	movs	r0, #0
 800536e:	e007      	b.n	8005380 <__sfputs_r+0x22>
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	463a      	mov	r2, r7
 8005376:	4630      	mov	r0, r6
 8005378:	f7ff ffda 	bl	8005330 <__sfputc_r>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d1f3      	bne.n	8005368 <__sfputs_r+0xa>
 8005380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005384 <_vfiprintf_r>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	460d      	mov	r5, r1
 800538a:	b09d      	sub	sp, #116	; 0x74
 800538c:	4614      	mov	r4, r2
 800538e:	4698      	mov	r8, r3
 8005390:	4606      	mov	r6, r0
 8005392:	b118      	cbz	r0, 800539c <_vfiprintf_r+0x18>
 8005394:	6983      	ldr	r3, [r0, #24]
 8005396:	b90b      	cbnz	r3, 800539c <_vfiprintf_r+0x18>
 8005398:	f7ff fea6 	bl	80050e8 <__sinit>
 800539c:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <_vfiprintf_r+0x240>)
 800539e:	429d      	cmp	r5, r3
 80053a0:	d11b      	bne.n	80053da <_vfiprintf_r+0x56>
 80053a2:	6875      	ldr	r5, [r6, #4]
 80053a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a6:	07d9      	lsls	r1, r3, #31
 80053a8:	d405      	bmi.n	80053b6 <_vfiprintf_r+0x32>
 80053aa:	89ab      	ldrh	r3, [r5, #12]
 80053ac:	059a      	lsls	r2, r3, #22
 80053ae:	d402      	bmi.n	80053b6 <_vfiprintf_r+0x32>
 80053b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b2:	f7ff ff37 	bl	8005224 <__retarget_lock_acquire_recursive>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	071b      	lsls	r3, r3, #28
 80053ba:	d501      	bpl.n	80053c0 <_vfiprintf_r+0x3c>
 80053bc:	692b      	ldr	r3, [r5, #16]
 80053be:	b9eb      	cbnz	r3, 80053fc <_vfiprintf_r+0x78>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4630      	mov	r0, r6
 80053c4:	f7ff fcf8 	bl	8004db8 <__swsetup_r>
 80053c8:	b1c0      	cbz	r0, 80053fc <_vfiprintf_r+0x78>
 80053ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053cc:	07dc      	lsls	r4, r3, #31
 80053ce:	d50e      	bpl.n	80053ee <_vfiprintf_r+0x6a>
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053d4:	b01d      	add	sp, #116	; 0x74
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <_vfiprintf_r+0x244>)
 80053dc:	429d      	cmp	r5, r3
 80053de:	d101      	bne.n	80053e4 <_vfiprintf_r+0x60>
 80053e0:	68b5      	ldr	r5, [r6, #8]
 80053e2:	e7df      	b.n	80053a4 <_vfiprintf_r+0x20>
 80053e4:	4b79      	ldr	r3, [pc, #484]	; (80055cc <_vfiprintf_r+0x248>)
 80053e6:	429d      	cmp	r5, r3
 80053e8:	bf08      	it	eq
 80053ea:	68f5      	ldreq	r5, [r6, #12]
 80053ec:	e7da      	b.n	80053a4 <_vfiprintf_r+0x20>
 80053ee:	89ab      	ldrh	r3, [r5, #12]
 80053f0:	0598      	lsls	r0, r3, #22
 80053f2:	d4ed      	bmi.n	80053d0 <_vfiprintf_r+0x4c>
 80053f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f6:	f7ff ff16 	bl	8005226 <__retarget_lock_release_recursive>
 80053fa:	e7e9      	b.n	80053d0 <_vfiprintf_r+0x4c>
 80053fc:	2300      	movs	r3, #0
 80053fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005400:	2320      	movs	r3, #32
 8005402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005406:	f8cd 800c 	str.w	r8, [sp, #12]
 800540a:	2330      	movs	r3, #48	; 0x30
 800540c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055d0 <_vfiprintf_r+0x24c>
 8005410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005414:	f04f 0901 	mov.w	r9, #1
 8005418:	4623      	mov	r3, r4
 800541a:	469a      	mov	sl, r3
 800541c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005420:	b10a      	cbz	r2, 8005426 <_vfiprintf_r+0xa2>
 8005422:	2a25      	cmp	r2, #37	; 0x25
 8005424:	d1f9      	bne.n	800541a <_vfiprintf_r+0x96>
 8005426:	ebba 0b04 	subs.w	fp, sl, r4
 800542a:	d00b      	beq.n	8005444 <_vfiprintf_r+0xc0>
 800542c:	465b      	mov	r3, fp
 800542e:	4622      	mov	r2, r4
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ff93 	bl	800535e <__sfputs_r>
 8005438:	3001      	adds	r0, #1
 800543a:	f000 80aa 	beq.w	8005592 <_vfiprintf_r+0x20e>
 800543e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005440:	445a      	add	r2, fp
 8005442:	9209      	str	r2, [sp, #36]	; 0x24
 8005444:	f89a 3000 	ldrb.w	r3, [sl]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a2 	beq.w	8005592 <_vfiprintf_r+0x20e>
 800544e:	2300      	movs	r3, #0
 8005450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005458:	f10a 0a01 	add.w	sl, sl, #1
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005464:	931a      	str	r3, [sp, #104]	; 0x68
 8005466:	4654      	mov	r4, sl
 8005468:	2205      	movs	r2, #5
 800546a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546e:	4858      	ldr	r0, [pc, #352]	; (80055d0 <_vfiprintf_r+0x24c>)
 8005470:	f7fa febe 	bl	80001f0 <memchr>
 8005474:	9a04      	ldr	r2, [sp, #16]
 8005476:	b9d8      	cbnz	r0, 80054b0 <_vfiprintf_r+0x12c>
 8005478:	06d1      	lsls	r1, r2, #27
 800547a:	bf44      	itt	mi
 800547c:	2320      	movmi	r3, #32
 800547e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005482:	0713      	lsls	r3, r2, #28
 8005484:	bf44      	itt	mi
 8005486:	232b      	movmi	r3, #43	; 0x2b
 8005488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548c:	f89a 3000 	ldrb.w	r3, [sl]
 8005490:	2b2a      	cmp	r3, #42	; 0x2a
 8005492:	d015      	beq.n	80054c0 <_vfiprintf_r+0x13c>
 8005494:	9a07      	ldr	r2, [sp, #28]
 8005496:	4654      	mov	r4, sl
 8005498:	2000      	movs	r0, #0
 800549a:	f04f 0c0a 	mov.w	ip, #10
 800549e:	4621      	mov	r1, r4
 80054a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a4:	3b30      	subs	r3, #48	; 0x30
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d94e      	bls.n	8005548 <_vfiprintf_r+0x1c4>
 80054aa:	b1b0      	cbz	r0, 80054da <_vfiprintf_r+0x156>
 80054ac:	9207      	str	r2, [sp, #28]
 80054ae:	e014      	b.n	80054da <_vfiprintf_r+0x156>
 80054b0:	eba0 0308 	sub.w	r3, r0, r8
 80054b4:	fa09 f303 	lsl.w	r3, r9, r3
 80054b8:	4313      	orrs	r3, r2
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	46a2      	mov	sl, r4
 80054be:	e7d2      	b.n	8005466 <_vfiprintf_r+0xe2>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	1d19      	adds	r1, r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	9103      	str	r1, [sp, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bfbb      	ittet	lt
 80054cc:	425b      	neglt	r3, r3
 80054ce:	f042 0202 	orrlt.w	r2, r2, #2
 80054d2:	9307      	strge	r3, [sp, #28]
 80054d4:	9307      	strlt	r3, [sp, #28]
 80054d6:	bfb8      	it	lt
 80054d8:	9204      	strlt	r2, [sp, #16]
 80054da:	7823      	ldrb	r3, [r4, #0]
 80054dc:	2b2e      	cmp	r3, #46	; 0x2e
 80054de:	d10c      	bne.n	80054fa <_vfiprintf_r+0x176>
 80054e0:	7863      	ldrb	r3, [r4, #1]
 80054e2:	2b2a      	cmp	r3, #42	; 0x2a
 80054e4:	d135      	bne.n	8005552 <_vfiprintf_r+0x1ce>
 80054e6:	9b03      	ldr	r3, [sp, #12]
 80054e8:	1d1a      	adds	r2, r3, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	9203      	str	r2, [sp, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bfb8      	it	lt
 80054f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054f6:	3402      	adds	r4, #2
 80054f8:	9305      	str	r3, [sp, #20]
 80054fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055e0 <_vfiprintf_r+0x25c>
 80054fe:	7821      	ldrb	r1, [r4, #0]
 8005500:	2203      	movs	r2, #3
 8005502:	4650      	mov	r0, sl
 8005504:	f7fa fe74 	bl	80001f0 <memchr>
 8005508:	b140      	cbz	r0, 800551c <_vfiprintf_r+0x198>
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	eba0 000a 	sub.w	r0, r0, sl
 8005510:	fa03 f000 	lsl.w	r0, r3, r0
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	4303      	orrs	r3, r0
 8005518:	3401      	adds	r4, #1
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005520:	482c      	ldr	r0, [pc, #176]	; (80055d4 <_vfiprintf_r+0x250>)
 8005522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005526:	2206      	movs	r2, #6
 8005528:	f7fa fe62 	bl	80001f0 <memchr>
 800552c:	2800      	cmp	r0, #0
 800552e:	d03f      	beq.n	80055b0 <_vfiprintf_r+0x22c>
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <_vfiprintf_r+0x254>)
 8005532:	bb1b      	cbnz	r3, 800557c <_vfiprintf_r+0x1f8>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	3307      	adds	r3, #7
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	3308      	adds	r3, #8
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	443b      	add	r3, r7
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	e767      	b.n	8005418 <_vfiprintf_r+0x94>
 8005548:	fb0c 3202 	mla	r2, ip, r2, r3
 800554c:	460c      	mov	r4, r1
 800554e:	2001      	movs	r0, #1
 8005550:	e7a5      	b.n	800549e <_vfiprintf_r+0x11a>
 8005552:	2300      	movs	r3, #0
 8005554:	3401      	adds	r4, #1
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	4619      	mov	r1, r3
 800555a:	f04f 0c0a 	mov.w	ip, #10
 800555e:	4620      	mov	r0, r4
 8005560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005564:	3a30      	subs	r2, #48	; 0x30
 8005566:	2a09      	cmp	r2, #9
 8005568:	d903      	bls.n	8005572 <_vfiprintf_r+0x1ee>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0c5      	beq.n	80054fa <_vfiprintf_r+0x176>
 800556e:	9105      	str	r1, [sp, #20]
 8005570:	e7c3      	b.n	80054fa <_vfiprintf_r+0x176>
 8005572:	fb0c 2101 	mla	r1, ip, r1, r2
 8005576:	4604      	mov	r4, r0
 8005578:	2301      	movs	r3, #1
 800557a:	e7f0      	b.n	800555e <_vfiprintf_r+0x1da>
 800557c:	ab03      	add	r3, sp, #12
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	462a      	mov	r2, r5
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <_vfiprintf_r+0x258>)
 8005584:	a904      	add	r1, sp, #16
 8005586:	4630      	mov	r0, r6
 8005588:	f3af 8000 	nop.w
 800558c:	4607      	mov	r7, r0
 800558e:	1c78      	adds	r0, r7, #1
 8005590:	d1d6      	bne.n	8005540 <_vfiprintf_r+0x1bc>
 8005592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005594:	07d9      	lsls	r1, r3, #31
 8005596:	d405      	bmi.n	80055a4 <_vfiprintf_r+0x220>
 8005598:	89ab      	ldrh	r3, [r5, #12]
 800559a:	059a      	lsls	r2, r3, #22
 800559c:	d402      	bmi.n	80055a4 <_vfiprintf_r+0x220>
 800559e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055a0:	f7ff fe41 	bl	8005226 <__retarget_lock_release_recursive>
 80055a4:	89ab      	ldrh	r3, [r5, #12]
 80055a6:	065b      	lsls	r3, r3, #25
 80055a8:	f53f af12 	bmi.w	80053d0 <_vfiprintf_r+0x4c>
 80055ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ae:	e711      	b.n	80053d4 <_vfiprintf_r+0x50>
 80055b0:	ab03      	add	r3, sp, #12
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	462a      	mov	r2, r5
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <_vfiprintf_r+0x258>)
 80055b8:	a904      	add	r1, sp, #16
 80055ba:	4630      	mov	r0, r6
 80055bc:	f000 f880 	bl	80056c0 <_printf_i>
 80055c0:	e7e4      	b.n	800558c <_vfiprintf_r+0x208>
 80055c2:	bf00      	nop
 80055c4:	08005cf8 	.word	0x08005cf8
 80055c8:	08005d18 	.word	0x08005d18
 80055cc:	08005cd8 	.word	0x08005cd8
 80055d0:	08005d38 	.word	0x08005d38
 80055d4:	08005d42 	.word	0x08005d42
 80055d8:	00000000 	.word	0x00000000
 80055dc:	0800535f 	.word	0x0800535f
 80055e0:	08005d3e 	.word	0x08005d3e

080055e4 <_printf_common>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	4616      	mov	r6, r2
 80055ea:	4699      	mov	r9, r3
 80055ec:	688a      	ldr	r2, [r1, #8]
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bfb8      	it	lt
 80055f8:	4613      	movlt	r3, r2
 80055fa:	6033      	str	r3, [r6, #0]
 80055fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005600:	4607      	mov	r7, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b10a      	cbz	r2, 800560a <_printf_common+0x26>
 8005606:	3301      	adds	r3, #1
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	0699      	lsls	r1, r3, #26
 800560e:	bf42      	ittt	mi
 8005610:	6833      	ldrmi	r3, [r6, #0]
 8005612:	3302      	addmi	r3, #2
 8005614:	6033      	strmi	r3, [r6, #0]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d106      	bne.n	800562c <_printf_common+0x48>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	6832      	ldr	r2, [r6, #0]
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc26      	bgt.n	800567a <_printf_common+0x96>
 800562c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005630:	1e13      	subs	r3, r2, #0
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	2301      	movne	r3, #1
 8005638:	0692      	lsls	r2, r2, #26
 800563a:	d42b      	bmi.n	8005694 <_printf_common+0xb0>
 800563c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005640:	4649      	mov	r1, r9
 8005642:	4638      	mov	r0, r7
 8005644:	47c0      	blx	r8
 8005646:	3001      	adds	r0, #1
 8005648:	d01e      	beq.n	8005688 <_printf_common+0xa4>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	68e5      	ldr	r5, [r4, #12]
 800564e:	6832      	ldr	r2, [r6, #0]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf08      	it	eq
 8005658:	1aad      	subeq	r5, r5, r2
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	bf0c      	ite	eq
 8005660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005664:	2500      	movne	r5, #0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfc4      	itt	gt
 800566a:	1a9b      	subgt	r3, r3, r2
 800566c:	18ed      	addgt	r5, r5, r3
 800566e:	2600      	movs	r6, #0
 8005670:	341a      	adds	r4, #26
 8005672:	42b5      	cmp	r5, r6
 8005674:	d11a      	bne.n	80056ac <_printf_common+0xc8>
 8005676:	2000      	movs	r0, #0
 8005678:	e008      	b.n	800568c <_printf_common+0xa8>
 800567a:	2301      	movs	r3, #1
 800567c:	4652      	mov	r2, sl
 800567e:	4649      	mov	r1, r9
 8005680:	4638      	mov	r0, r7
 8005682:	47c0      	blx	r8
 8005684:	3001      	adds	r0, #1
 8005686:	d103      	bne.n	8005690 <_printf_common+0xac>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	3501      	adds	r5, #1
 8005692:	e7c6      	b.n	8005622 <_printf_common+0x3e>
 8005694:	18e1      	adds	r1, r4, r3
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800569e:	4422      	add	r2, r4
 80056a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a8:	3302      	adds	r3, #2
 80056aa:	e7c7      	b.n	800563c <_printf_common+0x58>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4622      	mov	r2, r4
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d0e6      	beq.n	8005688 <_printf_common+0xa4>
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7d9      	b.n	8005672 <_printf_common+0x8e>
	...

080056c0 <_printf_i>:
 80056c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	7e0f      	ldrb	r7, [r1, #24]
 80056c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056c8:	2f78      	cmp	r7, #120	; 0x78
 80056ca:	4691      	mov	r9, r2
 80056cc:	4680      	mov	r8, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	469a      	mov	sl, r3
 80056d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056d6:	d807      	bhi.n	80056e8 <_printf_i+0x28>
 80056d8:	2f62      	cmp	r7, #98	; 0x62
 80056da:	d80a      	bhi.n	80056f2 <_printf_i+0x32>
 80056dc:	2f00      	cmp	r7, #0
 80056de:	f000 80d8 	beq.w	8005892 <_printf_i+0x1d2>
 80056e2:	2f58      	cmp	r7, #88	; 0x58
 80056e4:	f000 80a3 	beq.w	800582e <_printf_i+0x16e>
 80056e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f0:	e03a      	b.n	8005768 <_printf_i+0xa8>
 80056f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056f6:	2b15      	cmp	r3, #21
 80056f8:	d8f6      	bhi.n	80056e8 <_printf_i+0x28>
 80056fa:	a101      	add	r1, pc, #4	; (adr r1, 8005700 <_printf_i+0x40>)
 80056fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005700:	08005759 	.word	0x08005759
 8005704:	0800576d 	.word	0x0800576d
 8005708:	080056e9 	.word	0x080056e9
 800570c:	080056e9 	.word	0x080056e9
 8005710:	080056e9 	.word	0x080056e9
 8005714:	080056e9 	.word	0x080056e9
 8005718:	0800576d 	.word	0x0800576d
 800571c:	080056e9 	.word	0x080056e9
 8005720:	080056e9 	.word	0x080056e9
 8005724:	080056e9 	.word	0x080056e9
 8005728:	080056e9 	.word	0x080056e9
 800572c:	08005879 	.word	0x08005879
 8005730:	0800579d 	.word	0x0800579d
 8005734:	0800585b 	.word	0x0800585b
 8005738:	080056e9 	.word	0x080056e9
 800573c:	080056e9 	.word	0x080056e9
 8005740:	0800589b 	.word	0x0800589b
 8005744:	080056e9 	.word	0x080056e9
 8005748:	0800579d 	.word	0x0800579d
 800574c:	080056e9 	.word	0x080056e9
 8005750:	080056e9 	.word	0x080056e9
 8005754:	08005863 	.word	0x08005863
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	1d1a      	adds	r2, r3, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005768:	2301      	movs	r3, #1
 800576a:	e0a3      	b.n	80058b4 <_printf_i+0x1f4>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	6829      	ldr	r1, [r5, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	f101 0304 	add.w	r3, r1, #4
 8005776:	d50a      	bpl.n	800578e <_printf_i+0xce>
 8005778:	680e      	ldr	r6, [r1, #0]
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	2e00      	cmp	r6, #0
 800577e:	da03      	bge.n	8005788 <_printf_i+0xc8>
 8005780:	232d      	movs	r3, #45	; 0x2d
 8005782:	4276      	negs	r6, r6
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	485e      	ldr	r0, [pc, #376]	; (8005904 <_printf_i+0x244>)
 800578a:	230a      	movs	r3, #10
 800578c:	e019      	b.n	80057c2 <_printf_i+0x102>
 800578e:	680e      	ldr	r6, [r1, #0]
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005796:	bf18      	it	ne
 8005798:	b236      	sxthne	r6, r6
 800579a:	e7ef      	b.n	800577c <_printf_i+0xbc>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	0601      	lsls	r1, r0, #24
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0xec>
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0xf2>
 80057ac:	0646      	lsls	r6, r0, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0xe8>
 80057b0:	881e      	ldrh	r6, [r3, #0]
 80057b2:	4854      	ldr	r0, [pc, #336]	; (8005904 <_printf_i+0x244>)
 80057b4:	2f6f      	cmp	r7, #111	; 0x6f
 80057b6:	bf0c      	ite	eq
 80057b8:	2308      	moveq	r3, #8
 80057ba:	230a      	movne	r3, #10
 80057bc:	2100      	movs	r1, #0
 80057be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c2:	6865      	ldr	r5, [r4, #4]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	bfa2      	ittt	ge
 80057ca:	6821      	ldrge	r1, [r4, #0]
 80057cc:	f021 0104 	bicge.w	r1, r1, #4
 80057d0:	6021      	strge	r1, [r4, #0]
 80057d2:	b90e      	cbnz	r6, 80057d8 <_printf_i+0x118>
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d04d      	beq.n	8005874 <_printf_i+0x1b4>
 80057d8:	4615      	mov	r5, r2
 80057da:	fbb6 f1f3 	udiv	r1, r6, r3
 80057de:	fb03 6711 	mls	r7, r3, r1, r6
 80057e2:	5dc7      	ldrb	r7, [r0, r7]
 80057e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057e8:	4637      	mov	r7, r6
 80057ea:	42bb      	cmp	r3, r7
 80057ec:	460e      	mov	r6, r1
 80057ee:	d9f4      	bls.n	80057da <_printf_i+0x11a>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d10b      	bne.n	800580c <_printf_i+0x14c>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07de      	lsls	r6, r3, #31
 80057f8:	d508      	bpl.n	800580c <_printf_i+0x14c>
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	4299      	cmp	r1, r3
 8005800:	bfde      	ittt	le
 8005802:	2330      	movle	r3, #48	; 0x30
 8005804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005808:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800580c:	1b52      	subs	r2, r2, r5
 800580e:	6122      	str	r2, [r4, #16]
 8005810:	f8cd a000 	str.w	sl, [sp]
 8005814:	464b      	mov	r3, r9
 8005816:	aa03      	add	r2, sp, #12
 8005818:	4621      	mov	r1, r4
 800581a:	4640      	mov	r0, r8
 800581c:	f7ff fee2 	bl	80055e4 <_printf_common>
 8005820:	3001      	adds	r0, #1
 8005822:	d14c      	bne.n	80058be <_printf_i+0x1fe>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005828:	b004      	add	sp, #16
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	4835      	ldr	r0, [pc, #212]	; (8005904 <_printf_i+0x244>)
 8005830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005834:	6829      	ldr	r1, [r5, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f851 6b04 	ldr.w	r6, [r1], #4
 800583c:	6029      	str	r1, [r5, #0]
 800583e:	061d      	lsls	r5, r3, #24
 8005840:	d514      	bpl.n	800586c <_printf_i+0x1ac>
 8005842:	07df      	lsls	r7, r3, #31
 8005844:	bf44      	itt	mi
 8005846:	f043 0320 	orrmi.w	r3, r3, #32
 800584a:	6023      	strmi	r3, [r4, #0]
 800584c:	b91e      	cbnz	r6, 8005856 <_printf_i+0x196>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	f023 0320 	bic.w	r3, r3, #32
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	2310      	movs	r3, #16
 8005858:	e7b0      	b.n	80057bc <_printf_i+0xfc>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	2378      	movs	r3, #120	; 0x78
 8005864:	4828      	ldr	r0, [pc, #160]	; (8005908 <_printf_i+0x248>)
 8005866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800586a:	e7e3      	b.n	8005834 <_printf_i+0x174>
 800586c:	0659      	lsls	r1, r3, #25
 800586e:	bf48      	it	mi
 8005870:	b2b6      	uxthmi	r6, r6
 8005872:	e7e6      	b.n	8005842 <_printf_i+0x182>
 8005874:	4615      	mov	r5, r2
 8005876:	e7bb      	b.n	80057f0 <_printf_i+0x130>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6826      	ldr	r6, [r4, #0]
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	1d18      	adds	r0, r3, #4
 8005880:	6028      	str	r0, [r5, #0]
 8005882:	0635      	lsls	r5, r6, #24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	d501      	bpl.n	800588c <_printf_i+0x1cc>
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0x1d2>
 800588c:	0670      	lsls	r0, r6, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0x1c8>
 8005890:	8019      	strh	r1, [r3, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	4615      	mov	r5, r2
 8005898:	e7ba      	b.n	8005810 <_printf_i+0x150>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fa fca2 	bl	80001f0 <memchr>
 80058ac:	b108      	cbz	r0, 80058b2 <_printf_i+0x1f2>
 80058ae:	1b40      	subs	r0, r0, r5
 80058b0:	6060      	str	r0, [r4, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	e7a8      	b.n	8005810 <_printf_i+0x150>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d0ab      	beq.n	8005824 <_printf_i+0x164>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	079b      	lsls	r3, r3, #30
 80058d0:	d413      	bmi.n	80058fa <_printf_i+0x23a>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e7a4      	b.n	8005828 <_printf_i+0x168>
 80058de:	2301      	movs	r3, #1
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	47d0      	blx	sl
 80058e8:	3001      	adds	r0, #1
 80058ea:	d09b      	beq.n	8005824 <_printf_i+0x164>
 80058ec:	3501      	adds	r5, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	9903      	ldr	r1, [sp, #12]
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dcf2      	bgt.n	80058de <_printf_i+0x21e>
 80058f8:	e7eb      	b.n	80058d2 <_printf_i+0x212>
 80058fa:	2500      	movs	r5, #0
 80058fc:	f104 0619 	add.w	r6, r4, #25
 8005900:	e7f5      	b.n	80058ee <_printf_i+0x22e>
 8005902:	bf00      	nop
 8005904:	08005d49 	.word	0x08005d49
 8005908:	08005d5a 	.word	0x08005d5a

0800590c <_read_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_read_r+0x20>)
 8005910:	4604      	mov	r4, r0
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fb f926 	bl	8000b6c <_read>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_read_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_read_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	20000904 	.word	0x20000904

08005930 <_fstat_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	; (8005950 <_fstat_r+0x20>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	f7fb f95a 	bl	8000bf6 <_fstat>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d102      	bne.n	800594c <_fstat_r+0x1c>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	b103      	cbz	r3, 800594c <_fstat_r+0x1c>
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	20000904 	.word	0x20000904

08005954 <_isatty_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_isatty_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7fb f959 	bl	8000c16 <_isatty>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_isatty_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_isatty_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000904 	.word	0x20000904

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
