
NUCLEO-F722ZE-STEPPER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004550  08004550  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  2000000c  08004564  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08004564  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c21  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bb  00000000  00000000  00033c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226f9  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013955  00000000  00000000  0005a889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6c8  00000000  00000000  0006e1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001488a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  001488f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004518 	.word	0x08004518

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08004518 	.word	0x08004518

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t us)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <delay+0x30>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000536:	bf00      	nop
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <delay+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3f9      	bcc.n	8000538 <delay+0x14>
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028

08000558 <stepper1_set_rpm>:

#define stepsperrev 4096

void stepper1_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000560:	f643 1238 	movw	r2, #14648	; 0x3938
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	fb92 f3f3 	sdiv	r3, r2, r3
 800056a:	b29b      	uxth	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffd9 	bl	8000524 <delay>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <stepper1_half_drive>:


void stepper1_half_drive (int step)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	switch (step){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b07      	cmp	r3, #7
 8000588:	f200 80cc 	bhi.w	8000724 <stepper1_half_drive+0x1a8>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <stepper1_half_drive+0x18>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005b5 	.word	0x080005b5
 8000598:	080005e3 	.word	0x080005e3
 800059c:	08000611 	.word	0x08000611
 80005a0:	0800063f 	.word	0x0800063f
 80005a4:	0800066d 	.word	0x0800066d
 80005a8:	0800069b 	.word	0x0800069b
 80005ac:	080006c9 	.word	0x080006c9
 80005b0:	080006f7 	.word	0x080006f7
		case 0:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	485c      	ldr	r0, [pc, #368]	; (800072c <stepper1_half_drive+0x1b0>)
 80005ba:	f001 faa7 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);   // IN2
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4859      	ldr	r0, [pc, #356]	; (800072c <stepper1_half_drive+0x1b0>)
 80005c6:	f001 faa1 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);   // IN3
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	4858      	ldr	r0, [pc, #352]	; (8000730 <stepper1_half_drive+0x1b4>)
 80005d0:	f001 fa9c 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	4856      	ldr	r0, [pc, #344]	; (8000734 <stepper1_half_drive+0x1b8>)
 80005dc:	f001 fa96 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80005e0:	e0a0      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 1:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4851      	ldr	r0, [pc, #324]	; (800072c <stepper1_half_drive+0x1b0>)
 80005e8:	f001 fa90 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);   // IN2
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	484e      	ldr	r0, [pc, #312]	; (800072c <stepper1_half_drive+0x1b0>)
 80005f4:	f001 fa8a 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);   // IN3
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	484c      	ldr	r0, [pc, #304]	; (8000730 <stepper1_half_drive+0x1b4>)
 80005fe:	f001 fa85 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	484a      	ldr	r0, [pc, #296]	; (8000734 <stepper1_half_drive+0x1b8>)
 800060a:	f001 fa7f 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 800060e:	e089      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 2:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4845      	ldr	r0, [pc, #276]	; (800072c <stepper1_half_drive+0x1b0>)
 8000616:	f001 fa79 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);   // IN2
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	4842      	ldr	r0, [pc, #264]	; (800072c <stepper1_half_drive+0x1b0>)
 8000622:	f001 fa73 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);   // IN3
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	4841      	ldr	r0, [pc, #260]	; (8000730 <stepper1_half_drive+0x1b4>)
 800062c:	f001 fa6e 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	483f      	ldr	r0, [pc, #252]	; (8000734 <stepper1_half_drive+0x1b8>)
 8000638:	f001 fa68 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 800063c:	e072      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 3:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 800063e:	2200      	movs	r2, #0
 8000640:	2120      	movs	r1, #32
 8000642:	483a      	ldr	r0, [pc, #232]	; (800072c <stepper1_half_drive+0x1b0>)
 8000644:	f001 fa62 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);   // IN2
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064e:	4837      	ldr	r0, [pc, #220]	; (800072c <stepper1_half_drive+0x1b0>)
 8000650:	f001 fa5c 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);   // IN3
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	4835      	ldr	r0, [pc, #212]	; (8000730 <stepper1_half_drive+0x1b4>)
 800065a:	f001 fa57 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000664:	4833      	ldr	r0, [pc, #204]	; (8000734 <stepper1_half_drive+0x1b8>)
 8000666:	f001 fa51 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 800066a:	e05b      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 4:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	482e      	ldr	r0, [pc, #184]	; (800072c <stepper1_half_drive+0x1b0>)
 8000672:	f001 fa4b 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);   // IN2
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067c:	482b      	ldr	r0, [pc, #172]	; (800072c <stepper1_half_drive+0x1b0>)
 800067e:	f001 fa45 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);   // IN3
 8000682:	2201      	movs	r2, #1
 8000684:	2101      	movs	r1, #1
 8000686:	482a      	ldr	r0, [pc, #168]	; (8000730 <stepper1_half_drive+0x1b4>)
 8000688:	f001 fa40 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);   // IN4
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000692:	4828      	ldr	r0, [pc, #160]	; (8000734 <stepper1_half_drive+0x1b8>)
 8000694:	f001 fa3a 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 8000698:	e044      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 5:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	4823      	ldr	r0, [pc, #140]	; (800072c <stepper1_half_drive+0x1b0>)
 80006a0:	f001 fa34 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);   // IN2
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	4820      	ldr	r0, [pc, #128]	; (800072c <stepper1_half_drive+0x1b0>)
 80006ac:	f001 fa2e 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);   // IN3
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	481e      	ldr	r0, [pc, #120]	; (8000730 <stepper1_half_drive+0x1b4>)
 80006b6:	f001 fa29 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <stepper1_half_drive+0x1b8>)
 80006c2:	f001 fa23 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80006c6:	e02d      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 6:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	4817      	ldr	r0, [pc, #92]	; (800072c <stepper1_half_drive+0x1b0>)
 80006ce:	f001 fa1d 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);   // IN2
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <stepper1_half_drive+0x1b0>)
 80006da:	f001 fa17 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);   // IN3
 80006de:	2200      	movs	r2, #0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4813      	ldr	r0, [pc, #76]	; (8000730 <stepper1_half_drive+0x1b4>)
 80006e4:	f001 fa12 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <stepper1_half_drive+0x1b8>)
 80006f0:	f001 fa0c 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80006f4:	e016      	b.n	8000724 <stepper1_half_drive+0x1a8>

		case 7:
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 80006f6:	2201      	movs	r2, #1
 80006f8:	2120      	movs	r1, #32
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <stepper1_half_drive+0x1b0>)
 80006fc:	f001 fa06 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);   // IN2
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <stepper1_half_drive+0x1b0>)
 8000708:	f001 fa00 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);   // IN3
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <stepper1_half_drive+0x1b4>)
 8000712:	f001 f9fb 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);   // IN4
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <stepper1_half_drive+0x1b8>)
 800071e:	f001 f9f5 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 8000722:	bf00      	nop

		}
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021800 	.word	0x40021800
 8000730:	40021000 	.word	0x40021000
 8000734:	40021400 	.word	0x40021400

08000738 <stepper1_step_angle>:

void stepper1_step_angle (float angle, int direction, float rpm)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000742:	60b8      	str	r0, [r7, #8]
 8000744:	edc7 0a01 	vstr	s1, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <stepper1_step_angle+0xa8>)
 800074a:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 800074c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000750:	ed97 7a06 	vldr	s14, [r7, #24]
 8000754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075c:	ee17 3a90 	vmov	r3, s15
 8000760:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
 8000766:	e031      	b.n	80007cc <stepper1_step_angle+0x94>
	{
		if (direction == 0)  // for clockwise
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d114      	bne.n	8000798 <stepper1_step_angle+0x60>
		{
			for (int step=7; step>=0; step--)
 800076e:	2307      	movs	r3, #7
 8000770:	623b      	str	r3, [r7, #32]
 8000772:	e00d      	b.n	8000790 <stepper1_step_angle+0x58>
			{
				stepper1_half_drive(step);
 8000774:	6a38      	ldr	r0, [r7, #32]
 8000776:	f7ff ff01 	bl	800057c <stepper1_half_drive>
				stepper1_set_rpm(rpm);
 800077a:	edd7 7a01 	vldr	s15, [r7, #4]
 800077e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000782:	ee17 0a90 	vmov	r0, s15
 8000786:	f7ff fee7 	bl	8000558 <stepper1_set_rpm>
			for (int step=7; step>=0; step--)
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	3b01      	subs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	2b00      	cmp	r3, #0
 8000794:	daee      	bge.n	8000774 <stepper1_step_angle+0x3c>
 8000796:	e016      	b.n	80007c6 <stepper1_step_angle+0x8e>
			}

		}

		else if (direction == 1)  // for anti-clockwise
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d113      	bne.n	80007c6 <stepper1_step_angle+0x8e>
		{
			for (int step=0; step<8; step++)
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	e00d      	b.n	80007c0 <stepper1_step_angle+0x88>
			{
				stepper1_half_drive(step);
 80007a4:	69f8      	ldr	r0, [r7, #28]
 80007a6:	f7ff fee9 	bl	800057c <stepper1_half_drive>
				stepper1_set_rpm(rpm);
 80007aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007b2:	ee17 0a90 	vmov	r0, s15
 80007b6:	f7ff fecf 	bl	8000558 <stepper1_set_rpm>
			for (int step=0; step<8; step++)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3301      	adds	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	ddee      	ble.n	80007a4 <stepper1_step_angle+0x6c>
	for (int seq=0; seq<numberofsequences; seq++)
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	3301      	adds	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dbc9      	blt.n	8000768 <stepper1_step_angle+0x30>
			}
		}
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	3f340000 	.word	0x3f340000

080007e4 <stepper2_set_rpm>:

void stepper2_set_rpm (float rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	ed87 0a01 	vstr	s0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 80007ee:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000814 <stepper2_set_rpm+0x30>
 80007f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80007f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007fe:	ee17 3a90 	vmov	r3, s15
 8000802:	b29b      	uxth	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe8d 	bl	8000524 <delay>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	4664e000 	.word	0x4664e000

08000818 <stepper2_half_drive>:


void stepper2_half_drive (int step)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	switch (step){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b07      	cmp	r3, #7
 8000824:	f200 80bc 	bhi.w	80009a0 <stepper2_half_drive+0x188>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <stepper2_half_drive+0x18>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000851 	.word	0x08000851
 8000834:	0800087b 	.word	0x0800087b
 8000838:	080008a5 	.word	0x080008a5
 800083c:	080008cf 	.word	0x080008cf
 8000840:	080008f9 	.word	0x080008f9
 8000844:	08000923 	.word	0x08000923
 8000848:	0800094d 	.word	0x0800094d
 800084c:	08000977 	.word	0x08000977
		case 0:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 8000850:	2201      	movs	r2, #1
 8000852:	2120      	movs	r1, #32
 8000854:	4854      	ldr	r0, [pc, #336]	; (80009a8 <stepper2_half_drive+0x190>)
 8000856:	f001 f959 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4852      	ldr	r0, [pc, #328]	; (80009a8 <stepper2_half_drive+0x190>)
 8000860:	f001 f954 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000864:	2200      	movs	r2, #0
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	484f      	ldr	r0, [pc, #316]	; (80009a8 <stepper2_half_drive+0x190>)
 800086a:	f001 f94f 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	484e      	ldr	r0, [pc, #312]	; (80009ac <stepper2_half_drive+0x194>)
 8000874:	f001 f94a 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 8000878:	e092      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 1:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	484a      	ldr	r0, [pc, #296]	; (80009a8 <stepper2_half_drive+0x190>)
 8000880:	f001 f944 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 8000884:	2201      	movs	r2, #1
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <stepper2_half_drive+0x190>)
 800088a:	f001 f93f 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4845      	ldr	r0, [pc, #276]	; (80009a8 <stepper2_half_drive+0x190>)
 8000894:	f001 f93a 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <stepper2_half_drive+0x194>)
 800089e:	f001 f935 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80008a2:	e07d      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 2:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	483f      	ldr	r0, [pc, #252]	; (80009a8 <stepper2_half_drive+0x190>)
 80008aa:	f001 f92f 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 80008ae:	2201      	movs	r2, #1
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	483d      	ldr	r0, [pc, #244]	; (80009a8 <stepper2_half_drive+0x190>)
 80008b4:	f001 f92a 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	483a      	ldr	r0, [pc, #232]	; (80009a8 <stepper2_half_drive+0x190>)
 80008be:	f001 f925 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <stepper2_half_drive+0x194>)
 80008c8:	f001 f920 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80008cc:	e068      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 3:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4835      	ldr	r0, [pc, #212]	; (80009a8 <stepper2_half_drive+0x190>)
 80008d4:	f001 f91a 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 80008d8:	2201      	movs	r2, #1
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <stepper2_half_drive+0x190>)
 80008de:	f001 f915 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 80008e2:	2201      	movs	r2, #1
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4830      	ldr	r0, [pc, #192]	; (80009a8 <stepper2_half_drive+0x190>)
 80008e8:	f001 f910 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	482e      	ldr	r0, [pc, #184]	; (80009ac <stepper2_half_drive+0x194>)
 80008f2:	f001 f90b 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 80008f6:	e053      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 4:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80008f8:	2200      	movs	r2, #0
 80008fa:	2120      	movs	r1, #32
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <stepper2_half_drive+0x190>)
 80008fe:	f001 f905 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <stepper2_half_drive+0x190>)
 8000908:	f001 f900 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 800090c:	2201      	movs	r2, #1
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	4825      	ldr	r0, [pc, #148]	; (80009a8 <stepper2_half_drive+0x190>)
 8000912:	f001 f8fb 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);   // IN4
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4824      	ldr	r0, [pc, #144]	; (80009ac <stepper2_half_drive+0x194>)
 800091c:	f001 f8f6 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 8000920:	e03e      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 5:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <stepper2_half_drive+0x190>)
 8000928:	f001 f8f0 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	481d      	ldr	r0, [pc, #116]	; (80009a8 <stepper2_half_drive+0x190>)
 8000932:	f001 f8eb 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 8000936:	2201      	movs	r2, #1
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	481b      	ldr	r0, [pc, #108]	; (80009a8 <stepper2_half_drive+0x190>)
 800093c:	f001 f8e6 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4819      	ldr	r0, [pc, #100]	; (80009ac <stepper2_half_drive+0x194>)
 8000946:	f001 f8e1 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 800094a:	e029      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 6:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <stepper2_half_drive+0x190>)
 8000952:	f001 f8db 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4813      	ldr	r0, [pc, #76]	; (80009a8 <stepper2_half_drive+0x190>)
 800095c:	f001 f8d6 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000960:	2200      	movs	r2, #0
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <stepper2_half_drive+0x190>)
 8000966:	f001 f8d1 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 800096a:	2201      	movs	r2, #1
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <stepper2_half_drive+0x194>)
 8000970:	f001 f8cc 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 8000974:	e014      	b.n	80009a0 <stepper2_half_drive+0x188>

		case 7:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 8000976:	2201      	movs	r2, #1
 8000978:	2120      	movs	r1, #32
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <stepper2_half_drive+0x190>)
 800097c:	f001 f8c6 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <stepper2_half_drive+0x190>)
 8000986:	f001 f8c1 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 800098a:	2200      	movs	r2, #0
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <stepper2_half_drive+0x190>)
 8000990:	f001 f8bc 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // IN4
 8000994:	2201      	movs	r2, #1
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <stepper2_half_drive+0x194>)
 800099a:	f001 f8b7 	bl	8001b0c <HAL_GPIO_WritePin>
			  break;
 800099e:	bf00      	nop

		}
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <stepper2_step_angle>:

void stepper2_step_angle (float angle, int direction, float rpm)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80009ba:	60b8      	str	r0, [r7, #8]
 80009bc:	edc7 0a01 	vstr	s1, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <stepper2_step_angle+0x98>)
 80009c2:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 80009c4:	edd7 6a03 	vldr	s13, [r7, #12]
 80009c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d4:	ee17 3a90 	vmov	r3, s15
 80009d8:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
 80009de:	e029      	b.n	8000a34 <stepper2_step_angle+0x84>
	{
		if (direction == 0)  // for clockwise
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d110      	bne.n	8000a08 <stepper2_step_angle+0x58>
		{
			for (int step=7; step>=0; step--)
 80009e6:	2307      	movs	r3, #7
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	e009      	b.n	8000a00 <stepper2_step_angle+0x50>
			{
				stepper2_half_drive(step);
 80009ec:	6a38      	ldr	r0, [r7, #32]
 80009ee:	f7ff ff13 	bl	8000818 <stepper2_half_drive>
				stepper2_set_rpm(rpm);
 80009f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80009f6:	f7ff fef5 	bl	80007e4 <stepper2_set_rpm>
			for (int step=7; step>=0; step--)
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	daf2      	bge.n	80009ec <stepper2_step_angle+0x3c>
 8000a06:	e012      	b.n	8000a2e <stepper2_step_angle+0x7e>
			}

		}

		else if (direction == 1)  // for anti-clockwise
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10f      	bne.n	8000a2e <stepper2_step_angle+0x7e>
		{
			for (int step=0; step<8; step++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e009      	b.n	8000a28 <stepper2_step_angle+0x78>
			{
				stepper2_half_drive(step);
 8000a14:	69f8      	ldr	r0, [r7, #28]
 8000a16:	f7ff feff 	bl	8000818 <stepper2_half_drive>
				stepper2_set_rpm(rpm);
 8000a1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a1e:	f7ff fee1 	bl	80007e4 <stepper2_set_rpm>
			for (int step=0; step<8; step++)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3301      	adds	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	ddf2      	ble.n	8000a14 <stepper2_step_angle+0x64>
	for (int seq=0; seq<numberofsequences; seq++)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	3301      	adds	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
 8000a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbd1      	blt.n	80009e0 <stepper2_step_angle+0x30>
			}
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	3f340000 	.word	0x3f340000

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fd15 	bl	800147e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f928 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 fa46 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 f9e6 	bl	8000e2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a60:	f000 fa14 	bl	8000e8c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000a64:	f000 f98e 	bl	8000d84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000a68:	4882      	ldr	r0, [pc, #520]	; (8000c74 <main+0x228>)
 8000a6a:	f002 faa1 	bl	8002fb0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 0)
 8000a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a72:	4881      	ldr	r0, [pc, #516]	; (8000c78 <main+0x22c>)
 8000a74:	f001 f832 	bl	8001adc <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <main+0x42>
	  {
		  buttonPresses++;
 8000a7e:	4b7f      	ldr	r3, [pc, #508]	; (8000c7c <main+0x230>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a7d      	ldr	r2, [pc, #500]	; (8000c7c <main+0x230>)
 8000a86:	6013      	str	r3, [r2, #0]
		  HAL_Delay(250);								//debounce switch
 8000a88:	20fa      	movs	r0, #250	; 0xfa
 8000a8a:	f000 fd55 	bl	8001538 <HAL_Delay>
	  }

	  if (buttonPresses == 6) buttonPresses = 0;
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <main+0x230>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d102      	bne.n	8000a9c <main+0x50>
 8000a96:	4b79      	ldr	r3, [pc, #484]	; (8000c7c <main+0x230>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
	  if (lastPressCount != buttonPresses)
 8000a9c:	4b78      	ldr	r3, [pc, #480]	; (8000c80 <main+0x234>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <main+0x230>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d0e2      	beq.n	8000a6e <main+0x22>
	  {
		  if (buttonPresses == 1){
 8000aa8:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <main+0x230>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d127      	bne.n	8000b00 <main+0xb4>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	4873      	ldr	r0, [pc, #460]	; (8000c84 <main+0x238>)
 8000ab6:	f001 f829 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	4871      	ldr	r0, [pc, #452]	; (8000c84 <main+0x238>)
 8000ac0:	f001 f824 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	486f      	ldr	r0, [pc, #444]	; (8000c88 <main+0x23c>)
 8000aca:	f001 f81f 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	486d      	ldr	r0, [pc, #436]	; (8000c88 <main+0x23c>)
 8000ad4:	f001 f81a 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	486b      	ldr	r0, [pc, #428]	; (8000c8c <main+0x240>)
 8000ade:	f001 f815 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper2_step_angle(216, 0, 2);
 8000ae2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000c90 <main+0x244>
 8000aec:	f7ff ff60 	bl	80009b0 <stepper2_step_angle>
			  stepper1_step_angle(468, 0, 2);
 8000af0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000af4:	2000      	movs	r0, #0
 8000af6:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8000c94 <main+0x248>
 8000afa:	f7ff fe1d 	bl	8000738 <stepper1_step_angle>
 8000afe:	e0b3      	b.n	8000c68 <main+0x21c>
		  }
		  else if (buttonPresses == 2){
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <main+0x230>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d120      	bne.n	8000b4a <main+0xfe>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	485d      	ldr	r0, [pc, #372]	; (8000c84 <main+0x238>)
 8000b0e:	f000 fffd 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	485b      	ldr	r0, [pc, #364]	; (8000c84 <main+0x238>)
 8000b18:	f000 fff8 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4859      	ldr	r0, [pc, #356]	; (8000c88 <main+0x23c>)
 8000b22:	f000 fff3 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4857      	ldr	r0, [pc, #348]	; (8000c88 <main+0x23c>)
 8000b2c:	f000 ffee 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	4855      	ldr	r0, [pc, #340]	; (8000c8c <main+0x240>)
 8000b36:	f000 ffe9 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper1_step_angle(330, 1, 2);
 8000b3a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b3e:	2001      	movs	r0, #1
 8000b40:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8000c98 <main+0x24c>
 8000b44:	f7ff fdf8 	bl	8000738 <stepper1_step_angle>
 8000b48:	e08e      	b.n	8000c68 <main+0x21c>
		  }
		  else if (buttonPresses == 3){
 8000b4a:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <main+0x230>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d120      	bne.n	8000b94 <main+0x148>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	484b      	ldr	r0, [pc, #300]	; (8000c84 <main+0x238>)
 8000b58:	f000 ffd8 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	4848      	ldr	r0, [pc, #288]	; (8000c84 <main+0x238>)
 8000b62:	f000 ffd3 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2104      	movs	r1, #4
 8000b6a:	4847      	ldr	r0, [pc, #284]	; (8000c88 <main+0x23c>)
 8000b6c:	f000 ffce 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	4844      	ldr	r0, [pc, #272]	; (8000c88 <main+0x23c>)
 8000b76:	f000 ffc9 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	4843      	ldr	r0, [pc, #268]	; (8000c8c <main+0x240>)
 8000b80:	f000 ffc4 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper1_step_angle(150, 0, 2);
 8000b84:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8000c9c <main+0x250>
 8000b8e:	f7ff fdd3 	bl	8000738 <stepper1_step_angle>
 8000b92:	e069      	b.n	8000c68 <main+0x21c>
		  }
		  else if (buttonPresses == 4){
 8000b94:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <main+0x230>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d120      	bne.n	8000bde <main+0x192>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <main+0x238>)
 8000ba2:	f000 ffb3 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	4836      	ldr	r0, [pc, #216]	; (8000c84 <main+0x238>)
 8000bac:	f000 ffae 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4834      	ldr	r0, [pc, #208]	; (8000c88 <main+0x23c>)
 8000bb6:	f000 ffa9 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4832      	ldr	r0, [pc, #200]	; (8000c88 <main+0x23c>)
 8000bc0:	f000 ffa4 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	4830      	ldr	r0, [pc, #192]	; (8000c8c <main+0x240>)
 8000bca:	f000 ff9f 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper1_step_angle(240, 0, 2);
 8000bce:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000ca0 <main+0x254>
 8000bd8:	f7ff fdae 	bl	8000738 <stepper1_step_angle>
 8000bdc:	e044      	b.n	8000c68 <main+0x21c>
		  }
		  else if (buttonPresses == 5){
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <main+0x230>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d120      	bne.n	8000c28 <main+0x1dc>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <main+0x238>)
 8000bec:	f000 ff8e 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	4823      	ldr	r0, [pc, #140]	; (8000c84 <main+0x238>)
 8000bf6:	f000 ff89 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	4822      	ldr	r0, [pc, #136]	; (8000c88 <main+0x23c>)
 8000c00:	f000 ff84 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <main+0x23c>)
 8000c0a:	f000 ff7f 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <main+0x240>)
 8000c14:	f000 ff7a 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper1_step_angle(30, 0, 2);
 8000c18:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000c22:	f7ff fd89 	bl	8000738 <stepper1_step_angle>
 8000c26:	e01f      	b.n	8000c68 <main+0x21c>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <main+0x238>)
 8000c2e:	f000 ff6d 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <main+0x238>)
 8000c38:	f000 ff68 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <main+0x23c>)
 8000c42:	f000 ff63 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <main+0x23c>)
 8000c4c:	f000 ff5e 	bl	8001b0c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <main+0x240>)
 8000c56:	f000 ff59 	bl	8001b0c <HAL_GPIO_WritePin>
			  stepper1_step_angle(90, 1, 2);
 8000c5a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000ca4 <main+0x258>
 8000c64:	f7ff fd68 	bl	8000738 <stepper1_step_angle>
		  }
		  lastPressCount = buttonPresses;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <main+0x230>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <main+0x234>)
 8000c6e:	6013      	str	r3, [r2, #0]
	  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == 0)
 8000c70:	e6fd      	b.n	8000a6e <main+0x22>
 8000c72:	bf00      	nop
 8000c74:	20000028 	.word	0x20000028
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	20000604 	.word	0x20000604
 8000c80:	20000608 	.word	0x20000608
 8000c84:	40021400 	.word	0x40021400
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	43580000 	.word	0x43580000
 8000c94:	43ea0000 	.word	0x43ea0000
 8000c98:	43a50000 	.word	0x43a50000
 8000c9c:	43160000 	.word	0x43160000
 8000ca0:	43700000 	.word	0x43700000
 8000ca4:	42b40000 	.word	0x42b40000

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fc26 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ccc:	f001 f8a4 	bl	8001e18 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d18:	23d8      	movs	r3, #216	; 0xd8
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d20:	2309      	movs	r3, #9
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 f8d5 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d34:	f000 fa12 	bl	800115c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d38:	f001 f87e 	bl	8001e38 <HAL_PWREx_EnableOverDrive>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fa0b 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2107      	movs	r1, #7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fb5b 	bl	8002420 <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d70:	f000 f9f4 	bl	800115c <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000da4:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <MX_TIM1_Init+0xa4>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000daa:	2247      	movs	r2, #71	; 0x47
 8000dac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dce:	4815      	ldr	r0, [pc, #84]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dd0:	f002 f896 	bl	8002f00 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dda:	f000 f9bf 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dec:	f002 f950 	bl	8003090 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000df6:	f000 f9b1 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000e0c:	f002 fb44 	bl	8003498 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e16:	f000 f9a1 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000028 	.word	0x20000028
 8000e28:	40010000 	.word	0x40010000

08000e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MX_USART3_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART3_UART_Init+0x58>)
 8000e70:	f002 fba0 	bl	80035b4 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 f96f 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000074 	.word	0x20000074
 8000e88:	40004800 	.word	0x40004800

08000e8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed0:	f000 fe59 	bl	8001b86 <HAL_PCD_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f93f 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000fc 	.word	0x200000fc

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b8f      	ldr	r3, [pc, #572]	; (800113c <MX_GPIO_Init+0x254>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a8e      	ldr	r2, [pc, #568]	; (800113c <MX_GPIO_Init+0x254>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <MX_GPIO_Init+0x254>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f16:	4b89      	ldr	r3, [pc, #548]	; (800113c <MX_GPIO_Init+0x254>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a88      	ldr	r2, [pc, #544]	; (800113c <MX_GPIO_Init+0x254>)
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b86      	ldr	r3, [pc, #536]	; (800113c <MX_GPIO_Init+0x254>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	4b83      	ldr	r3, [pc, #524]	; (800113c <MX_GPIO_Init+0x254>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a82      	ldr	r2, [pc, #520]	; (800113c <MX_GPIO_Init+0x254>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b80      	ldr	r3, [pc, #512]	; (800113c <MX_GPIO_Init+0x254>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b7d      	ldr	r3, [pc, #500]	; (800113c <MX_GPIO_Init+0x254>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a7c      	ldr	r2, [pc, #496]	; (800113c <MX_GPIO_Init+0x254>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b7a      	ldr	r3, [pc, #488]	; (800113c <MX_GPIO_Init+0x254>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b77      	ldr	r3, [pc, #476]	; (800113c <MX_GPIO_Init+0x254>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a76      	ldr	r2, [pc, #472]	; (800113c <MX_GPIO_Init+0x254>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b74      	ldr	r3, [pc, #464]	; (800113c <MX_GPIO_Init+0x254>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b71      	ldr	r3, [pc, #452]	; (800113c <MX_GPIO_Init+0x254>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a70      	ldr	r2, [pc, #448]	; (800113c <MX_GPIO_Init+0x254>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <MX_GPIO_Init+0x254>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <MX_GPIO_Init+0x254>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <MX_GPIO_Init+0x254>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <MX_GPIO_Init+0x254>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <MX_GPIO_Init+0x254>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a64      	ldr	r2, [pc, #400]	; (800113c <MX_GPIO_Init+0x254>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b62      	ldr	r3, [pc, #392]	; (800113c <MX_GPIO_Init+0x254>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_1_Pin|LED_2_Pin|M1_IN1_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8000fc4:	485e      	ldr	r0, [pc, #376]	; (8001140 <MX_GPIO_Init+0x258>)
 8000fc6:	f000 fda1 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210c      	movs	r1, #12
 8000fce:	485d      	ldr	r0, [pc, #372]	; (8001144 <MX_GPIO_Init+0x25c>)
 8000fd0:	f000 fd9c 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_IN1_Pin|M2_IN2_Pin|M2_IN3_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21e0      	movs	r1, #224	; 0xe0
 8000fd8:	485b      	ldr	r0, [pc, #364]	; (8001148 <MX_GPIO_Init+0x260>)
 8000fda:	f000 fd97 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|M2_IN4_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000fe4:	4859      	ldr	r0, [pc, #356]	; (800114c <MX_GPIO_Init+0x264>)
 8000fe6:	f000 fd91 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN4_Pin|USB_PowerSwitchOn_Pin|M1_IN3_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000ff0:	4857      	ldr	r0, [pc, #348]	; (8001150 <MX_GPIO_Init+0x268>)
 8000ff2:	f000 fd8b 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_5_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	21c0      	movs	r1, #192	; 0xc0
 8000ffa:	4856      	ldr	r0, [pc, #344]	; (8001154 <MX_GPIO_Init+0x26c>)
 8000ffc:	f000 fd86 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	4854      	ldr	r0, [pc, #336]	; (8001158 <MX_GPIO_Init+0x270>)
 8001006:	f000 fd81 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001010:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4848      	ldr	r0, [pc, #288]	; (8001144 <MX_GPIO_Init+0x25c>)
 8001022:	f000 fbbf 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin M1_IN1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|M1_IN1_Pin;
 8001026:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4840      	ldr	r0, [pc, #256]	; (8001140 <MX_GPIO_Init+0x258>)
 8001040:	f000 fbb0 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin;
 8001044:	230c      	movs	r3, #12
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	483a      	ldr	r0, [pc, #232]	; (8001144 <MX_GPIO_Init+0x25c>)
 800105c:	f000 fba2 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_IN1_Pin M2_IN2_Pin M2_IN3_Pin */
  GPIO_InitStruct.Pin = M2_IN1_Pin|M2_IN2_Pin|M2_IN3_Pin;
 8001060:	23e0      	movs	r3, #224	; 0xe0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4834      	ldr	r0, [pc, #208]	; (8001148 <MX_GPIO_Init+0x260>)
 8001078:	f000 fb94 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin M2_IN4_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|M2_IN4_Pin|LD2_Pin;
 800107c:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	482d      	ldr	r0, [pc, #180]	; (800114c <MX_GPIO_Init+0x264>)
 8001096:	f000 fb85 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN4_Pin USB_PowerSwitchOn_Pin M1_IN3_Pin */
  GPIO_InitStruct.Pin = M1_IN4_Pin|USB_PowerSwitchOn_Pin|M1_IN3_Pin;
 800109a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4827      	ldr	r0, [pc, #156]	; (8001150 <MX_GPIO_Init+0x268>)
 80010b4:	f000 fb76 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4821      	ldr	r0, [pc, #132]	; (8001150 <MX_GPIO_Init+0x268>)
 80010cc:	f000 fb6a 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5_Pin PD7 */
  GPIO_InitStruct.Pin = LED_5_Pin|GPIO_PIN_7;
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_GPIO_Init+0x26c>)
 80010e8:	f000 fb5c 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_1_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin;
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUT_1_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_GPIO_Init+0x268>)
 8001102:	f000 fb4f 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IN2_Pin */
  GPIO_InitStruct.Pin = M1_IN2_Pin;
 8001106:	2301      	movs	r3, #1
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(M1_IN2_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <MX_GPIO_Init+0x270>)
 800111e:	f000 fb41 	bl	80017a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2028      	movs	r0, #40	; 0x28
 8001128:	f000 fb05 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112c:	2028      	movs	r0, #40	; 0x28
 800112e:	f000 fb1e 	bl	800176e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	; 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40021400 	.word	0x40021400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40021800 	.word	0x40021800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_TIM_Base_MspInit+0x38>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0aa      	sub	sp, #168	; 0xa8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f979 	bl	8004508 <memset>
  if(huart->Instance==USART3)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <HAL_UART_MspInit+0xb4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d13c      	bne.n	800129a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001224:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001226:	2300      	movs	r3, #0
 8001228:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fb1c 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800123a:	f7ff ff8f 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800126e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001288:	2307      	movs	r3, #7
 800128a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0xbc>)
 8001296:	f000 fa85 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	37a8      	adds	r7, #168	; 0xa8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0aa      	sub	sp, #168	; 0xa8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 f919 	bl	8004508 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012de:	d159      	bne.n	8001394 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fabb 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012fc:	f7ff ff2e 	bl	800115c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_PCD_MspInit+0xec>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <HAL_PCD_MspInit+0xec>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_PCD_MspInit+0xec>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001318:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800131c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001332:	230a      	movs	r3, #10
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <HAL_PCD_MspInit+0xf0>)
 8001340:	f000 fa30 	bl	80017a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135c:	4619      	mov	r1, r3
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <HAL_PCD_MspInit+0xf0>)
 8001360:	f000 fa20 	bl	80017a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_PCD_MspInit+0xec>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_PCD_MspInit+0xec>)
 800136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136e:	6353      	str	r3, [r2, #52]	; 0x34
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_PCD_MspInit+0xec>)
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_PCD_MspInit+0xec>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_PCD_MspInit+0xec>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_PCD_MspInit+0xec>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	37a8      	adds	r7, #168	; 0xa8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f882 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001400:	f000 fb9e 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001448:	4c0b      	ldr	r4, [pc, #44]	; (8001478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001456:	f7ff ffd7 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f003 f831 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff faf5 	bl	8000a4c <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001470:	08004558 	.word	0x08004558
  ldr r2, =_sbss
 8001474:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001478:	20000610 	.word	0x20000610

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>

0800147e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f94c 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f805 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff fe6b 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f967 	bl	800178a <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f000 f92f 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008
 800151c:	2000060c 	.word	0x2000060c

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000060c 	.word	0x2000060c

08001538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff ffee 	bl	8001520 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001550:	d005      	beq.n	800155e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_Delay+0x44>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155e:	bf00      	nop
 8001560:	f7ff ffde 	bl	8001520 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f7      	bhi.n	8001560 <HAL_Delay+0x28>
  {
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001700:	f7ff ff8e 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff29 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff3e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff8e 	bl	8001674 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5d 	bl	8001620 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff31 	bl	80015e4 <__NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffa2 	bl	80016dc <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e169      	b.n	8001a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8158 	bne.w	8001a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x56>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80b2 	beq.w	8001a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001946:	4a5b      	ldr	r2, [pc, #364]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_GPIO_Init+0x314>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_GPIO_Init+0x318>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_GPIO_Init+0x31c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_GPIO_Init+0x320>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_GPIO_Init+0x324>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x216>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x328>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x212>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x32c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <HAL_GPIO_Init+0x330>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00e      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae92 	bls.w	80017c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f806 	bl	8001b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b88:	b08f      	sub	sp, #60	; 0x3c
 8001b8a:	af0a      	add	r7, sp, #40	; 0x28
 8001b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e116      	b.n	8001dc6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fb7c 	bl	80012b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 f9c6 	bl	8003f68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	687e      	ldr	r6, [r7, #4]
 8001be4:	466d      	mov	r5, sp
 8001be6:	f106 0410 	add.w	r4, r6, #16
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bfa:	1d33      	adds	r3, r6, #4
 8001bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f002 f92a 	bl	8003e58 <USB_CoreInit>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0d7      	b.n	8001dc6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 f9b4 	bl	8003f8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e04a      	b.n	8001cbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	333d      	adds	r3, #61	; 0x3d
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	333c      	adds	r3, #60	; 0x3c
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	b298      	uxth	r0, r3
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	3344      	adds	r3, #68	; 0x44
 8001c64:	4602      	mov	r2, r0
 8001c66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3348      	adds	r3, #72	; 0x48
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	334c      	adds	r3, #76	; 0x4c
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3354      	adds	r3, #84	; 0x54
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3af      	bcc.n	8001c28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e044      	b.n	8001d58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3b5      	bcc.n	8001cce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	687e      	ldr	r6, [r7, #4]
 8001d6a:	466d      	mov	r5, sp
 8001d6c:	f106 0410 	add.w	r4, r6, #16
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d80:	1d33      	adds	r3, r6, #4
 8001d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	f002 f94d 	bl	8004024 <USB_DevInit>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e014      	b.n	8001dc6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f80b 	bl	8001dd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fb1b 	bl	80043fa <USB_DevDisconnect>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	10000003 	.word	0x10000003

08001e18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e66:	f7ff fb5b 	bl	8001520 <HAL_GetTick>
 8001e6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6c:	e009      	b.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e6e:	f7ff fb57 	bl	8001520 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7c:	d901      	bls.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e022      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9c:	f7ff fb40 	bl	8001520 <HAL_GetTick>
 8001ea0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea2:	e009      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea4:	f7ff fb3c 	bl	8001520 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e007      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e291      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b96      	ldr	r3, [pc, #600]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f08:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x130>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e26b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7a>
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a83      	ldr	r2, [pc, #524]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x9c>
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a72      	ldr	r2, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fab2 	bl	8001520 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff faae 	bl	8001520 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e21f      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fa9e 	bl	8001520 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fa9a 	bl	8001520 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e20b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x110>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d069      	beq.n	80020ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1df      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	493d      	ldr	r1, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e040      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fa50 	bl	8001520 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff fa4c 	bl	8001520 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1bd      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4929      	ldr	r1, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e018      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fa2c 	bl	8001520 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fa28 	bl	8001520 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e199      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d038      	beq.n	8002168 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff fa09 	bl	8001520 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff fa05 	bl	8001520 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e176      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x23a>
 8002130:	e01a      	b.n	8002168 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff f9ef 	bl	8001520 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002146:	f7ff f9eb 	bl	8001520 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d903      	bls.n	800215c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e15c      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
 8002158:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b91      	ldr	r3, [pc, #580]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a4 	beq.w	80022be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a87      	ldr	r2, [pc, #540]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f9b3 	bl	8001520 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7ff f9af 	bl	8001520 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e120      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x31a>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x33c>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a69      	ldr	r2, [pc, #420]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a66      	ldr	r2, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x35e>
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff f963 	bl	8001520 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff f95f 	bl	8001520 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0ce      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x386>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff f94d 	bl	8001520 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff f949 	bl	8001520 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a4 	beq.w	8002410 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d06b      	beq.n	80023ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d149      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff f91a 	bl	8001520 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff f916 	bl	8001520 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e087      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4313      	orrs	r3, r2
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f8ea 	bl	8001520 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f8e6 	bl	8001520 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e057      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x478>
 800236e:	e04f      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f8d0 	bl	8001520 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f8cc 	bl	8001520 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03d      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x4ac>
 80023a2:	e035      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x544>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d028      	beq.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d121      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7ff f804 	bl	8001520 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff f800 	bl	8001520 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff60 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08004530 	.word	0x08004530
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fd8a 	bl	8000220 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd30 	bl	8000220 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08004540 	.word	0x08004540

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08004540 	.word	0x08004540

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002890:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a64      	ldr	r2, [pc, #400]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002896:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800289a:	6093      	str	r3, [r2, #8]
 800289c:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4960      	ldr	r1, [pc, #384]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d017      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c2:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	4955      	ldr	r1, [pc, #340]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e0:	d101      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	4946      	ldr	r1, [pc, #280]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 808b 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	4a39      	ldr	r2, [pc, #228]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	6413      	str	r3, [r2, #64]	; 0x40
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe fdde 	bl	8001520 <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe fdda 	bl	8001520 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e2bc      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002986:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d035      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d02e      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d114      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fda2 	bl	8001520 <HAL_GetTick>
 80029dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fd9e 	bl	8001520 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e27e      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a1e:	400b      	ands	r3, r1
 8002a20:	4901      	ldr	r1, [pc, #4]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	0ffffcff 	.word	0x0ffffcff
 8002a34:	4ba4      	ldr	r3, [pc, #656]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4aa3      	ldr	r2, [pc, #652]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a3e:	6093      	str	r3, [r2, #8]
 8002a40:	4ba1      	ldr	r3, [pc, #644]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	499e      	ldr	r1, [pc, #632]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a5e:	4b9a      	ldr	r3, [pc, #616]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	4a98      	ldr	r2, [pc, #608]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a6e:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4993      	ldr	r1, [pc, #588]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	498b      	ldr	r1, [pc, #556]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aae:	4b86      	ldr	r3, [pc, #536]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	4982      	ldr	r1, [pc, #520]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad0:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ade:	497a      	ldr	r1, [pc, #488]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af2:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f023 0203 	bic.w	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	4971      	ldr	r1, [pc, #452]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b14:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f023 020c 	bic.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4969      	ldr	r1, [pc, #420]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b36:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	4960      	ldr	r1, [pc, #384]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b58:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	4958      	ldr	r1, [pc, #352]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	494f      	ldr	r1, [pc, #316]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	4947      	ldr	r1, [pc, #284]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bbe:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	493e      	ldr	r1, [pc, #248]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002be0:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4936      	ldr	r1, [pc, #216]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c10:	492d      	ldr	r1, [pc, #180]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c40:	4921      	ldr	r1, [pc, #132]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	4919      	ldr	r1, [pc, #100]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d006      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 809d 	beq.w	8002dda <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fc38 	bl	8001520 <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cb4:	f7fe fc34 	bl	8001520 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d904      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e116      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ed      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d113      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	019a      	lsls	r2, r3, #6
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	071b      	lsls	r3, r3, #28
 8002d0c:	497b      	ldr	r1, [pc, #492]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d024      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d11f      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d40:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d46:	0f1b      	lsrs	r3, r3, #28
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	019a      	lsls	r2, r3, #6
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	071b      	lsls	r3, r3, #28
 8002d60:	4966      	ldr	r1, [pc, #408]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d68:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f023 021f 	bic.w	r2, r3, #31
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	4960      	ldr	r1, [pc, #384]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	019a      	lsls	r2, r3, #6
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	071b      	lsls	r3, r3, #28
 8002da0:	4956      	ldr	r1, [pc, #344]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002da8:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe fbb4 	bl	8001520 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dbc:	f7fe fbb0 	bl	8001520 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e092      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dce:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 8088 	bne.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002de2:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dee:	f7fe fb97 	bl	8001520 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002df6:	f7fe fb93 	bl	8001520 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e075      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e14:	d0ef      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d024      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d120      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	019a      	lsls	r2, r3, #6
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	4927      	ldr	r1, [pc, #156]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	4920      	ldr	r1, [pc, #128]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d018      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e94:	d113      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e96:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	0e1b      	lsrs	r3, r3, #24
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	019a      	lsls	r2, r3, #6
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	4911      	ldr	r1, [pc, #68]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eca:	f7fe fb29 	bl	8001520 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed2:	f7fe fb25 	bl	8001520 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	; 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e007      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d1ef      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e049      	b.n	8002fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f942 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 f970 	bl	8003224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e04c      	b.n	8003062 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_TIM_Base_Start+0xc0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d022      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d01d      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_TIM_Base_Start+0xc4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <HAL_TIM_Base_Start+0xc8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_TIM_Base_Start+0xcc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_Base_Start+0xd0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_TIM_Base_Start+0xd4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIM_Base_Start+0x70>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_TIM_Base_Start+0xd8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d115      	bne.n	800304c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_TIM_Base_Start+0xdc>)
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b06      	cmp	r3, #6
 8003030:	d015      	beq.n	800305e <HAL_TIM_Base_Start+0xae>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d011      	beq.n	800305e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	e008      	b.n	800305e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e000      	b.n	8003060 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40001800 	.word	0x40001800
 800308c:	00010007 	.word	0x00010007

08003090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x1c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0b4      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x186>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_TIM_ConfigClockSource+0x190>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e4:	d03e      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0xd4>
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	f200 8087 	bhi.w	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f2:	f000 8086 	beq.w	8003202 <HAL_TIM_ConfigClockSource+0x172>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d87f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b70      	cmp	r3, #112	; 0x70
 80030fe:	d01a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xa6>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d87b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b60      	cmp	r3, #96	; 0x60
 8003106:	d050      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x11a>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d877      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b50      	cmp	r3, #80	; 0x50
 800310e:	d03c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xfa>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d873      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d058      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x13a>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d86f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d064      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d86b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d060      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d867      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05c      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b10      	cmp	r3, #16
 8003132:	d05a      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	e062      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f000 f987 	bl	8003458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	609a      	str	r2, [r3, #8]
      break;
 8003162:	e04f      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f000 f970 	bl	8003458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003186:	609a      	str	r2, [r3, #8]
      break;
 8003188:	e03c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	f000 f8e4 	bl	8003364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2150      	movs	r1, #80	; 0x50
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f93d 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e02c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 f903 	bl	80033c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2160      	movs	r1, #96	; 0x60
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f92d 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e01c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 f8c4 	bl	8003364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f91d 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 f914 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031fa:	e003      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003200:	e000      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	fffeff88 	.word	0xfffeff88

08003224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a40      	ldr	r2, [pc, #256]	; (8003338 <TIM_Base_SetConfig+0x114>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3d      	ldr	r2, [pc, #244]	; (800333c <TIM_Base_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3c      	ldr	r2, [pc, #240]	; (8003340 <TIM_Base_SetConfig+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3b      	ldr	r2, [pc, #236]	; (8003344 <TIM_Base_SetConfig+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <TIM_Base_SetConfig+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <TIM_Base_SetConfig+0x114>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d02b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d027      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <TIM_Base_SetConfig+0x118>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d023      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <TIM_Base_SetConfig+0x11c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01f      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <TIM_Base_SetConfig+0x120>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <TIM_Base_SetConfig+0x124>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d017      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <TIM_Base_SetConfig+0x128>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <TIM_Base_SetConfig+0x12c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_Base_SetConfig+0x130>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0x134>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <TIM_Base_SetConfig+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <TIM_Base_SetConfig+0x13c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <TIM_Base_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_Base_SetConfig+0xf8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <TIM_Base_SetConfig+0x124>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	615a      	str	r2, [r3, #20]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010400 	.word	0x40010400
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	40001800 	.word	0x40001800
 800335c:	40001c00 	.word	0x40001c00
 8003360:	40002000 	.word	0x40002000

08003364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 030a 	bic.w	r3, r3, #10
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0210 	bic.w	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	f043 0307 	orr.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	021a      	lsls	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e06d      	b.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d022      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d01d      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d018      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	4313      	orrs	r3, r2
 8003570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40010000 	.word	0x40010000
 800359c:	40010400 	.word	0x40010400
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800
 80035a8:	40000c00 	.word	0x40000c00
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40001800 	.word	0x40001800

080035b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e040      	b.n	8003648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fe0a 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f82c 	bl	8003650 <UART_SetConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa84 	bl	8003b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800361e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800362e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb0b 	bl	8003c5c <UART_CheckIdleState>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4ba6      	ldr	r3, [pc, #664]	; (8003914 <UART_SetConfig+0x2c4>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	430b      	orrs	r3, r1
 8003686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a94      	ldr	r2, [pc, #592]	; (8003918 <UART_SetConfig+0x2c8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d120      	bne.n	800370e <UART_SetConfig+0xbe>
 80036cc:	4b93      	ldr	r3, [pc, #588]	; (800391c <UART_SetConfig+0x2cc>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d816      	bhi.n	8003708 <UART_SetConfig+0xb8>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x90>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	080036f7 	.word	0x080036f7
 80036ec:	08003703 	.word	0x08003703
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e150      	b.n	8003998 <UART_SetConfig+0x348>
 80036f6:	2302      	movs	r3, #2
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e14d      	b.n	8003998 <UART_SetConfig+0x348>
 80036fc:	2304      	movs	r3, #4
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e14a      	b.n	8003998 <UART_SetConfig+0x348>
 8003702:	2308      	movs	r3, #8
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e147      	b.n	8003998 <UART_SetConfig+0x348>
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e144      	b.n	8003998 <UART_SetConfig+0x348>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a83      	ldr	r2, [pc, #524]	; (8003920 <UART_SetConfig+0x2d0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d132      	bne.n	800377e <UART_SetConfig+0x12e>
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <UART_SetConfig+0x2cc>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d828      	bhi.n	8003778 <UART_SetConfig+0x128>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0xdc>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003761 	.word	0x08003761
 8003730:	08003779 	.word	0x08003779
 8003734:	08003779 	.word	0x08003779
 8003738:	08003779 	.word	0x08003779
 800373c:	0800376d 	.word	0x0800376d
 8003740:	08003779 	.word	0x08003779
 8003744:	08003779 	.word	0x08003779
 8003748:	08003779 	.word	0x08003779
 800374c:	08003767 	.word	0x08003767
 8003750:	08003779 	.word	0x08003779
 8003754:	08003779 	.word	0x08003779
 8003758:	08003779 	.word	0x08003779
 800375c:	08003773 	.word	0x08003773
 8003760:	2300      	movs	r3, #0
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e118      	b.n	8003998 <UART_SetConfig+0x348>
 8003766:	2302      	movs	r3, #2
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e115      	b.n	8003998 <UART_SetConfig+0x348>
 800376c:	2304      	movs	r3, #4
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e112      	b.n	8003998 <UART_SetConfig+0x348>
 8003772:	2308      	movs	r3, #8
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e10f      	b.n	8003998 <UART_SetConfig+0x348>
 8003778:	2310      	movs	r3, #16
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e10c      	b.n	8003998 <UART_SetConfig+0x348>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a68      	ldr	r2, [pc, #416]	; (8003924 <UART_SetConfig+0x2d4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d120      	bne.n	80037ca <UART_SetConfig+0x17a>
 8003788:	4b64      	ldr	r3, [pc, #400]	; (800391c <UART_SetConfig+0x2cc>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003792:	2b30      	cmp	r3, #48	; 0x30
 8003794:	d013      	beq.n	80037be <UART_SetConfig+0x16e>
 8003796:	2b30      	cmp	r3, #48	; 0x30
 8003798:	d814      	bhi.n	80037c4 <UART_SetConfig+0x174>
 800379a:	2b20      	cmp	r3, #32
 800379c:	d009      	beq.n	80037b2 <UART_SetConfig+0x162>
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d810      	bhi.n	80037c4 <UART_SetConfig+0x174>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <UART_SetConfig+0x15c>
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d006      	beq.n	80037b8 <UART_SetConfig+0x168>
 80037aa:	e00b      	b.n	80037c4 <UART_SetConfig+0x174>
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e0f2      	b.n	8003998 <UART_SetConfig+0x348>
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e0ef      	b.n	8003998 <UART_SetConfig+0x348>
 80037b8:	2304      	movs	r3, #4
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e0ec      	b.n	8003998 <UART_SetConfig+0x348>
 80037be:	2308      	movs	r3, #8
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e0e9      	b.n	8003998 <UART_SetConfig+0x348>
 80037c4:	2310      	movs	r3, #16
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e0e6      	b.n	8003998 <UART_SetConfig+0x348>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a56      	ldr	r2, [pc, #344]	; (8003928 <UART_SetConfig+0x2d8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d120      	bne.n	8003816 <UART_SetConfig+0x1c6>
 80037d4:	4b51      	ldr	r3, [pc, #324]	; (800391c <UART_SetConfig+0x2cc>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037de:	2bc0      	cmp	r3, #192	; 0xc0
 80037e0:	d013      	beq.n	800380a <UART_SetConfig+0x1ba>
 80037e2:	2bc0      	cmp	r3, #192	; 0xc0
 80037e4:	d814      	bhi.n	8003810 <UART_SetConfig+0x1c0>
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x1ae>
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d810      	bhi.n	8003810 <UART_SetConfig+0x1c0>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <UART_SetConfig+0x1a8>
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d006      	beq.n	8003804 <UART_SetConfig+0x1b4>
 80037f6:	e00b      	b.n	8003810 <UART_SetConfig+0x1c0>
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e0cc      	b.n	8003998 <UART_SetConfig+0x348>
 80037fe:	2302      	movs	r3, #2
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e0c9      	b.n	8003998 <UART_SetConfig+0x348>
 8003804:	2304      	movs	r3, #4
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e0c6      	b.n	8003998 <UART_SetConfig+0x348>
 800380a:	2308      	movs	r3, #8
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e0c3      	b.n	8003998 <UART_SetConfig+0x348>
 8003810:	2310      	movs	r3, #16
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0c0      	b.n	8003998 <UART_SetConfig+0x348>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a44      	ldr	r2, [pc, #272]	; (800392c <UART_SetConfig+0x2dc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d125      	bne.n	800386c <UART_SetConfig+0x21c>
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <UART_SetConfig+0x2cc>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800382e:	d017      	beq.n	8003860 <UART_SetConfig+0x210>
 8003830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003834:	d817      	bhi.n	8003866 <UART_SetConfig+0x216>
 8003836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383a:	d00b      	beq.n	8003854 <UART_SetConfig+0x204>
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d811      	bhi.n	8003866 <UART_SetConfig+0x216>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <UART_SetConfig+0x1fe>
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	d006      	beq.n	800385a <UART_SetConfig+0x20a>
 800384c:	e00b      	b.n	8003866 <UART_SetConfig+0x216>
 800384e:	2300      	movs	r3, #0
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e0a1      	b.n	8003998 <UART_SetConfig+0x348>
 8003854:	2302      	movs	r3, #2
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e09e      	b.n	8003998 <UART_SetConfig+0x348>
 800385a:	2304      	movs	r3, #4
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e09b      	b.n	8003998 <UART_SetConfig+0x348>
 8003860:	2308      	movs	r3, #8
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e098      	b.n	8003998 <UART_SetConfig+0x348>
 8003866:	2310      	movs	r3, #16
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e095      	b.n	8003998 <UART_SetConfig+0x348>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <UART_SetConfig+0x2e0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d125      	bne.n	80038c2 <UART_SetConfig+0x272>
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <UART_SetConfig+0x2cc>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003884:	d017      	beq.n	80038b6 <UART_SetConfig+0x266>
 8003886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388a:	d817      	bhi.n	80038bc <UART_SetConfig+0x26c>
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d00b      	beq.n	80038aa <UART_SetConfig+0x25a>
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d811      	bhi.n	80038bc <UART_SetConfig+0x26c>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <UART_SetConfig+0x254>
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d006      	beq.n	80038b0 <UART_SetConfig+0x260>
 80038a2:	e00b      	b.n	80038bc <UART_SetConfig+0x26c>
 80038a4:	2301      	movs	r3, #1
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e076      	b.n	8003998 <UART_SetConfig+0x348>
 80038aa:	2302      	movs	r3, #2
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e073      	b.n	8003998 <UART_SetConfig+0x348>
 80038b0:	2304      	movs	r3, #4
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e070      	b.n	8003998 <UART_SetConfig+0x348>
 80038b6:	2308      	movs	r3, #8
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e06d      	b.n	8003998 <UART_SetConfig+0x348>
 80038bc:	2310      	movs	r3, #16
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e06a      	b.n	8003998 <UART_SetConfig+0x348>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <UART_SetConfig+0x2e4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d138      	bne.n	800393e <UART_SetConfig+0x2ee>
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <UART_SetConfig+0x2cc>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038da:	d017      	beq.n	800390c <UART_SetConfig+0x2bc>
 80038dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038e0:	d82a      	bhi.n	8003938 <UART_SetConfig+0x2e8>
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	d00b      	beq.n	8003900 <UART_SetConfig+0x2b0>
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d824      	bhi.n	8003938 <UART_SetConfig+0x2e8>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <UART_SetConfig+0x2aa>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d006      	beq.n	8003906 <UART_SetConfig+0x2b6>
 80038f8:	e01e      	b.n	8003938 <UART_SetConfig+0x2e8>
 80038fa:	2300      	movs	r3, #0
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e04b      	b.n	8003998 <UART_SetConfig+0x348>
 8003900:	2302      	movs	r3, #2
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e048      	b.n	8003998 <UART_SetConfig+0x348>
 8003906:	2304      	movs	r3, #4
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e045      	b.n	8003998 <UART_SetConfig+0x348>
 800390c:	2308      	movs	r3, #8
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e042      	b.n	8003998 <UART_SetConfig+0x348>
 8003912:	bf00      	nop
 8003914:	efff69f3 	.word	0xefff69f3
 8003918:	40011000 	.word	0x40011000
 800391c:	40023800 	.word	0x40023800
 8003920:	40004400 	.word	0x40004400
 8003924:	40004800 	.word	0x40004800
 8003928:	40004c00 	.word	0x40004c00
 800392c:	40005000 	.word	0x40005000
 8003930:	40011400 	.word	0x40011400
 8003934:	40007800 	.word	0x40007800
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e02c      	b.n	8003998 <UART_SetConfig+0x348>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <UART_SetConfig+0x4bc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d125      	bne.n	8003994 <UART_SetConfig+0x344>
 8003948:	4b71      	ldr	r3, [pc, #452]	; (8003b10 <UART_SetConfig+0x4c0>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003952:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003956:	d017      	beq.n	8003988 <UART_SetConfig+0x338>
 8003958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800395c:	d817      	bhi.n	800398e <UART_SetConfig+0x33e>
 800395e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003962:	d00b      	beq.n	800397c <UART_SetConfig+0x32c>
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	d811      	bhi.n	800398e <UART_SetConfig+0x33e>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <UART_SetConfig+0x326>
 800396e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003972:	d006      	beq.n	8003982 <UART_SetConfig+0x332>
 8003974:	e00b      	b.n	800398e <UART_SetConfig+0x33e>
 8003976:	2300      	movs	r3, #0
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e00d      	b.n	8003998 <UART_SetConfig+0x348>
 800397c:	2302      	movs	r3, #2
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e00a      	b.n	8003998 <UART_SetConfig+0x348>
 8003982:	2304      	movs	r3, #4
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e007      	b.n	8003998 <UART_SetConfig+0x348>
 8003988:	2308      	movs	r3, #8
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x348>
 800398e:	2310      	movs	r3, #16
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e001      	b.n	8003998 <UART_SetConfig+0x348>
 8003994:	2310      	movs	r3, #16
 8003996:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d15b      	bne.n	8003a5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d828      	bhi.n	80039fa <UART_SetConfig+0x3aa>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x360>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe ff22 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80039d8:	61b8      	str	r0, [r7, #24]
        break;
 80039da:	e013      	b.n	8003a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe ff32 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80039e0:	61b8      	str	r0, [r7, #24]
        break;
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <UART_SetConfig+0x4c4>)
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	e00c      	b.n	8003a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fe05 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80039ee:	61b8      	str	r0, [r7, #24]
        break;
 80039f0:	e008      	b.n	8003a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e004      	b.n	8003a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	77bb      	strb	r3, [r7, #30]
        break;
 8003a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d074      	beq.n	8003af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	005a      	lsls	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	d916      	bls.n	8003a54 <UART_SetConfig+0x404>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d212      	bcs.n	8003a54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f023 030f 	bic.w	r3, r3, #15
 8003a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	89fa      	ldrh	r2, [r7, #14]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	e04f      	b.n	8003af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	77bb      	strb	r3, [r7, #30]
 8003a58:	e04c      	b.n	8003af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d828      	bhi.n	8003ab2 <UART_SetConfig+0x462>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x418>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe fec6 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003a90:	61b8      	str	r0, [r7, #24]
        break;
 8003a92:	e013      	b.n	8003abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7fe fed6 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8003a98:	61b8      	str	r0, [r7, #24]
        break;
 8003a9a:	e00f      	b.n	8003abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <UART_SetConfig+0x4c4>)
 8003a9e:	61bb      	str	r3, [r7, #24]
        break;
 8003aa0:	e00c      	b.n	8003abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe fda9 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	61b8      	str	r0, [r7, #24]
        break;
 8003aa8:	e008      	b.n	8003abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e004      	b.n	8003abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aba:	bf00      	nop
    }

    if (pclk != 0U)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	085a      	lsrs	r2, r3, #1
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d909      	bls.n	8003af0 <UART_SetConfig+0x4a0>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae2:	d205      	bcs.n	8003af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e001      	b.n	8003af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40007c00 	.word	0x40007c00
 8003b10:	40023800 	.word	0x40023800
 8003b14:	00f42400 	.word	0x00f42400

08003b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d10a      	bne.n	8003c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c6c:	f7fd fc58 	bl	8001520 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d10e      	bne.n	8003c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f81b 	bl	8003cca <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e011      	b.n	8003cc2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b09c      	sub	sp, #112	; 0x70
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cda:	e0a7      	b.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce2:	f000 80a3 	beq.w	8003e2c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fd fc1b 	bl	8001520 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8003cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d13f      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d10:	667b      	str	r3, [r7, #100]	; 0x64
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	663b      	str	r3, [r7, #96]	; 0x60
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e068      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d050      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d98:	d148      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e6      	bne.n	8003da4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3308      	adds	r3, #8
 8003ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	613b      	str	r3, [r7, #16]
   return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3308      	adds	r3, #8
 8003df4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003df6:	623a      	str	r2, [r7, #32]
 8003df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	69f9      	ldr	r1, [r7, #28]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e010      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f43f af48 	beq.w	8003cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3770      	adds	r7, #112	; 0x70
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e58:	b084      	sub	sp, #16
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	f107 001c 	add.w	r0, r7, #28
 8003e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d126      	bne.n	8003ebe <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <USB_CoreInit+0x10c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f043 0210 	orr.w	r2, r3, #16
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fad0 	bl	8004458 <USB_CoreReset>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73fb      	strb	r3, [r7, #15]
 8003ebc:	e03a      	b.n	8003f34 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d126      	bne.n	8003f12 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <USB_CoreInit+0x10c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f023 0210 	bic.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8003ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 faa6 	bl	8004458 <USB_CoreReset>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e010      	b.n	8003f34 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa9a 	bl	8004458 <USB_CoreReset>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10b      	bne.n	8003f52 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f043 0206 	orr.w	r2, r3, #6
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f5e:	b004      	add	sp, #16
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	ffbdffbf 	.word	0xffbdffbf

08003f68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 0201 	bic.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d115      	bne.n	8003fd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f7fd fabd 	bl	8001538 <HAL_Delay>
      ms++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fa39 	bl	800443c <USB_GetMode>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d01e      	beq.n	800400e <USB_SetCurrentMode+0x84>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b31      	cmp	r3, #49	; 0x31
 8003fd4:	d9f0      	bls.n	8003fb8 <USB_SetCurrentMode+0x2e>
 8003fd6:	e01a      	b.n	800400e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d115      	bne.n	800400a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fea:	2001      	movs	r0, #1
 8003fec:	f7fd faa4 	bl	8001538 <HAL_Delay>
      ms++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa20 	bl	800443c <USB_GetMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <USB_SetCurrentMode+0x84>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b31      	cmp	r3, #49	; 0x31
 8004006:	d9f0      	bls.n	8003fea <USB_SetCurrentMode+0x60>
 8004008:	e001      	b.n	800400e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e005      	b.n	800401a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b32      	cmp	r3, #50	; 0x32
 8004012:	d101      	bne.n	8004018 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004024:	b084      	sub	sp, #16
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e009      	b.n	8004058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3340      	adds	r3, #64	; 0x40
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3301      	adds	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0e      	cmp	r3, #14
 800405c:	d9f2      	bls.n	8004044 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800405e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11c      	bne.n	800409e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e005      	b.n	80040aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040b0:	461a      	mov	r2, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	4619      	mov	r1, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c4:	461a      	mov	r2, r3
 80040c6:	680b      	ldr	r3, [r1, #0]
 80040c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10c      	bne.n	80040ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f975 	bl	80043c8 <USB_SetDevSpeed>
 80040de:	e018      	b.n	8004112 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040e0:	2101      	movs	r1, #1
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f970 	bl	80043c8 <USB_SetDevSpeed>
 80040e8:	e013      	b.n	8004112 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d10c      	bne.n	800410a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f6:	2100      	movs	r1, #0
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f965 	bl	80043c8 <USB_SetDevSpeed>
 80040fe:	e008      	b.n	8004112 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004100:	2101      	movs	r1, #1
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f960 	bl	80043c8 <USB_SetDevSpeed>
 8004108:	e003      	b.n	8004112 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800410a:	2103      	movs	r1, #3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f95b 	bl	80043c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004112:	2110      	movs	r1, #16
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8f3 	bl	8004300 <USB_FlushTxFifo>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f91f 	bl	8004368 <USB_FlushRxFifo>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e043      	b.n	80041e6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004174:	d118      	bne.n	80041a8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e013      	b.n	80041ba <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e008      	b.n	80041ba <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3301      	adds	r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3b7      	bcc.n	800415e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e043      	b.n	800427c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420a:	d118      	bne.n	800423e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e013      	b.n	8004250 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e008      	b.n	8004250 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b7      	bcc.n	80041f4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004296:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <USB_DevInit+0x2d4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f043 0208 	orr.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <USB_DevInit+0x2d8>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f4:	b004      	add	sp, #16
 80042f6:	4770      	bx	lr
 80042f8:	803c3800 	.word	0x803c3800
 80042fc:	40000004 	.word	0x40000004

08004300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <USB_FlushTxFifo+0x64>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e01b      	b.n	8004358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	daf2      	bge.n	800430e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a08      	ldr	r2, [pc, #32]	; (8004364 <USB_FlushTxFifo+0x64>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e006      	b.n	8004358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	d0f0      	beq.n	8004338 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	00030d40 	.word	0x00030d40

08004368 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <USB_FlushRxFifo+0x5c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e018      	b.n	80043b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	daf2      	bge.n	8004374 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2210      	movs	r2, #16
 8004396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <USB_FlushRxFifo+0x5c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e006      	b.n	80043b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d0f0      	beq.n	8004398 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	00030d40 	.word	0x00030d40

080043c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0301 	and.w	r3, r3, #1
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <USB_CoreReset+0x64>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e01b      	b.n	80044ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	daf2      	bge.n	8004464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <USB_CoreReset+0x64>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d0f0      	beq.n	800448e <USB_CoreReset+0x36>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	00030d40 	.word	0x00030d40

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 f820 	bl	8004518 <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08004550 	.word	0x08004550
 80044fc:	08004550 	.word	0x08004550
 8004500:	08004550 	.word	0x08004550
 8004504:	08004554 	.word	0x08004554

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
